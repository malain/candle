<#@ template inherits="DSLFactory.Candle.SystemModel.CodeGeneration.StrategyTextTransformation" #>
<#@ context processor="ContextProcessor" #>
<#@ assembly name="WCFStrategy"#>
<#@ import namespace="DSLFactory.Candle.SystemModel.Strategies"#>
<# 
// Metamodel updates
Entity clazz = CurrentElement;
if( Context.GenerationPass == GenerationPass.MetaModelUpdate)
{
	clazz.Package.Layer.AddReference("System.Runtime.Serialization", ArtifactType.AssemblyInGac);
	return null;
}
if( Context.GenerationPass != GenerationPass.CodeGeneration)
	return null;

DataLayer modelsLayer = Context.Model.SoftwareComponent.DataLayer;
INamingStrategy ns = StrategyManager.GetInstance(clazz.Store).NamingStrategy;
#>
<#=this.GeneratedHeader#>

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;

namespace <#=clazz.Package.Name#> 
{
<#= FormatComment("\t", clazz.Comment)#>
<#	if (!String.IsNullOrEmpty(clazz.XmlName) || !String.IsNullOrEmpty(modelsLayer.XmlNamespace) ) {
		System.Text.StringBuilder sb = new System.Text.StringBuilder("[DataContract(");
		bool flag = false;
		if( !String.IsNullOrEmpty(clazz.XmlName) ) {
			sb.Append("Name=\"");
			sb.Append(clazz.XmlName);
			sb.Append("\"");
			flag=true;
		}
		if( !String.IsNullOrEmpty(modelsLayer.XmlNamespace)) {
			if( flag ) sb.Append(", ");
			sb.Append("Namespace=\"");
			sb.Append(modelsLayer.XmlNamespace);
			sb.Append("\"");
		}
		sb.Append(")]");
#>	
	<#=sb.ToString()#>
<#}
#>
	public partial class <#=clazz.Name#><# if( clazz.SuperClass != null ) {#> : global::<#=clazz.SuperClass.FullName#> <#}#> 
	{	
		#region Variables 	
<# foreach (Property prop in clazz.Properties) {
		if( !prop.IsForeignKey || prop.IsPrimaryKey) {
#>
		private <#=prop.Type#><#=IsValueType(prop.Type)? "?" : ""#> <#=ns.CreatePrivateVariableName(prop.Name)#>;
<#		}
	}
#>
	
<# System.Collections.Generic.IList<Association> associations = Association.GetLinksToTargets(clazz);
	foreach (Association association in associations ) {#>
		private <#=association.SourceTypeAsString#> <#=ns.CreatePrivateVariableName(association.SourceRoleName)#>;
<#}#>		
		#endregion
		
		#region Accesseurs	
<# 
	// Ajout de l'attribut xmlName
	foreach (Property prop in clazz.Properties) 
	{
		if( !prop.IsForeignKey || prop.IsPrimaryKey)
		{
			string varName = ns.CreatePrivateVariableName(prop.Name);
			System.Text.StringBuilder options = new System.Text.StringBuilder();

			if (WCFStrategy.IsRequiredProperty.GetValue(prop))
			options.Append("AsyncPattern=true,");
			if (WCFStrategy.EmitDefaultValueProperty.GetValue(prop))
			options.Append("EmitDefaultValue=true,");
			if (WCFStrategy.OrderProperty.GetValue(prop)>0) {
			  options.Append("Order=");
			  options.Append(WCFStrategy.OrderProperty.GetValue(prop).ToString());
			  options.Append(",");
			}
			if (WCFStrategy.IsRequiredProperty.GetValue(prop))
			options.Append("IsRequired=true,");
			if( !String.IsNullOrEmpty(prop.XmlName) )
			{
				options.Append("Name=\"");
				options.Append(prop.XmlName);
				options.Append("\"");
			}		
#>		
<#= FormatComment("\t\t", prop.Comment)#>
		public <#=prop.Type#><#=IsValueType(prop.Type)? "?" : ""#> <#=ns.ToPascalCasing(prop.Name)#>
		{
            [global::System.Diagnostics.DebuggerStepThrough]
			get { return <#=varName#>;}
            [global::System.Diagnostics.DebuggerStepThrough]
			set { <#=varName#> = value;}
		}
		
<#	} // endif if( prop. 
} // end foreach( Property )

        foreach (Association association in associations)
        {
        	string varName = ns.CreatePrivateVariableName(association.SourceRoleName);
			if( !String.IsNullOrEmpty(association.XmlName) )
			{#>		
		[XmlElement(Name="<#=association.XmlName#>")] 
<#			}
			if( association.SourceMultiplicity == Multiplicity.OneMany || association.SourceMultiplicity == Multiplicity.ZeroMany) {
#>
		//[KnownType(typeof(global::<#= association.Target.FullName #>))]
<#}#>		
        public <#=association.SourceTypeAsString#> <#=ns.ToPascalCasing(association.SourceRoleName) #>
        {
            [global::System.Diagnostics.DebuggerStepThrough]
        	get { return <#=varName#>;}
            [global::System.Diagnostics.DebuggerStepThrough]        	
			set { <#=varName#> = value;}
        }
        
<#
        } // end foreach(Association
#>	
		#endregion	
	}
}	







