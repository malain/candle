<#@ template inherits="DSLFactory.Candle.SystemModel.CodeGeneration.StrategyTextTransformation" #>
<#@ context processor="ContextProcessor" #>
<# 
DataLayer modelsLayer = Context.Model.SoftwareComponent.DataLayer;
Entity clazz = CurrentElement;
// Metamodel updates
if( Context.GenerationPass == GenerationPass.MetaModelUpdate)
{
	return null;
}

if( Context.GenerationPass == GenerationPass.ElementAdded)
	return null;	
INamingStrategy ns = StrategyManager.GetInstance(clazz.Store).NamingStrategy;	
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Xml;
using System.Xml.Serialization;
using System.Collections;

namespace <#=clazz.Package.Name#> 
{
<#= FormatComment("\t", clazz.Comment)#>
	[Serializable()]
	public partial class <#=clazz.Name#><# if( clazz.SuperClass != null ) {#> : global::<#=clazz.SuperClass.FullName#> <#}#> 
	{	
		#region Variables 	
<# foreach (Property prop in clazz.Properties) {
		if( !prop.IsForeignKey || prop.IsPrimaryKey) {
#>
		private <#=prop.FullTypeName#><#=IsValueType(prop.FullTypeName)? "?" : ""#> <#=ns.CreatePrivateVariableName(prop.Name)#>;
<#		}
	}
#>
		#endregion
		
		#region Accesseurs	
<# 
	// Ajout de l'attribut xmlName
	foreach (Property prop in clazz.Properties) 
	{
		if( !prop.IsForeignKey || prop.IsPrimaryKey)
		{
			string varName = ns.CreatePrivateVariableName(prop.Name);
#>
<#= FormatComment("\t\t", prop.Comment)#>			
<#		if( !String.IsNullOrEmpty(prop.XmlName) )
			{
#>		
		[XmlElement("<#=prop.XmlName#>")] 
<#		} 
#>
		public virtual <#=prop.FullTypeName#><#=IsValueType(prop.FullTypeName)? "?" : ""#> <#=prop.Name#>
		{
            [global::System.Diagnostics.DebuggerStepThrough]
			get { return <#=varName#>;}
            [global::System.Diagnostics.DebuggerStepThrough]
			set { <#=varName#> = value;}
		}
		
<#	}
} // end foreach( Property )
#>	
		#endregion	

<#	if( clazz.PrimaryKeys.Count > 1 ) {
#>
		#region NHibernate Keys	
		
		private PrimaryKey _key;
		
		public virtual PrimaryKey Key
		{
			get{return _key;}
			set{_key=value;}
		}

		[Serializable]
		/// <summary>
		/// Composite primary key
		/// </summary>
		[XmlRoot(Namespace="<#=clazz.FullName#>")]
		public class PrimaryKey 
		{
			#region Variables 	
<# foreach (Property prop in clazz.PrimaryKeys) {
#>
			private global::<#=prop.Type#> <#=ns.CreatePrivateVariableName(prop.Name)#>;
<# }
#>
			#endregion
			
			#region Accesseurs	
<# 
	foreach (Property prop in clazz.PrimaryKeys) 
	{
		string varName = ns.CreatePrivateVariableName(prop.Name);
#>
			public global::<#=prop.FullTypeName#> <#=ns.ToPascalCasing(prop.Name)#>
			{
	            [global::System.Diagnostics.DebuggerStepThrough]
				get { return <#=varName#>;}
	            [global::System.Diagnostics.DebuggerStepThrough]
				set { <#=varName#> = value;}
			}
				
<#	}
#>
			#endregion				
			
            public override bool Equals(object obj)
            {
                if (obj != null && obj is PrimaryKey)
                {
                    PrimaryKey key = obj as PrimaryKey;
                    return 
<# 
	int i=0;
	foreach (Property prop in clazz.PrimaryKeys) 
	{
		string delimiter = (i++ < clazz.PrimaryKeys.Count-1 ? "&&" : ";");
		string varName = ns.ToPascalCasing(prop.Name);
#>	                    key.<#=varName#> == this.<#=varName#> <#=delimiter#>
<#	}
#>
                }
                return base.Equals(obj);
            }		
            
            public override int GetHashCode()
            {
				System.Text.StringBuilder sb = new System.Text.StringBuilder();
<# 
	foreach (Property prop in clazz.PrimaryKeys) 
	{
		string varName = ns.ToPascalCasing(prop.Name);	
		if( prop.Nullable ) {	
#>				sb.Append( this.<#=varName#> ?? "<null>");
<#		}
	}
#>
				return sb.ToString().GetHashCode();
            }	
		}	
		#endregion
<#	} // if( clazz.PrimaryKeys.Count > 1 ) {
#>
		#region Associations 				
<#  // Recherche des associations qui ont cette entité comme source
    System.Collections.Generic.IList<Association> associations = Association.GetLinksToTargets(clazz);
    foreach (Association association in associations) 
	  {
		  if( association.SourceMultiplicity == Multiplicity.OneMany || association.SourceMultiplicity == Multiplicity.ZeroMany) 
		  {
#>
		private System.Collections.IList <#=ns.CreatePrivateVariableName(association.SourceRoleName)#>;
<#		}
		  if( association.SourceMultiplicity == Multiplicity.One || association.SourceMultiplicity == Multiplicity.ZeroOne) 
		  {
#>
		private <#=association.Target.FullName#> <#=ns.CreatePrivateVariableName(association.SourceRoleName)#>;
<#		}
	  }
		foreach (Association association in associations)
    {
					if( association.SourceMultiplicity == Multiplicity.OneMany || association.SourceMultiplicity == Multiplicity.ZeroMany) 
					{
        		string varName = ns.CreatePrivateVariableName(association.SourceRoleName);
#>		[XmlArrayItem(typeof(global::<#= association.Target.FullName #>))]
      //[KnownType((typeof(global::<#= association.Target.FullName #>)))]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Candle", "<#=association.Id#>")]		
        public System.Collections.IList <#=ns.ToPascalCasing(association.SourceRoleName) #>
        {
            [global::System.Diagnostics.DebuggerStepThrough]
        	get { return <#=varName#>;}
            [global::System.Diagnostics.DebuggerStepThrough]
			set { <#=varName#> = value;}
        }
        
<#			}
					if( association.SourceMultiplicity == Multiplicity.One || association.SourceMultiplicity == Multiplicity.ZeroOne) 
					{
        		string varName = ns.CreatePrivateVariableName(association.SourceRoleName);
#>		  public <#=association.Target.FullName#> <#=ns.ToPascalCasing(association.SourceRoleName) #>
        {
            [global::System.Diagnostics.DebuggerStepThrough]
        	get { return <#=varName#>;}
            [global::System.Diagnostics.DebuggerStepThrough]
			set { <#=varName#> = value;}
        }
        
<#			}
    } // end foreach(Association
    
    // Idem pour les cibles
	  // Recherche des associations qui ont cette entité comme cible
    associations = Association.GetLinksToSources(clazz);
    foreach (Association association in associations) 
	  {
		  if( association.TargetMultiplicity == Multiplicity.OneMany || association.TargetMultiplicity == Multiplicity.ZeroMany) 
		  {
#>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Candle", "<#=association.Id#>")]		
        private System.Collections.IList <#=ns.CreatePrivateVariableName(association.TargetRoleName)#>;
<#		  }
		  if( association.TargetMultiplicity == Multiplicity.One || association.TargetMultiplicity == Multiplicity.ZeroOne) 
		  {
#>
		private <#=association.Source.FullName#> <#=ns.CreatePrivateVariableName(association.TargetRoleName)#>;
<#		}
	  }
		foreach (Association association in associations)
    {
					if( association.TargetMultiplicity == Multiplicity.OneMany || association.TargetMultiplicity == Multiplicity.ZeroMany) 
					{
        		string varName = ns.CreatePrivateVariableName(association.TargetRoleName);
#>		[XmlArrayItem(typeof(global::<#= association.Source.FullName #>))]
      //[KnownType((typeof(global::<#= association.Source.FullName #>)))]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Candle", "<#=association.Id#>")]
        public System.Collections.IList <#=ns.ToPascalCasing(association.TargetRoleName) #>
        {
            [global::System.Diagnostics.DebuggerStepThrough]
        	get { return <#=varName#>;}
            [global::System.Diagnostics.DebuggerStepThrough]
			set { <#=varName#> = value;}
        }
        
<#			}
					if( association.TargetMultiplicity == Multiplicity.One || association.TargetMultiplicity == Multiplicity.ZeroOne) 
					{
        		string varName = ns.CreatePrivateVariableName(association.TargetRoleName);
#>		 
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Candle", "<#=association.Id#>")]        
        public <#=association.Source.FullName#> <#=ns.ToPascalCasing(association.TargetRoleName) #>
        {
            [global::System.Diagnostics.DebuggerStepThrough]
        	get { return <#=varName#>;}
            [global::System.Diagnostics.DebuggerStepThrough]
			set { <#=varName#> = value;}
        }
        
<#			}
    } // end foreach(Association
#>	
		#endregion	
	}
}	
