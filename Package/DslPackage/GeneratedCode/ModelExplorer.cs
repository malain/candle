//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslShell = global::Microsoft.VisualStudio.Modeling.Shell;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal partial class CandleExplorer : CandleExplorerBase
	{
		/// <summary>
		/// Constructs a new CandleExplorer.
		/// </summary>
		public CandleExplorer(global::System.IServiceProvider serviceProvider)
			: base(serviceProvider)
		{
		}
	}
	
	/// <summary>
	/// Control hosted in the CandleExplorerToolWindow.
	/// </summary>
	internal abstract class CandleExplorerBase : DslShell::ModelExplorerTreeContainer
	{
		/// <summary>
		/// Constructs a new CandleExplorerBase.
		/// </summary>
		protected CandleExplorerBase(global::System.IServiceProvider serviceProvider) : base(serviceProvider)
		{
			try
			{	
				// Adds hidden path to hide elements from the explorer
				this.AddHiddenPath( new global::System.Guid[] { global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.DomainClassId }); 
				this.AddHiddenPath( new global::System.Guid[] { global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.DomainClassId }); 
				this.AddHiddenPath( new global::System.Guid[] { global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.DomainClassId }); 
				this.AddHiddenPath( new global::System.Guid[] { global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.DomainClassId }); 
			
			}
			catch (global::System.InvalidOperationException)
			{
				// Each hidden path specified needs to have odd number of guid entries.  The entries will alternative between
				// DomainRelationshipID and DomainClassID. The guids list should also start out with a DomainRelationshipID.
				// This exception will be swallowed...
				global::System.Diagnostics.Debug.Fail("Each hidden path specified needs to have odd number of guid entries.\r\nPlease update the HiddenNodes section under ExplorerBehavior in the DSL file\r\nso the Model Explorer can hide element properly.");
			}
			
			// Adds custom tree node settings...
			global::System.Resources.ResourceManager resourceManager = global::DSLFactory.Candle.SystemModel.CandleDomainModel.SingletonResourceManager;
			
			this.AddExplorerNodeCustomSetting(global::DSLFactory.Candle.SystemModel.DataAccessLayer.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("DataAccessLayerExplorerImage")), 
							true); 
			this.AddExplorerNodeCustomSetting(global::DSLFactory.Candle.SystemModel.DataLayer.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("DataLayerExplorerImage")), 
							true); 
			this.AddExplorerNodeCustomSetting(global::DSLFactory.Candle.SystemModel.SoftwareComponent.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SoftwareComponentExplorerImage")), 
							false); 
			this.AddExplorerNodeCustomSetting(global::DSLFactory.Candle.SystemModel.BusinessLayer.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("BusinessLayerExplorerImage")), 
							true); 
			this.AddExplorerNodeCustomSetting(global::DSLFactory.Candle.SystemModel.InterfaceLayer.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("InterfaceLayerExplorerImage")), 
							true); 
			this.AddExplorerNodeCustomSetting(global::DSLFactory.Candle.SystemModel.Entity.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("EntityExplorerImage")), 
							false); 
			this.AddExplorerNodeCustomSetting(global::DSLFactory.Candle.SystemModel.ClassImplementation.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("ClassImplementationExplorerImage")), 
							false); 
			this.AddExplorerNodeCustomSetting(global::DSLFactory.Candle.SystemModel.ServiceContract.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("ServiceContractExplorerImage")), 
							false); 
			this.AddExplorerNodeCustomSetting(global::DSLFactory.Candle.SystemModel.Enumeration.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("EnumerationExplorerImage")), 
							true); 
			this.AddExplorerNodeCustomSetting(global::DSLFactory.Candle.SystemModel.Package.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("PackageExplorerImage")), 
							false); 
			this.AddExplorerNodeCustomSetting(global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SoftwareComponentHasLayersExplorerImage")), 
							true); 
		}
	
	
	
		/// <summary>
		/// Create IElementVisitor
		/// </summary>
		/// <returns>IElementVisitor</returns>
		protected override DslModeling::IElementVisitor CreateElementVisitor()
		{
			return new DslShell::ExplorerElementVisitor(this);
		}
	
		/// <summary>
		/// Specifies the context menu that should be shown for the model explorer.
		///</summary>
		protected override global::System.ComponentModel.Design.CommandID ContextMenuCommandId
		{
			get
			{
				return Constants.CandleExplorerMenu;
			}
		}
		
		/// <summary>
		/// Returns the root elements domain class Id. The is the very top level tree node in the TreeView
		///</summary>
		protected override global::System.Guid RootElementDomainClassId
		{
			get { return global::DSLFactory.Candle.SystemModel.CandleModel.DomainClassId; }
		}
		
		/// <summary>
		/// Returns the root elements to be displayed in the explorer.
		///</summary>
		protected override global::System.Collections.IList FindRootElements(DslModeling::Store store)
		{
			return store.ElementDirectory.FindElements( this.RootElementDomainClassId);
		}
	}
}
	


