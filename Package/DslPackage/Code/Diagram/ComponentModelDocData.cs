
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslShell=Microsoft.VisualStudio.Modeling.Shell;
using DslModeling=Microsoft.VisualStudio.Modeling;
using DslValidation=Microsoft.VisualStudio.Modeling.Validation;
using DslDiagrams=Microsoft.VisualStudio.Modeling.Diagrams;
using VsShell=Microsoft.VisualStudio.Shell.Interop;
using System.Collections.ObjectModel;
using Microsoft.VisualStudio.Modeling.Diagrams;
using System.Collections.Generic;
using System.IO;
using System;
using Microsoft.VisualStudio.Shell.Interop;
using EnvDTE;
using DSLFactory.Candle.SystemModel.Strategies;
using Microsoft.VisualStudio.Modeling;
using DSLFactory.Candle.SystemModel.Configuration;
using DSLFactory.Candle.SystemModel.CodeGeneration;
using DSLFactory.Candle.SystemModel.Repository;


namespace DSLFactory.Candle.SystemModel
{
    /// <summary>
    /// Double-derived class to allow easier code customization.
    /// </summary>
    internal partial class CandleDocData
    {
        /// <summary>
        /// Document lock holder registered for the subordinate .diagram file.
        /// </summary>
        // TODO (existe dans SystemModelDocDataBase) Voir LoadDiagram<>
        //private DslShell::SubordinateDocumentLockHolder diagramDocument2LockHolder;

        private const string DataLayerDiagramExtension = ".Models.diagram";
        private const string UILayerDiagramExtension = ".UI.diagram";

        public override bool SupportsLogicalView( Guid logicalView )
        {
            Guid guid = new Guid( LogicalViewID.ProjectSpecificEditor );
            return base.SupportsLogicalView( logicalView ) || logicalView == guid;
        }

        protected override void OnDocumentLoaded(EventArgs e)
        {
            base.OnDocumentLoaded(e);           
 //           Mapper.Instance.RegisterEvents();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="isReload"></param>
        /// <returns></returns>
        protected override int LoadDocData(string fileName, bool isReload)
        {
            int result = base.LoadDocData(fileName, isReload);

            // Initialisation des stratégies
            CandleModel model = CandleModel.GetInstance(this.Store);
            StrategyManager.GetInstance(this.Store);

            // Execution du wizard d'initialisation (voir commentaire dans SoftwareComponentInsertRule
            if (model != null && model.SoftwareComponent != null && model.Name == "?")
            {
                using (Transaction transaction = model.Store.TransactionManager.BeginTransaction("Component initialization"))
                {
                    DSLFactory.Candle.SystemModel.Rules.SoftwareComponentInsertRule.ShowComponentWizard(model.SoftwareComponent);
                    transaction.Commit();
                }
            }

            Mapper.Instance.SetModel(model, fileName);

            // Force la validation du modèle - NON Validation sur open
            // model.ValidateReferences(new Microsoft.VisualStudio.Modeling.Validation.ValidationContext(Microsoft.VisualStudio.Modeling.Validation.ValidationCategories.Open, model));

            Mapper.Instance.RegisterEvents();

            return result;
        }

        /// <summary>
        /// Chargement du modèle
        /// </summary>
        protected override void Load( string fileName, bool isReload )
        {
            // Ouverture du modèle et du diagramme
            base.Load( fileName, isReload );
            
            // Chargement des diagrammes associés
            LoadDiagram<DataLayer, DataLayerDiagram>(fileName, DataLayerDiagramExtension, DataLayerDiagram.DomainClassId, delegate(Partition partition) { return new DataLayerDiagram(partition); } );
            LoadDiagram<UIWorkflowLayer, UIWorkflowLayerDiagram>(fileName, UILayerDiagramExtension, UIWorkflowLayerDiagram.DomainClassId, delegate(Partition partition) { return new UIWorkflowLayerDiagram(partition); });
        }

        /// <summary>
        /// Saves the given file.
        /// </summary>
        protected override void Save( string fileName )
        {
            ILogger logger = ServiceLocator.Instance.GetService<ILogger>();
            if (logger != null)
                logger.BeginProcess(false, false);

            try
            {
                // On ne peut pas sauver si on est dans le repository
                if (Repository.RepositoryManager.IsFileInRepository(fileName))
                {
                    if (System.Windows.Forms.MessageBox.Show("Warning, this model is in the local repository. Modify it can cause overriding with the main repository. Do you really want to save this model ?", "Warning", System.Windows.Forms.MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
                        return;
                }

                Directory.CreateDirectory(Path.GetDirectoryName(fileName));

                // SCC
                ServiceLocator.Instance.ShellHelper.EnsureCheckout(fileName + this.DiagramExtension);

                base.Save(fileName);

                // Rajout à la solution pour être sur de la prise en compte dans le SCC            
                ServiceLocator.Instance.ShellHelper.AddFileToSolution(fileName + this.DiagramExtension);

                SaveDocData<DataLayer, DataLayerDiagram>(fileName, DataLayerDiagramExtension);
                SaveDocData<UIWorkflowLayer, UIWorkflowLayerDiagram>(fileName, UILayerDiagramExtension);

                CandleModel system = CandleModel.GetInstance(this.Store);
                if (system == null)
                    return;

                // Pas de copie dans le repository si il y a des erreurs
                if (this.ValidationController.ErrorMessages.Count > 0)
                {
                    //                if( System.Windows.Forms.MessageBox.Show( "There is validation errors. Do you want to copy the model in the repository ?", "Warning", System.Windows.Forms.MessageBoxButtons.YesNo ) == System.Windows.Forms.DialogResult.No )
                    return;
                }
            }
            finally
            {
                if (logger != null)
                    logger.EndProcess();
            }
        }

        private void LoadDiagram<TModel, TDiagram>(string fileName, string diagramExtension, System.Guid diagramDomainId, CreateDiagramHandler callback)
            where TModel : Microsoft.VisualStudio.Modeling.ModelElement
            where TDiagram : ComponentModelDiagram
        {
            ReadOnlyCollection<TModel> modelsLayerList = this.Store.ElementDirectory.FindElements<TModel>();
            if( modelsLayerList.Count == 0 )
                return;

            DslModeling::SerializationResult serializationResult = new DslModeling::SerializationResult();
            DslModeling::ISchemaResolver schemaResolver = new DslShell::ModelingSchemaResolver( this.ServiceProvider );

            // Enable diagram fixup rules in our store, because we will load diagram data.
            global::DSLFactory.Candle.SystemModel.CandleDomainModel.EnableDiagramRules( this.Store );
            string diagramFileName = fileName + diagramExtension;

            // Ensure that subordinate diagram file is named properly; handles the case where a rename occurs while the designer was closed.
            if( this.Hierarchy != null )
            {
                uint itemId = DslShell::SubordinateFileHelper.GetChildProjectItemId( this.Hierarchy, this.ItemId, DataLayerDiagramExtension );
                if( itemId != global::Microsoft.VisualStudio.VSConstants.VSITEMID_NIL )
                {
                    DslShell::SubordinateFileHelper.EnsureChildFileName( this.ServiceProvider, this.Hierarchy, itemId, diagramFileName );

                    // Found the diagram file, lock it in the running documents table.
                    //this.diagramDocument2LockHolder = DslShell::SubordinateFileHelper.LockSubordinateDocument( this.ServiceProvider, this, diagramFileName, itemId );
                    //if( this.diagramDocument2LockHolder == null )
                    //{
                    //    throw new global::System.InvalidOperationException( global::DSLFactory.Candle.SystemModel.SystemModelDomainModel.SingletonResourceManager.GetString( "CannotOpenDocument" ) );
                    //}
                }
            }

            try
            {
                global::DSLFactory.Candle.SystemModel.CandleSerializationHelper.Instance.LoadDiagram<TModel, TDiagram>(serializationResult, modelsLayerList[0], diagramFileName, schemaResolver, diagramDomainId, callback);
            }
            catch
            {
                ServiceLocator.Instance.IDEHelper.ShowMessage(String.Concat("Error when opening diagram file ", diagramFileName));
            }
            finally
            {
                //if( this.diagramDocument2LockHolder != null && (serializationResult.Failed ) )
                //{
                //    // Load failed, release the document lock if we added one above.
                //    this.diagramDocument2LockHolder.UnregisterSubordinateDocument();
                //    this.diagramDocument2LockHolder = null;
                //}
            }
            // Report serialization messages.
            this.SuspendErrorListRefresh();
            try
            {
                // Report serialization messages.
                foreach( DslModeling::SerializationMessage serializationMessage in serializationResult )
                {
                    this.AddErrorListItem( new DslShell::SerializationErrorListItem( this.ServiceProvider, serializationMessage ) );
                }
            }
            finally
            {
                this.ResumeErrorListRefresh();
            }

            if( serializationResult.Failed )
            {
                // Load failed, can't open the file.
                throw new global::System.InvalidOperationException( global::DSLFactory.Candle.SystemModel.CandleDomainModel.SingletonResourceManager.GetString( "CannotOpenDocument" ) );
            }
            else
            {
                if (this.Hierarchy != null && global::System.IO.File.Exists(diagramFileName))
                {
                    DslShell::SubordinateFileHelper.EnsureChildProjectItem(this.Hierarchy, this.ItemId, diagramFileName);
                }
            }
        }

        private void SaveDocData<TModel, TDiagram>( string fileName, string diagramExtension )
            where TModel : Microsoft.VisualStudio.Modeling.ModelElement
            where TDiagram : ComponentModelDiagram
        {
            DslModeling::SerializationResult serializationResult = new DslModeling::SerializationResult();
            IList<TModel> list = this.Store.ElementDirectory.FindElements<TModel>();

            string diagramFileName = fileName + diagramExtension;
           // Utils.UnsetReadOnly(diagramFileName);

            if( list.Count == 0 )
            {
                if( File.Exists( diagramFileName ) )
                    File.Delete( diagramFileName );
                return;
            }

            TModel modelRoot = list[0];
            global::System.Collections.Generic.IList<DslDiagrams::PresentationElement> diagrams = DslDiagrams::PresentationViewsSubject.GetPresentation( modelRoot );
            foreach( PresentationElement presentationElement in diagrams )
            {
                TDiagram diagram = presentationElement as TDiagram;
                if( diagram != null )
                {
                    try
                    {
                        this.SuspendFileChangeNotification( diagramFileName );

                        global::DSLFactory.Candle.SystemModel.CandleSerializationHelper.Instance.SaveDiagram<TModel>( serializationResult, modelRoot, fileName, diagram, diagramFileName, this.Encoding, false );
                        if( !serializationResult.Failed )
                        {
                            // fileName != this.FileName is false in the case of Save As.  Allow OnFileNameChanged() below to handle this case.
                            if( global::System.StringComparer.OrdinalIgnoreCase.Compare( fileName, this.FileName ) == 0 && global::System.IO.File.Exists( diagramFileName ) )
                            {
                                //DslShell::SubordinateFileHelper.EnsureChildProjectItem( this.Hierarchy, this.ItemId, diagramFileName );
                                ServiceLocator.Instance.ShellHelper.AddFileToSolution(diagramFileName);
                            }
                        }
                    }
                    finally
                    {
                        this.ResumeFileChangeNotification( diagramFileName );
                    }
                }
            }


            // Report serialization messages.
            foreach( DslModeling::SerializationMessage serializationMessage in serializationResult )
            {
                this.AddErrorListItem( new DslShell::SerializationErrorListItem( this.ServiceProvider, serializationMessage ) );
            }
            if( serializationResult.Failed )
            {	// Save failed.
                throw new global::System.InvalidOperationException( global::DSLFactory.Candle.SystemModel.CandleDomainModel.SingletonResourceManager.GetString( "CannotSaveDocument" ) );
            }
        }

    }
}

