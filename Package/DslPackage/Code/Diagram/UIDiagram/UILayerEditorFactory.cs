//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using VSShellInterop=Microsoft.VisualStudio.Shell.Interop;
using DslShell=Microsoft.VisualStudio.Modeling.Shell;

namespace DSLFactory.Candle.SystemModel
{
    /// <summary>
    /// Factory for creating our editors
    /// </summary>
    
    // Changer le guid
    // Ajouter un register dans le package
    [global::System.Runtime.InteropServices.Guid( "2A9B689E-9B03-4159-8AE3-0C4D51B67614" )]
    internal class UIWorkflowLayerEditorFactory : DslShell::ModelingEditorFactory
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="serviceProvider">Service provider used to access VS services.</param>
        public UIWorkflowLayerEditorFactory( global::System.IServiceProvider serviceProvider )
            : base( serviceProvider )
        {
        }

        /// <summary>
        /// Called by the shell to ask the editor to create a new document object.
        /// </summary>
        protected override DslShell::ModelingDocData CreateDocData( string fileName, VSShellInterop::IVsHierarchy hierarchy, uint itemId )
        {
            // Create the document type supported by this editor.
            return new CandleDocData( this.ServiceProvider, typeof( UIWorkflowLayerEditorFactory ).GUID );
        }

        /// <summary>
        /// Called by the shell to ask the editor to create a new view object.
        /// </summary>
        protected override DslShell::ModelingDocView CreateDocView( DslShell::ModelingDocData docData, string physicalView, out string editorCaption )
        {
            // Create the view type supported by this editor.
            editorCaption = " [UI Workflow]";
            return new UIWorkflowLayerDocView( docData, this.ServiceProvider );
        }
    }
}

