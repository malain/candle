//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass CandleModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModel.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModel.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5b0a3d28-eff7-4dcd-8b5c-70a38a0f03fb")]
	public partial class CandleModel : CandleElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CandleModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b0a3d28, 0xeff7, 0x4dcd, 0x8b, 0x5c, 0x70, 0xa3, 0x8a, 0x0f, 0x03, 0xfb);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public CandleModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public CandleModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region Path domain property code
		
		/// <summary>
		/// Path domain property Id.
		/// </summary>
		public static readonly global::System.Guid PathDomainPropertyId = new global::System.Guid(0x47e4d406, 0x75df, 0x43b4, 0x94, 0xc5, 0x9d, 0xec, 0xdd, 0xca, 0x83, 0x67);
		
		/// <summary>
		/// Storage for Path
		/// </summary>
		private global::System.String pathPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Path domain property.
		/// Description for DSLFactory.Candle.SystemModel.CandleModel.Path
		/// </summary>
		[System.ComponentModel.Editor(typeof(DSLFactory.Candle.SystemModel.Editor.PathEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModel/Path.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModel/Path.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("47e4d406-75df-43b4-94c5-9decddca8367")]
		public global::System.String Path
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pathPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PathPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CandleModel.Path domain property.
		/// </summary>
		internal sealed partial class PathPropertyHandler : DslModeling::DomainPropertyValueHandler<CandleModel, global::System.String>
		{
			private PathPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CandleModel.Path domain property value handler.
			/// </summary>
			public static readonly PathPropertyHandler Instance = new PathPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CandleModel.Path domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PathDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CandleModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pathPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CandleModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pathPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Url domain property code
		
		/// <summary>
		/// Url domain property Id.
		/// </summary>
		public static readonly global::System.Guid UrlDomainPropertyId = new global::System.Guid(0x7c85acf7, 0x9b6b, 0x4d5a, 0xaa, 0x9a, 0x43, 0x07, 0x6d, 0x7f, 0xac, 0x2d);
		
		/// <summary>
		/// Storage for Url
		/// </summary>
		private global::System.String urlPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Url domain property.
		/// Description for DSLFactory.Candle.SystemModel.CandleModel.Url
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModel/Url.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModel/Url.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7c85acf7-9b6b-4d5a-aa9a-43076d7fac2d")]
		public global::System.String Url
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return urlPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UrlPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CandleModel.Url domain property.
		/// </summary>
		internal sealed partial class UrlPropertyHandler : DslModeling::DomainPropertyValueHandler<CandleModel, global::System.String>
		{
			private UrlPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CandleModel.Url domain property value handler.
			/// </summary>
			public static readonly UrlPropertyHandler Instance = new UrlPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CandleModel.Url domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UrlDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CandleModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.urlPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CandleModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.urlPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Version domain property code
		
		/// <summary>
		/// Version domain property Id.
		/// </summary>
		public static readonly global::System.Guid VersionDomainPropertyId = new global::System.Guid(0x39f8c727, 0x0015, 0x431b, 0xb3, 0xc8, 0xb9, 0x63, 0x15, 0xd6, 0x33, 0xfc);
		
		/// <summary>
		/// Storage for Version
		/// </summary>
		private VersionInfo versionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Version domain property.
		/// Description for DSLFactory.Candle.SystemModel.CandleModel.Version
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModel/Version.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModel/Version.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("39f8c727-0015-431b-b3c8-b96315d633fc")]
		public VersionInfo Version
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return versionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CandleModel.Version domain property.
		/// </summary>
		internal sealed partial class VersionPropertyHandler : DslModeling::DomainPropertyValueHandler<CandleModel, VersionInfo>
		{
			private VersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CandleModel.Version domain property value handler.
			/// </summary>
			public static readonly VersionPropertyHandler Instance = new VersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CandleModel.Version domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed VersionInfo GetValue(CandleModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.versionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CandleModel element, VersionInfo newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				VersionInfo oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.versionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region StrategyTemplate domain property code
		
		/// <summary>
		/// StrategyTemplate domain property Id.
		/// </summary>
		public static readonly global::System.Guid StrategyTemplateDomainPropertyId = new global::System.Guid(0xf8b9132b, 0x48a6, 0x4586, 0x94, 0x81, 0x73, 0x2e, 0xf9, 0x2f, 0x46, 0xd9);
		
		/// <summary>
		/// Storage for StrategyTemplate
		/// </summary>
		private global::System.String strategyTemplatePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of StrategyTemplate domain property.
		/// Description for DSLFactory.Candle.SystemModel.CandleModel.Strategy Template
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModel/StrategyTemplate.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModel/StrategyTemplate.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("f8b9132b-48a6-4586-9481-732ef92f46d9")]
		public global::System.String StrategyTemplate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return strategyTemplatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StrategyTemplatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CandleModel.StrategyTemplate domain property.
		/// </summary>
		internal sealed partial class StrategyTemplatePropertyHandler : DslModeling::DomainPropertyValueHandler<CandleModel, global::System.String>
		{
			private StrategyTemplatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CandleModel.StrategyTemplate domain property value handler.
			/// </summary>
			public static readonly StrategyTemplatePropertyHandler Instance = new StrategyTemplatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CandleModel.StrategyTemplate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StrategyTemplateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CandleModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.strategyTemplatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CandleModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.strategyTemplatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DotNetFrameworkVersion domain property code
		
		/// <summary>
		/// DotNetFrameworkVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid DotNetFrameworkVersionDomainPropertyId = new global::System.Guid(0x886b9df4, 0x034c, 0x47c8, 0xa2, 0xb7, 0xb8, 0xcb, 0x61, 0x08, 0x01, 0x4d);
		
		/// <summary>
		/// Storage for DotNetFrameworkVersion
		/// </summary>
		private VersionInfo dotNetFrameworkVersionPropertyStorage = DslModeling::SerializationUtilities.GetValue<VersionInfo>("2.0.0.0");
		
		/// <summary>
		/// Gets or sets the value of DotNetFrameworkVersion domain property.
		/// Description for DSLFactory.Candle.SystemModel.CandleModel.Framework
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModel/DotNetFrameworkVersion.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModel/DotNetFrameworkVersion.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(typeof(global::DSLFactory.Candle.SystemModel.VersionInfo), "2.0.0.0")]
		[DslModeling::DomainObjectId("886b9df4-034c-47c8-a2b7-b8cb6108014d")]
		public VersionInfo DotNetFrameworkVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dotNetFrameworkVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DotNetFrameworkVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CandleModel.DotNetFrameworkVersion domain property.
		/// </summary>
		internal sealed partial class DotNetFrameworkVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<CandleModel, VersionInfo>
		{
			private DotNetFrameworkVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CandleModel.DotNetFrameworkVersion domain property value handler.
			/// </summary>
			public static readonly DotNetFrameworkVersionPropertyHandler Instance = new DotNetFrameworkVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CandleModel.DotNetFrameworkVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DotNetFrameworkVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed VersionInfo GetValue(CandleModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dotNetFrameworkVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CandleModel element, VersionInfo newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				VersionInfo oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dotNetFrameworkVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Visibility domain property code
		
		/// <summary>
		/// Visibility domain property Id.
		/// </summary>
		public static readonly global::System.Guid VisibilityDomainPropertyId = new global::System.Guid(0xd67108f0, 0x59c1, 0x47ce, 0xbb, 0xd0, 0x3e, 0x82, 0xff, 0x29, 0x11, 0xa7);
		
		/// <summary>
		/// Storage for Visibility
		/// </summary>
		private Visibility visibilityPropertyStorage = DSLFactory.Candle.SystemModel.Visibility.Internal;
		
		/// <summary>
		/// Gets or sets the value of Visibility domain property.
		/// VisibilitÃ© du composant
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModel/Visibility.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModel/Visibility.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DSLFactory.Candle.SystemModel.Visibility.Internal)]
		[DslModeling::DomainObjectId("d67108f0-59c1-47ce-bbd0-3e82ff2911a7")]
		public Visibility Visibility
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return visibilityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VisibilityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CandleModel.Visibility domain property.
		/// </summary>
		internal sealed partial class VisibilityPropertyHandler : DslModeling::DomainPropertyValueHandler<CandleModel, Visibility>
		{
			private VisibilityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CandleModel.Visibility domain property value handler.
			/// </summary>
			public static readonly VisibilityPropertyHandler Instance = new VisibilityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CandleModel.Visibility domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VisibilityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Visibility GetValue(CandleModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.visibilityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CandleModel element, Visibility newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Visibility oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.visibilityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ComponentType domain property code
		
		/// <summary>
		/// ComponentType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ComponentTypeDomainPropertyId = new global::System.Guid(0xbc71de9b, 0x70da, 0x4b53, 0x82, 0x19, 0xba, 0xd6, 0xb2, 0xb7, 0xda, 0xfd);
		
		/// <summary>
		/// Gets or sets the value of ComponentType domain property.
		/// Description for DSLFactory.Candle.SystemModel.CandleModel.Component Type
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModel/ComponentType.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModel/ComponentType.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("bc71de9b-70da-4b53-8219-bad6b2b7dafd")]
		public ComponentType ComponentType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ComponentTypePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the CandleModel.ComponentType domain property.
		/// </summary>
		internal sealed partial class ComponentTypePropertyHandler : DslModeling::CalculatedPropertyValueHandler<CandleModel, ComponentType>
		{
			private ComponentTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CandleModel.ComponentType domain property value handler.
			/// </summary>
			public static readonly ComponentTypePropertyHandler Instance = new ComponentTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CandleModel.ComponentType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ComponentTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ComponentType GetValue(CandleModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ComponentType because its Kind is
				// set to Calculated. Please provide the GetComponentTypeValue()
				// method on the domain class.
				return element.GetComponentTypeValue();
			}
		
		}
		
		#endregion
		#region IsLibrary domain property code
		
		/// <summary>
		/// IsLibrary domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsLibraryDomainPropertyId = new global::System.Guid(0xc1cb9523, 0xc5ab, 0x490a, 0xb3, 0xdd, 0x87, 0xcc, 0xb1, 0xf1, 0x43, 0xbc);
		
		/// <summary>
		/// Storage for IsLibrary
		/// </summary>
		private global::System.Boolean isLibraryPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsLibrary domain property.
		/// Description for DSLFactory.Candle.SystemModel.CandleModel.Is Library
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModel/IsLibrary.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModel/IsLibrary.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c1cb9523-c5ab-490a-b3dd-87ccb1f143bc")]
		public global::System.Boolean IsLibrary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isLibraryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsLibraryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CandleModel.IsLibrary domain property.
		/// </summary>
		internal sealed partial class IsLibraryPropertyHandler : DslModeling::DomainPropertyValueHandler<CandleModel, global::System.Boolean>
		{
			private IsLibraryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CandleModel.IsLibrary domain property value handler.
			/// </summary>
			public static readonly IsLibraryPropertyHandler Instance = new IsLibraryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CandleModel.IsLibrary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsLibraryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CandleModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isLibraryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CandleModel element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isLibraryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BaseAddress domain property code
		
		/// <summary>
		/// BaseAddress domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseAddressDomainPropertyId = new global::System.Guid(0x9aad6b16, 0xeccc, 0x4919, 0x88, 0xc4, 0x49, 0xeb, 0x2a, 0x7d, 0x60, 0xf8);
		
		/// <summary>
		/// Storage for BaseAddress
		/// </summary>
		private global::System.String baseAddressPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of BaseAddress domain property.
		/// Description for DSLFactory.Candle.SystemModel.CandleModel.Base Address
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModel/BaseAddress.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModel/BaseAddress.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9aad6b16-eccc-4919-88c4-49eb2a7d60f8")]
		public global::System.String BaseAddress
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return baseAddressPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BaseAddressPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CandleModel.BaseAddress domain property.
		/// </summary>
		internal sealed partial class BaseAddressPropertyHandler : DslModeling::DomainPropertyValueHandler<CandleModel, global::System.String>
		{
			private BaseAddressPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CandleModel.BaseAddress domain property value handler.
			/// </summary>
			public static readonly BaseAddressPropertyHandler Instance = new BaseAddressPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CandleModel.BaseAddress domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BaseAddressDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CandleModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.baseAddressPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CandleModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.baseAddressPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExternalComponents opposite domain role accessor
		/// <summary>
		/// Gets a list of ExternalComponents.
		/// Description for
		/// DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.CandleModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ExternalComponent> ExternalComponents
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ExternalComponent>(this, global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.CandleModelDomainRoleId);
			}
		}
		#endregion
		#region Component opposite domain role accessor
		/// <summary>
		/// Gets or sets Component.
		/// Description for DSLFactory.Candle.SystemModel.ModelRootHasComponent.CandleModel
		/// </summary>
		public virtual Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.CandleModelDomainRoleId) as Component;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.CandleModelDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.DataLayer.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.SoftwareComponent.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: ModelRootHasComponent.Component
					if (this.Component != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.BinaryComponent.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: ModelRootHasComponent.Component
					if (this.Component != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.ExternalComponent.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Gets the ModelElement to be used as the target for the ElementGroupPrototype merge 
		/// process.  
		/// This is called by the merge process when this element is the target of the merge.  
		/// This provides this element with the opportunity to forward the target to something 
		/// other than itself.
		/// </summary>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that will be reconstituted and merged with the target element.</param>
		/// <returns>The ModelElement to use as the target for the merge process.</returns>
		protected override DslModeling::ModelElement ChooseMergeTarget(DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
		
			if (elementGroupPrototype.RootProtoElements.Count > 0)
			{
				// We choose to assume that the first rootProtoElement is representative of the set
				DslModeling::ProtoElementBase rootProtoElement = elementGroupPrototype.RootProtoElements[0];
				DslModeling::DomainClassInfo classInfo;
				classInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootProtoElement.DomainClassId);
				
				if (classInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.DataLayer.DomainClassId))
				
				{
					// Find Target by traversing path ModelRootHasComponent.Component/!Component
							// Segments 0 and 1
							global::DSLFactory.Candle.SystemModel.Component dataLayerTarget = this.Component;
							if ( dataLayerTarget == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasComponent.Component/!Component'.");
					return dataLayerTarget;
				}
			}
			return this;
		}
		
		/// <summary>
		/// Gets the ModelElement to be used as the target for the ElementGroup merge 
		/// process.  
		/// This is called by the merge process when this element is the target of the merge.  
		/// This provides this element with the opportunity to forward the target to something 
		/// other than itself.
		/// </summary>
		/// <param name="elementGroup">The ElementGroup that will be merged with the target element.</param>
		/// <returns>The ModelElement to use as the target for the merge process.</returns>
		protected override DslModeling::ModelElement ChooseMergeTarget(DslModeling::ElementGroup elementGroup)
		{
			if ( elementGroup == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
		
			if (elementGroup.RootElements.Count > 0)
			{
				// We choose to assume that the first rootProtoElement is representative of the set
				DslModeling::ModelElement rootElement = elementGroup.RootElements[0];
				DslModeling::DomainClassInfo classInfo;
				classInfo = rootElement.GetDomainClass();
				
				if (classInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.DataLayer.DomainClassId))
			
				{
					// Find Target by traversing path ModelRootHasComponent.Component/!Component
							// Segments 0 and 1
							global::DSLFactory.Candle.SystemModel.Component dataLayerTarget = this.Component;
							if ( dataLayerTarget == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasComponent.Component/!Component'.");
					return dataLayerTarget;
				}
			}
			return this;
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.DataLayer sourceDataLayer1 = sourceElement as global::DSLFactory.Candle.SystemModel.DataLayer;
			if (sourceDataLayer1 != null)
			{
				return;
			}
				
			global::DSLFactory.Candle.SystemModel.SoftwareComponent sourceSoftwareComponent2 = sourceElement as global::DSLFactory.Candle.SystemModel.SoftwareComponent;
			if (sourceSoftwareComponent2 != null)
			{
				// Create link for path ModelRootHasComponent.Component
				this.Component = sourceSoftwareComponent2;

				return;
			}
				
			global::DSLFactory.Candle.SystemModel.BinaryComponent sourceBinaryComponent3 = sourceElement as global::DSLFactory.Candle.SystemModel.BinaryComponent;
			if (sourceBinaryComponent3 != null)
			{
				// Create link for path ModelRootHasComponent.Component
				this.Component = sourceBinaryComponent3;

				return;
			}
				
			global::DSLFactory.Candle.SystemModel.ExternalComponent sourceExternalComponent4 = sourceElement as global::DSLFactory.Candle.SystemModel.ExternalComponent;
			if (sourceExternalComponent4 != null)
			{
				// Create link for path CandleModelHasExternalComponents.ExternalComponents
				this.ExternalComponents.Add(sourceExternalComponent4);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.DataLayer sourceDataLayer1 = sourceElement as global::DSLFactory.Candle.SystemModel.DataLayer;
			if (sourceDataLayer1 != null)
			{
				return;
			}
				
			global::DSLFactory.Candle.SystemModel.SoftwareComponent sourceSoftwareComponent2 = sourceElement as global::DSLFactory.Candle.SystemModel.SoftwareComponent;
			if (sourceSoftwareComponent2 != null)
			{
				// Delete link for path ModelRootHasComponent.Component
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.GetLinks((global::DSLFactory.Candle.SystemModel.CandleModel)this, sourceSoftwareComponent2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.CandleModelDomainRoleId, global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.ComponentDomainRoleId);
				}

				return;
			}
				
			global::DSLFactory.Candle.SystemModel.BinaryComponent sourceBinaryComponent3 = sourceElement as global::DSLFactory.Candle.SystemModel.BinaryComponent;
			if (sourceBinaryComponent3 != null)
			{
				// Delete link for path ModelRootHasComponent.Component
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.GetLinks((global::DSLFactory.Candle.SystemModel.CandleModel)this, sourceBinaryComponent3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.CandleModelDomainRoleId, global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.ComponentDomainRoleId);
				}

				return;
			}
				
			global::DSLFactory.Candle.SystemModel.ExternalComponent sourceExternalComponent4 = sourceElement as global::DSLFactory.Candle.SystemModel.ExternalComponent;
			if (sourceExternalComponent4 != null)
			{
				// Delete link for path CandleModelHasExternalComponents.ExternalComponents
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.GetLinks((global::DSLFactory.Candle.SystemModel.CandleModel)this, sourceExternalComponent4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.CandleModelDomainRoleId, global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.ExternalComponentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass SoftwareComponent
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.SoftwareComponent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.SoftwareComponent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d1c67784-1874-4647-a891-540171772ced")]
	public partial class SoftwareComponent : Component
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SoftwareComponent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd1c67784, 0x1874, 0x4647, 0xa8, 0x91, 0x54, 0x01, 0x71, 0x77, 0x2c, 0xed);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoftwareComponent(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SoftwareComponent(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Layers opposite domain role accessor
		/// <summary>
		/// Gets a list of Layers.
		/// Description for
		/// DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareComponent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SoftwareLayer> Layers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<SoftwareLayer>(this, global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareComponentDomainRoleId);
			}
		}
		#endregion
		#region LayerPackages opposite domain role accessor
		/// <summary>
		/// Gets a list of LayerPackages.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.Component
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<LayerPackage> LayerPackages
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<LayerPackage>(this, global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.ComponentDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.Layer.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.DataLayer.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.LayerPackage.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.Layer sourceLayer1 = sourceElement as global::DSLFactory.Candle.SystemModel.Layer;
			if (sourceLayer1 != null)
			{
				
				// Call custom method implemented in partial class
				this.MergeRelateLayer(sourceElement, elementGroup);
				return;
			}
				
			global::DSLFactory.Candle.SystemModel.DataLayer sourceDataLayer2 = sourceElement as global::DSLFactory.Candle.SystemModel.DataLayer;
			if (sourceDataLayer2 != null)
			{
				// Create link for path SoftwareComponentHasLayers.Layers
				this.Layers.Add(sourceDataLayer2);

				return;
			}
				
			global::DSLFactory.Candle.SystemModel.LayerPackage sourceLayerPackage3 = sourceElement as global::DSLFactory.Candle.SystemModel.LayerPackage;
			if (sourceLayerPackage3 != null)
			{
				
				// Call custom method implemented in partial class
				this.MergeRelateLayerPackage(sourceElement, elementGroup);
				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.Layer sourceLayer1 = sourceElement as global::DSLFactory.Candle.SystemModel.Layer;
			if (sourceLayer1 != null)
			{
				
				// Call custom method implemented in partial class
				this.MergeDisconnectLayer(sourceElement);
				return;
			}
				
			global::DSLFactory.Candle.SystemModel.DataLayer sourceDataLayer2 = sourceElement as global::DSLFactory.Candle.SystemModel.DataLayer;
			if (sourceDataLayer2 != null)
			{
				// Delete link for path SoftwareComponentHasLayers.Layers
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.GetLinks((global::DSLFactory.Candle.SystemModel.SoftwareComponent)this, sourceDataLayer2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareComponentDomainRoleId, global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareLayerDomainRoleId);
				}

				return;
			}
				
			global::DSLFactory.Candle.SystemModel.LayerPackage sourceLayerPackage3 = sourceElement as global::DSLFactory.Candle.SystemModel.LayerPackage;
			if (sourceLayerPackage3 != null)
			{
				
				// Call custom method implemented in partial class
				this.MergeDisconnectLayerPackage(sourceElement);
				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass NamedElement
	/// Description for DSLFactory.Candle.SystemModel.NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.NamedElement.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.NamedElement.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("3b443c54-50c8-4461-b73c-62d3e49c9194")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3b443c54, 0x50c8, 0x4461, 0xb7, 0x3c, 0x62, 0xd3, 0xe4, 0x9c, 0x91, 0x94);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor.
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xfbb44a41, 0x78e1, 0x4e00, 0x99, 0x1c, 0x41, 0xe7, 0x27, 0xd6, 0x49, 0xad);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Name of the element
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.NamedElement/Name.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.NamedElement/Name.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName(typeof(global::DSLFactory.Candle.SystemModel.NameProvider.SpecificNameProvider))]
		[DslModeling::DomainObjectId("fbb44a41-78e1-4e00-991c-41e727d649ad")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Comment domain property code
		
		/// <summary>
		/// Comment domain property Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainPropertyId = new global::System.Guid(0x39a9315f, 0x87bf, 0x4e32, 0xb1, 0xb0, 0xf1, 0x65, 0x0e, 0x6b, 0x30, 0x61);
		
		/// <summary>
		/// Storage for Comment
		/// </summary>
		private global::System.String commentPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Comment domain property.
		/// The comment can contents documentation's tag like 'summary' or 'remarks'
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.NamedElement/Comment.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.NamedElement/Comment.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("39a9315f-87bf-4e32-b1b0-f1650e6b3061")]
		public global::System.String Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return commentPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CommentPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Comment domain property.
		/// </summary>
		internal sealed partial class CommentPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private CommentPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Comment domain property value handler.
			/// </summary>
			public static readonly CommentPropertyHandler Instance = new CommentPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Comment domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CommentDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.commentPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.commentPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass BusinessLayer
	/// Description for DSLFactory.Candle.SystemModel.BusinessLayer
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.BusinessLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.BusinessLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("57dcc631-d010-49cd-8cb9-f4a4b3aa4816")]
	public partial class BusinessLayer : Layer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BusinessLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x57dcc631, 0xd010, 0x49cd, 0x8c, 0xb9, 0xf4, 0xa4, 0xb3, 0xaa, 0x48, 0x16);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BusinessLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BusinessLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.Process.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.Process sourceProcess1 = sourceElement as global::DSLFactory.Candle.SystemModel.Process;
			if (sourceProcess1 != null)
			{
				// Create link for path LayerHasClassImplementations.Classes
				this.Classes.Add(sourceProcess1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.Process sourceProcess1 = sourceElement as global::DSLFactory.Candle.SystemModel.Process;
			if (sourceProcess1 != null)
			{
				// Delete link for path LayerHasClassImplementations.Classes
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.GetLinks((global::DSLFactory.Candle.SystemModel.Layer)this, sourceProcess1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.LayerDomainRoleId, global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.ClassImplementationDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass DataAccessLayer
	/// Description for DSLFactory.Candle.SystemModel.DataAccessLayer
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataAccessLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataAccessLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("565eabb5-4b50-4fff-bdaf-c00c5c8f72ef")]
	public partial class DataAccessLayer : Layer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataAccessLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x565eabb5, 0x4b50, 0x4fff, 0xbd, 0xaf, 0xc0, 0x0c, 0x5c, 0x8f, 0x72, 0xef);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataAccessLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataAccessLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass PresentationLayer
	/// Description for DSLFactory.Candle.SystemModel.PresentationLayer
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.PresentationLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.PresentationLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("91e8e06c-e29e-4507-ab86-1c9c84603e37")]
	public partial class PresentationLayer : Layer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PresentationLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x91e8e06c, 0xe29e, 0x4507, 0xab, 0x86, 0x1c, 0x9c, 0x84, 0x60, 0x3e, 0x37);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PresentationLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PresentationLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass CandleElement
	/// Customizable element
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleElement.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleElement.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3b66a6e3-b4fe-48a9-9971-68588d3d1230")]
	public abstract partial class CandleElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CandleElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3b66a6e3, 0xb4fe, 0x48a9, 0x99, 0x71, 0x68, 0x58, 0x8d, 0x3d, 0x12, 0x30);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CandleElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RootName domain property code
		
		/// <summary>
		/// RootName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RootNameDomainPropertyId = new global::System.Guid(0x5862c6a4, 0xf2e6, 0x4716, 0xa1, 0x82, 0xeb, 0x62, 0xd3, 0x99, 0x83, 0x37);
		
		/// <summary>
		/// Storage for RootName
		/// </summary>
		private global::System.String rootNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RootName domain property.
		/// Root name  used to generate the element's name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleElement/RootName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleElement/RootName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5862c6a4-f2e6-4716-a182-eb62d3998337")]
		public global::System.String RootName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rootNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RootNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CandleElement.RootName domain property.
		/// </summary>
		internal sealed partial class RootNamePropertyHandler : DslModeling::DomainPropertyValueHandler<CandleElement, global::System.String>
		{
			private RootNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CandleElement.RootName domain property value handler.
			/// </summary>
			public static readonly RootNamePropertyHandler Instance = new RootNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CandleElement.RootName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RootNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CandleElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rootNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CandleElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.rootNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DependencyProperties opposite domain role accessor
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.Parent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DependencyProperty> DependencyProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<DependencyProperty>(this, global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.ParentDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.DependencyProperty.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.DependencyProperty sourceDependencyProperty1 = sourceElement as global::DSLFactory.Candle.SystemModel.DependencyProperty;
			if (sourceDependencyProperty1 != null)
			{
				// Create link for path ElementHasDependencyProperties.DependencyProperties
				this.DependencyProperties.Add(sourceDependencyProperty1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.DependencyProperty sourceDependencyProperty1 = sourceElement as global::DSLFactory.Candle.SystemModel.DependencyProperty;
			if (sourceDependencyProperty1 != null)
			{
				// Delete link for path ElementHasDependencyProperties.DependencyProperties
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.GetLinks((global::DSLFactory.Candle.SystemModel.CandleElement)this, sourceDependencyProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.ParentDomainRoleId, global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.DependencyPropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass DataLayer
	/// Description for DSLFactory.Candle.SystemModel.DataLayer
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("debce0c7-bc10-44bc-ab32-55a6cd5bca16")]
	public partial class DataLayer : SoftwareLayer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdebce0c7, 0xbc10, 0x44bc, 0xab, 0x32, 0x55, 0xa6, 0xcd, 0x5b, 0xca, 0x16);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region XmlNamespace domain property code
		
		/// <summary>
		/// XmlNamespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid XmlNamespaceDomainPropertyId = new global::System.Guid(0x2928399b, 0xfd49, 0x4c14, 0xbf, 0x9d, 0x2f, 0xee, 0xcb, 0xfc, 0x7e, 0x9a);
		
		/// <summary>
		/// Storage for XmlNamespace
		/// </summary>
		private global::System.String xmlNamespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of XmlNamespace domain property.
		/// Description for DSLFactory.Candle.SystemModel.DataLayer.Xml Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataLayer/XmlNamespace.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataLayer/XmlNamespace.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2928399b-fd49-4c14-bf9d-2feecbfc7e9a")]
		public global::System.String XmlNamespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return xmlNamespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				XmlNamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataLayer.XmlNamespace domain property.
		/// </summary>
		internal sealed partial class XmlNamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<DataLayer, global::System.String>
		{
			private XmlNamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataLayer.XmlNamespace domain property value handler.
			/// </summary>
			public static readonly XmlNamespacePropertyHandler Instance = new XmlNamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataLayer.XmlNamespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return XmlNamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DataLayer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.xmlNamespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataLayer element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.xmlNamespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Packages opposite domain role accessor
		/// <summary>
		/// Gets a list of Packages.
		/// Description for DSLFactory.Candle.SystemModel.DataLayerHasPackages.Layer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Package> Packages
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Package>(this, global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.LayerDomainRoleId);
			}
		}
		#endregion
		#region ReferencedExternalComponents opposite domain role accessor
		/// <summary>
		/// Gets a list of ReferencedExternalComponents.
		/// Description for
		/// DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.DataLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ExternalComponent> ReferencedExternalComponents
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ExternalComponent>(this, global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.DataLayerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.Package.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.Package sourcePackage1 = sourceElement as global::DSLFactory.Candle.SystemModel.Package;
			if (sourcePackage1 != null)
			{
				// Create link for path DataLayerHasPackages.Packages
				this.Packages.Add(sourcePackage1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.Package sourcePackage1 = sourceElement as global::DSLFactory.Candle.SystemModel.Package;
			if (sourcePackage1 != null)
			{
				// Delete link for path DataLayerHasPackages.Packages
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.GetLinks((global::DSLFactory.Candle.SystemModel.DataLayer)this, sourcePackage1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.LayerDomainRoleId, global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.PackageDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass TypeMember
	/// Description for DSLFactory.Candle.SystemModel.TypeMember
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.TypeMember.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.TypeMember.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("522bb61f-1b78-49f6-a70d-79822e95d6c3")]
	public abstract partial class TypeMember : CandleElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TypeMember domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x522bb61f, 0x1b78, 0x49f6, 0xa7, 0x0d, 0x79, 0x82, 0x2e, 0x95, 0xd6, 0xc3);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TypeMember(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xa0a329d4, 0x74d7, 0x4792, 0xb8, 0x43, 0xdd, 0xf5, 0xb8, 0x23, 0x25, 0x58);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = "void";
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for DSLFactory.Candle.SystemModel.TypeMember.Type
		/// </summary>
		[System.ComponentModel.Editor(typeof(DSLFactory.Candle.SystemModel.Strategies.TypePropertyEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.TypeMember/Type.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.TypeMember/Type.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("void")]
		[DslModeling::DomainObjectId("a0a329d4-74d7-4792-b843-ddf5b8232558")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TypeMember.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<TypeMember, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TypeMember.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TypeMember.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TypeMember element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TypeMember element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsCollection domain property code
		
		/// <summary>
		/// IsCollection domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsCollectionDomainPropertyId = new global::System.Guid(0x7c62cabd, 0xe1db, 0x4c3d, 0x92, 0x17, 0xc3, 0x99, 0x95, 0x61, 0x92, 0xe7);
		
		/// <summary>
		/// Storage for IsCollection
		/// </summary>
		private global::System.Boolean isCollectionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsCollection domain property.
		/// Is type a collection ?
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.TypeMember/IsCollection.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.TypeMember/IsCollection.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7c62cabd-e1db-4c3d-9217-c399956192e7")]
		public global::System.Boolean IsCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isCollectionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsCollectionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TypeMember.IsCollection domain property.
		/// </summary>
		internal sealed partial class IsCollectionPropertyHandler : DslModeling::DomainPropertyValueHandler<TypeMember, global::System.Boolean>
		{
			private IsCollectionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TypeMember.IsCollection domain property value handler.
			/// </summary>
			public static readonly IsCollectionPropertyHandler Instance = new IsCollectionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TypeMember.IsCollection domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsCollectionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(TypeMember element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isCollectionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TypeMember element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isCollectionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DisplayName domain property code
		
		/// <summary>
		/// DisplayName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayNameDomainPropertyId = new global::System.Guid(0xa440dfa7, 0x45a0, 0x4e32, 0xba, 0x89, 0xed, 0x25, 0xf8, 0xd2, 0xa4, 0x41);
		
		/// <summary>
		/// Gets or sets the value of DisplayName domain property.
		/// Description for DSLFactory.Candle.SystemModel.TypeMember.Display Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.TypeMember/DisplayName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.TypeMember/DisplayName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("a440dfa7-45a0-4e32-ba89-ed25f8d2a441")]
		public global::System.String DisplayName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DisplayNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the TypeMember.DisplayName domain property.
		/// </summary>
		internal sealed partial class DisplayNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<TypeMember, global::System.String>
		{
			private DisplayNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TypeMember.DisplayName domain property value handler.
			/// </summary>
			public static readonly DisplayNamePropertyHandler Instance = new DisplayNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TypeMember.DisplayName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TypeMember element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DisplayName because its Kind is
				// set to Calculated. Please provide the GetDisplayNameValue()
				// method on the domain class.
				return element.GetDisplayNameValue();
			}
		
		}
		
		#endregion
		#region XmlName domain property code
		
		/// <summary>
		/// XmlName domain property Id.
		/// </summary>
		public static readonly global::System.Guid XmlNameDomainPropertyId = new global::System.Guid(0xbc773236, 0xe7a6, 0x40e0, 0x9c, 0x7a, 0xd6, 0x8e, 0xd5, 0xe9, 0x0a, 0x7e);
		
		/// <summary>
		/// Storage for XmlName
		/// </summary>
		private global::System.String xmlNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of XmlName domain property.
		/// Description for DSLFactory.Candle.SystemModel.TypeMember.Xml Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.TypeMember/XmlName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("DSLFactory.Candle.SystemModel.TypeMember/XmlName.Category", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.TypeMember/XmlName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bc773236-e7a6-40e0-9c7a-d68ed5e90a7e")]
		public global::System.String XmlName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return xmlNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				XmlNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TypeMember.XmlName domain property.
		/// </summary>
		internal sealed partial class XmlNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TypeMember, global::System.String>
		{
			private XmlNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TypeMember.XmlName domain property value handler.
			/// </summary>
			public static readonly XmlNamePropertyHandler Instance = new XmlNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TypeMember.XmlName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return XmlNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TypeMember element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.xmlNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TypeMember element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.xmlNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass Argument
	/// Description for DSLFactory.Candle.SystemModel.Argument
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Argument.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Argument.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bdf885f4-eaa5-4b73-a24b-b6624a5619b4")]
	public partial class Argument : TypeMember
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Argument domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbdf885f4, 0xeaa5, 0x4b73, 0xa2, 0x4b, 0xb6, 0x62, 0x4a, 0x56, 0x19, 0xb4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Argument(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Argument(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Direction domain property code
		
		/// <summary>
		/// Direction domain property Id.
		/// </summary>
		public static readonly global::System.Guid DirectionDomainPropertyId = new global::System.Guid(0xda18d927, 0xbac3, 0x4975, 0xa2, 0x23, 0x36, 0x1f, 0x4f, 0x0a, 0x98, 0xd8);
		
		/// <summary>
		/// Storage for Direction
		/// </summary>
		private ArgumentDirection directionPropertyStorage = DSLFactory.Candle.SystemModel.ArgumentDirection.In;
		
		/// <summary>
		/// Gets or sets the value of Direction domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Argument/Direction.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Argument/Direction.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DSLFactory.Candle.SystemModel.ArgumentDirection.In)]
		[DslModeling::DomainObjectId("da18d927-bac3-4975-a223-361f4f0a98d8")]
		public ArgumentDirection Direction
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return directionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DirectionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Argument.Direction domain property.
		/// </summary>
		internal sealed partial class DirectionPropertyHandler : DslModeling::DomainPropertyValueHandler<Argument, ArgumentDirection>
		{
			private DirectionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Argument.Direction domain property value handler.
			/// </summary>
			public static readonly DirectionPropertyHandler Instance = new DirectionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Argument.Direction domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DirectionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ArgumentDirection GetValue(Argument element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.directionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Argument element, ArgumentDirection newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ArgumentDirection oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.directionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Operation opposite domain role accessor
		/// <summary>
		/// Gets or sets Operation.
		/// Description for DSLFactory.Candle.SystemModel.OperationHasArguments.Argument
		/// </summary>
		public virtual Operation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.OperationHasArguments.ArgumentDomainRoleId) as Operation;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.OperationHasArguments.ArgumentDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass Operation
	/// Description for DSLFactory.Candle.SystemModel.Operation
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Operation.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Operation.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0a14d1cc-e4f6-4de1-8ad0-7f4f8a98cb08")]
	public partial class Operation : TypeMember
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Operation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0a14d1cc, 0xe4f6, 0x4de1, 0x8a, 0xd0, 0x7f, 0x4f, 0x8a, 0x98, 0xcb, 0x08);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Operation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Operation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CustomAttributes domain property code
		
		/// <summary>
		/// CustomAttributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomAttributesDomainPropertyId = new global::System.Guid(0xc2e0dfed, 0x0485, 0x4bd5, 0x9c, 0xc1, 0xbd, 0x9f, 0xca, 0xd0, 0x23, 0x3f);
		
		/// <summary>
		/// Storage for CustomAttributes
		/// </summary>
		private global::System.String customAttributesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomAttributes domain property.
		/// Custom attributes without brackets
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Operation/CustomAttributes.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Operation/CustomAttributes.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c2e0dfed-0485-4bd5-9cc1-bd9fcad0233f")]
		public global::System.String CustomAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customAttributesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomAttributesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.CustomAttributes domain property.
		/// </summary>
		internal sealed partial class CustomAttributesPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private CustomAttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.CustomAttributes domain property value handler.
			/// </summary>
			public static readonly CustomAttributesPropertyHandler Instance = new CustomAttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.CustomAttributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomAttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customAttributesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customAttributesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Arguments opposite domain role accessor
		/// <summary>
		/// Gets a list of Arguments.
		/// Description for DSLFactory.Candle.SystemModel.OperationHasArguments.Operation
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Argument> Arguments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Argument>(this, global::DSLFactory.Candle.SystemModel.OperationHasArguments.OperationDomainRoleId);
			}
		}
		#endregion
		#region Parent opposite domain role accessor
		/// <summary>
		/// Gets or sets Parent.
		/// Description for
		/// DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.Operation
		/// </summary>
		public virtual TypeWithOperations Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.OperationDomainRoleId) as TypeWithOperations;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.OperationDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.Argument.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.Argument sourceArgument1 = sourceElement as global::DSLFactory.Candle.SystemModel.Argument;
			if (sourceArgument1 != null)
			{
				// Create link for path OperationHasArguments.Arguments
				this.Arguments.Add(sourceArgument1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.Argument sourceArgument1 = sourceElement as global::DSLFactory.Candle.SystemModel.Argument;
			if (sourceArgument1 != null)
			{
				// Delete link for path OperationHasArguments.Arguments
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.OperationHasArguments.GetLinks((global::DSLFactory.Candle.SystemModel.Operation)this, sourceArgument1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.OperationHasArguments.OperationDomainRoleId, global::DSLFactory.Candle.SystemModel.OperationHasArguments.ArgumentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass Package
	/// Description for DSLFactory.Candle.SystemModel.Package
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Package.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Package.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5b5952de-ba57-4a14-a31e-469a8197d5be")]
	public partial class Package : CandleElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Package domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b5952de, 0xba57, 0x4a14, 0xa3, 0x1e, 0x46, 0x9a, 0x81, 0x97, 0xd5, 0xbe);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Package(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Package(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Types opposite domain role accessor
		/// <summary>
		/// Gets a list of Types.
		/// Description for DSLFactory.Candle.SystemModel.PackageHasTypes.Package
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DataType> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<DataType>(this, global::DSLFactory.Candle.SystemModel.PackageHasTypes.PackageDomainRoleId);
			}
		}
		#endregion
		#region Layer opposite domain role accessor
		/// <summary>
		/// Gets or sets Layer.
		/// Description for DSLFactory.Candle.SystemModel.DataLayerHasPackages.Package
		/// </summary>
		public virtual DataLayer Layer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.PackageDomainRoleId) as DataLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.PackageDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.DataType.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.DataType sourceDataType1 = sourceElement as global::DSLFactory.Candle.SystemModel.DataType;
			if (sourceDataType1 != null)
			{
				// Create link for path PackageHasTypes.Types
				this.Types.Add(sourceDataType1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.DataType sourceDataType1 = sourceElement as global::DSLFactory.Candle.SystemModel.DataType;
			if (sourceDataType1 != null)
			{
				// Delete link for path PackageHasTypes.Types
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.PackageHasTypes.GetLinks((global::DSLFactory.Candle.SystemModel.Package)this, sourceDataType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.PackageHasTypes.PackageDomainRoleId, global::DSLFactory.Candle.SystemModel.PackageHasTypes.TypeModelDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass DataType
	/// Description for DSLFactory.Candle.SystemModel.DataType
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataType.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataType.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("35f6d4bd-f639-434e-9594-4f1e8a14d89c")]
	public abstract partial class DataType : TypeMember
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x35f6d4bd, 0xf639, 0x434e, 0x95, 0x94, 0x4f, 0x1e, 0x8a, 0x14, 0xd8, 0x9c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DataType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Package opposite domain role accessor
		/// <summary>
		/// Gets or sets Package.
		/// Description for DSLFactory.Candle.SystemModel.PackageHasTypes.TypeModel
		/// </summary>
		public virtual Package Package
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.PackageHasTypes.TypeModelDomainRoleId) as Package;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.PackageHasTypes.TypeModelDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass Property
	/// Description for DSLFactory.Candle.SystemModel.Property
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Property.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Property.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("92882263-7649-4baa-8f1d-842cf24cb01f")]
	public partial class Property : TypeMember
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Property domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x92882263, 0x7649, 0x4baa, 0x8f, 0x1d, 0x84, 0x2c, 0xf2, 0x4c, 0xb0, 0x1f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Property(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Nullable domain property code
		
		/// <summary>
		/// Nullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid NullableDomainPropertyId = new global::System.Guid(0xea5772d7, 0x9741, 0x4664, 0xb5, 0x60, 0x6e, 0x88, 0xc7, 0x46, 0x21, 0x16);
		
		/// <summary>
		/// Storage for Nullable
		/// </summary>
		private global::System.Boolean nullablePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Nullable domain property.
		/// True if this property is nullable
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Property/Nullable.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Property/Nullable.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ea5772d7-9741-4664-b560-6e88c7462116")]
		public global::System.Boolean Nullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.Nullable domain property.
		/// </summary>
		internal sealed partial class NullablePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.Boolean>
		{
			private NullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.Nullable domain property value handler.
			/// </summary>
			public static readonly NullablePropertyHandler Instance = new NullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.Nullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nullablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsPrimaryKey domain property code
		
		/// <summary>
		/// IsPrimaryKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryKeyDomainPropertyId = new global::System.Guid(0x6dcd9728, 0xb97e, 0x4df0, 0x8b, 0xeb, 0xfd, 0x53, 0x7b, 0x27, 0xd8, 0xdc);
		
		/// <summary>
		/// Storage for IsPrimaryKey
		/// </summary>
		private global::System.Boolean isPrimaryKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPrimaryKey domain property.
		/// True if this is a primary key
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Property/IsPrimaryKey.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Property/IsPrimaryKey.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6dcd9728-b97e-4df0-8beb-fd537b27d8dc")]
		public global::System.Boolean IsPrimaryKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPrimaryKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.IsPrimaryKey domain property.
		/// </summary>
		internal sealed partial class IsPrimaryKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.Boolean>
		{
			private IsPrimaryKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.IsPrimaryKey domain property value handler.
			/// </summary>
			public static readonly IsPrimaryKeyPropertyHandler Instance = new IsPrimaryKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.IsPrimaryKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPrimaryKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPrimaryKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomAttributes domain property code
		
		/// <summary>
		/// CustomAttributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomAttributesDomainPropertyId = new global::System.Guid(0x31bed629, 0x453c, 0x4ee6, 0x81, 0x12, 0x7b, 0x71, 0x47, 0x43, 0xc5, 0x97);
		
		/// <summary>
		/// Storage for CustomAttributes
		/// </summary>
		private global::System.String customAttributesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomAttributes domain property.
		/// Additional custom attributes
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Property/CustomAttributes.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Property/CustomAttributes.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("31bed629-453c-4ee6-8112-7b714743c597")]
		public global::System.String CustomAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customAttributesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomAttributesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.CustomAttributes domain property.
		/// </summary>
		internal sealed partial class CustomAttributesPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private CustomAttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.CustomAttributes domain property value handler.
			/// </summary>
			public static readonly CustomAttributesPropertyHandler Instance = new CustomAttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.CustomAttributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomAttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customAttributesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customAttributesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ColumnName domain property code
		
		/// <summary>
		/// ColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnNameDomainPropertyId = new global::System.Guid(0xfeea976f, 0xfc57, 0x461c, 0x8c, 0x67, 0x21, 0x4d, 0xfa, 0xf4, 0xd7, 0xd5);
		
		/// <summary>
		/// Storage for ColumnName
		/// </summary>
		private global::System.String columnNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ColumnName domain property.
		/// Description for DSLFactory.Candle.SystemModel.Property.Column Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Property/ColumnName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Property/ColumnName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("feea976f-fc57-461c-8c67-214dfaf4d7d5")]
		public global::System.String ColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return columnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.ColumnName domain property.
		/// </summary>
		internal sealed partial class ColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private ColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.ColumnName domain property value handler.
			/// </summary>
			public static readonly ColumnNamePropertyHandler Instance = new ColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.ColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.columnNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.columnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ServerType domain property code
		
		/// <summary>
		/// ServerType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ServerTypeDomainPropertyId = new global::System.Guid(0xb79d18ba, 0x3c36, 0x4d20, 0xbc, 0x75, 0x9b, 0x7c, 0xf1, 0xd6, 0x99, 0x5d);
		
		/// <summary>
		/// Storage for ServerType
		/// </summary>
		private global::System.String serverTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ServerType domain property.
		/// Description for DSLFactory.Candle.SystemModel.Property.Server Type
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Property/ServerType.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Property/ServerType.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b79d18ba-3c36-4d20-bc75-9b7cf1d6995d")]
		public global::System.String ServerType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return serverTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ServerTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.ServerType domain property.
		/// </summary>
		internal sealed partial class ServerTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private ServerTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.ServerType domain property value handler.
			/// </summary>
			public static readonly ServerTypePropertyHandler Instance = new ServerTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.ServerType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ServerTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.serverTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.serverTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAutoIncrement domain property code
		
		/// <summary>
		/// IsAutoIncrement domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAutoIncrementDomainPropertyId = new global::System.Guid(0xa717e595, 0x7c54, 0x42ff, 0xa5, 0x09, 0x0c, 0x91, 0x51, 0x1b, 0xec, 0x02);
		
		/// <summary>
		/// Storage for IsAutoIncrement
		/// </summary>
		private global::System.Boolean isAutoIncrementPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAutoIncrement domain property.
		/// Description for DSLFactory.Candle.SystemModel.Property.Is Auto Increment
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Property/IsAutoIncrement.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Property/IsAutoIncrement.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a717e595-7c54-42ff-a509-0c91511bec02")]
		public global::System.Boolean IsAutoIncrement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAutoIncrementPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAutoIncrementPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.IsAutoIncrement domain property.
		/// </summary>
		internal sealed partial class IsAutoIncrementPropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.Boolean>
		{
			private IsAutoIncrementPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.IsAutoIncrement domain property value handler.
			/// </summary>
			public static readonly IsAutoIncrementPropertyHandler Instance = new IsAutoIncrementPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.IsAutoIncrement domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAutoIncrementDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAutoIncrementPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAutoIncrementPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Parent opposite domain role accessor
		/// <summary>
		/// Gets or sets Parent.
		/// Description for DSLFactory.Candle.SystemModel.EntityHasProperties.Property
		/// </summary>
		public virtual Entity Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.EntityHasProperties.PropertyDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.EntityHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass ExternalComponent
	/// Description for DSLFactory.Candle.SystemModel.ExternalComponent
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalComponent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalComponent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("89fb5141-e222-428a-af8d-1f5e53ddd496")]
	public partial class ExternalComponent : CandleElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExternalComponent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89fb5141, 0xe222, 0x428a, 0xaf, 0x8d, 0x1f, 0x5e, 0x53, 0xdd, 0xd4, 0x96);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalComponent(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalComponent(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Version domain property code
		
		/// <summary>
		/// Version domain property Id.
		/// </summary>
		public static readonly global::System.Guid VersionDomainPropertyId = new global::System.Guid(0x55f434f2, 0xcc29, 0x490f, 0x83, 0x12, 0x4a, 0xdb, 0x4f, 0x11, 0x7b, 0x3e);
		
		/// <summary>
		/// Storage for Version
		/// </summary>
		private VersionInfo versionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Version domain property.
		/// Description for DSLFactory.Candle.SystemModel.ExternalComponent.Version
		/// </summary>
		[System.ComponentModel.Editor(typeof(DSLFactory.Candle.SystemModel.Editor.VersionTypeEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalComponent/Version.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalComponent/Version.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("55f434f2-cc29-490f-8312-4adb4f117b3e")]
		public VersionInfo Version
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return versionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExternalComponent.Version domain property.
		/// </summary>
		internal sealed partial class VersionPropertyHandler : DslModeling::DomainPropertyValueHandler<ExternalComponent, VersionInfo>
		{
			private VersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExternalComponent.Version domain property value handler.
			/// </summary>
			public static readonly VersionPropertyHandler Instance = new VersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExternalComponent.Version domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed VersionInfo GetValue(ExternalComponent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.versionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExternalComponent element, VersionInfo newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				VersionInfo oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.versionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelMoniker domain property code
		
		/// <summary>
		/// ModelMoniker domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelMonikerDomainPropertyId = new global::System.Guid(0x4df80905, 0xf60a, 0x489f, 0x92, 0x85, 0xce, 0x41, 0x74, 0x2d, 0x79, 0x01);
		
		/// <summary>
		/// Storage for ModelMoniker
		/// </summary>
		private global::System.Guid modelMonikerPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ModelMoniker domain property.
		/// Description for DSLFactory.Candle.SystemModel.ExternalComponent.Model Moniker
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalComponent/ModelMoniker.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalComponent/ModelMoniker.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("4df80905-f60a-489f-9285-ce41742d7901")]
		public global::System.Guid ModelMoniker
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelMonikerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelMonikerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExternalComponent.ModelMoniker domain property.
		/// </summary>
		internal sealed partial class ModelMonikerPropertyHandler : DslModeling::DomainPropertyValueHandler<ExternalComponent, global::System.Guid>
		{
			private ModelMonikerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExternalComponent.ModelMoniker domain property value handler.
			/// </summary>
			public static readonly ModelMonikerPropertyHandler Instance = new ModelMonikerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExternalComponent.ModelMoniker domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelMonikerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(ExternalComponent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.modelMonikerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExternalComponent element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelMonikerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsLastVersion domain property code
		
		/// <summary>
		/// IsLastVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsLastVersionDomainPropertyId = new global::System.Guid(0x95b52452, 0x3a04, 0x441b, 0x91, 0xf2, 0xc9, 0xf8, 0xe8, 0x1b, 0xae, 0x10);
		
		/// <summary>
		/// Gets or sets the value of IsLastVersion domain property.
		/// Used for icon
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalComponent/IsLastVersion.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalComponent/IsLastVersion.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("95b52452-3a04-441b-91f2-c9f8e81bae10")]
		public global::System.Boolean IsLastVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsLastVersionPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ExternalComponent.IsLastVersion domain property.
		/// </summary>
		internal sealed partial class IsLastVersionPropertyHandler : DslModeling::CalculatedPropertyValueHandler<ExternalComponent, global::System.Boolean>
		{
			private IsLastVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExternalComponent.IsLastVersion domain property value handler.
			/// </summary>
			public static readonly IsLastVersionPropertyHandler Instance = new IsLastVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExternalComponent.IsLastVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsLastVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ExternalComponent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsLastVersion because its Kind is
				// set to Calculated. Please provide the GetIsLastVersionValue()
				// method on the domain class.
				return element.GetIsLastVersionValue();
			}
		
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x74e1af2e, 0xf383, 0x4e5f, 0x9d, 0x41, 0x08, 0xad, 0x7b, 0x70, 0xd2, 0x61);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for DSLFactory.Candle.SystemModel.ExternalComponent.Description
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalComponent/Description.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalComponent/Description.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("74e1af2e-f383-4e5f-9d41-08ad7b70d261")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExternalComponent.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ExternalComponent, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExternalComponent.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExternalComponent.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ExternalComponent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExternalComponent element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0xabca9236, 0x3d2f, 0x4020, 0x9b, 0xa4, 0x37, 0x81, 0x22, 0xc1, 0x23, 0x51);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Description for DSLFactory.Candle.SystemModel.ExternalComponent.Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalComponent/Namespace.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalComponent/Namespace.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("abca9236-3d2f-4020-9ba4-378122c12351")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExternalComponent.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ExternalComponent, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExternalComponent.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExternalComponent.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ExternalComponent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExternalComponent element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for
		/// DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.ExternalComponent
		/// </summary>
		public virtual CandleModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.ExternalComponentDomainRoleId) as CandleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.ExternalComponentDomainRoleId, value);
			}
		}
		#endregion
		#region Ports opposite domain role accessor
		/// <summary>
		/// Gets a list of Ports.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.Parent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ExternalPublicPort> Ports
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ExternalPublicPort>(this, global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.ParentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass DependencyProperty
	/// Description for DSLFactory.Candle.SystemModel.DependencyProperty
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DependencyProperty.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DependencyProperty.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b132a2e2-b3c8-48a5-ad31-f5024130a27e")]
	public partial class DependencyProperty : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DependencyProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb132a2e2, 0xb3c8, 0x48a5, 0xad, 0x31, 0xf5, 0x02, 0x41, 0x30, 0xa2, 0x7e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DependencyProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DependencyProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region StrategyId domain property code
		
		/// <summary>
		/// StrategyId domain property Id.
		/// </summary>
		public static readonly global::System.Guid StrategyIdDomainPropertyId = new global::System.Guid(0x6e2b8b3d, 0xaf26, 0x41bc, 0xb8, 0x6d, 0x82, 0x5c, 0x4d, 0xd3, 0x1f, 0x86);
		
		/// <summary>
		/// Storage for StrategyId
		/// </summary>
		private global::System.String strategyIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of StrategyId domain property.
		/// Nom
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DependencyProperty/StrategyId.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DependencyProperty/StrategyId.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("6e2b8b3d-af26-41bc-b86d-825c4dd31f86")]
		public global::System.String StrategyId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return strategyIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StrategyIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DependencyProperty.StrategyId domain property.
		/// </summary>
		internal sealed partial class StrategyIdPropertyHandler : DslModeling::DomainPropertyValueHandler<DependencyProperty, global::System.String>
		{
			private StrategyIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DependencyProperty.StrategyId domain property value handler.
			/// </summary>
			public static readonly StrategyIdPropertyHandler Instance = new StrategyIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DependencyProperty.StrategyId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StrategyIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DependencyProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.strategyIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DependencyProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.strategyIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x567d5969, 0x4fce, 0x45d7, 0x95, 0xc1, 0x50, 0x5b, 0x80, 0x3d, 0x01, 0xed);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for DSLFactory.Candle.SystemModel.DependencyProperty.Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DependencyProperty/Name.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DependencyProperty/Name.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("567d5969-4fce-45d7-95c1-505b803d01ed")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DependencyProperty.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DependencyProperty, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DependencyProperty.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DependencyProperty.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DependencyProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DependencyProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0x4635cba5, 0x91db, 0x4513, 0x8d, 0x53, 0xa8, 0xc1, 0xa9, 0x97, 0x28, 0x7b);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::DSLFactory.Candle.SystemModel.Strategies.DependencyPropertyValue valuePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// Property value
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DependencyProperty/Value.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DependencyProperty/Value.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4635cba5-91db-4513-8d53-a8c1a997287b")]
		public global::DSLFactory.Candle.SystemModel.Strategies.DependencyPropertyValue Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DependencyProperty.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<DependencyProperty, global::DSLFactory.Candle.SystemModel.Strategies.DependencyPropertyValue>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DependencyProperty.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DependencyProperty.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::DSLFactory.Candle.SystemModel.Strategies.DependencyPropertyValue GetValue(DependencyProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.valuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DependencyProperty element, global::DSLFactory.Candle.SystemModel.Strategies.DependencyPropertyValue newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::DSLFactory.Candle.SystemModel.Strategies.DependencyPropertyValue oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass ExternalPublicPort
	/// Description for DSLFactory.Candle.SystemModel.ExternalPublicPort
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalPublicPort.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalPublicPort.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1a617e79-4024-4c06-ae58-907cf1c8b506")]
	public partial class ExternalPublicPort : CandleElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExternalPublicPort domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1a617e79, 0x4024, 0x4c06, 0xae, 0x58, 0x90, 0x7c, 0xf1, 0xc8, 0xb5, 0x06);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalPublicPort(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalPublicPort(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ComponentPortMoniker domain property code
		
		/// <summary>
		/// ComponentPortMoniker domain property Id.
		/// </summary>
		public static readonly global::System.Guid ComponentPortMonikerDomainPropertyId = new global::System.Guid(0xb059bcc7, 0x844f, 0x42bc, 0x9c, 0x66, 0xfc, 0x76, 0xe3, 0xf7, 0x88, 0x99);
		
		/// <summary>
		/// Storage for ComponentPortMoniker
		/// </summary>
		private global::System.Guid componentPortMonikerPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ComponentPortMoniker domain property.
		/// Description for DSLFactory.Candle.SystemModel.ExternalPublicPort.Component Port
		/// Moniker
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalPublicPort/ComponentPortMoniker.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalPublicPort/ComponentPortMoniker.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("b059bcc7-844f-42bc-9c66-fc76e3f78899")]
		internal global::System.Guid ComponentPortMoniker
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return componentPortMonikerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ComponentPortMonikerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExternalPublicPort.ComponentPortMoniker domain property.
		/// </summary>
		internal sealed partial class ComponentPortMonikerPropertyHandler : DslModeling::DomainPropertyValueHandler<ExternalPublicPort, global::System.Guid>
		{
			private ComponentPortMonikerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExternalPublicPort.ComponentPortMoniker domain property value handler.
			/// </summary>
			public static readonly ComponentPortMonikerPropertyHandler Instance = new ComponentPortMonikerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExternalPublicPort.ComponentPortMoniker domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ComponentPortMonikerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(ExternalPublicPort element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.componentPortMonikerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExternalPublicPort element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.componentPortMonikerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsInGac domain property code
		
		/// <summary>
		/// IsInGac domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsInGacDomainPropertyId = new global::System.Guid(0xf48c8e18, 0x68f3, 0x4f59, 0x9a, 0x48, 0x55, 0x3b, 0x7e, 0x1e, 0x31, 0xe1);
		
		/// <summary>
		/// Storage for IsInGac
		/// </summary>
		private global::System.Boolean isInGacPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsInGac domain property.
		/// Description for DSLFactory.Candle.SystemModel.ExternalPublicPort.Is In Gac
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalPublicPort/IsInGac.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalPublicPort/IsInGac.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f48c8e18-68f3-4f59-9a48-553b7e1e31e1")]
		public global::System.Boolean IsInGac
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isInGacPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsInGacPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExternalPublicPort.IsInGac domain property.
		/// </summary>
		internal sealed partial class IsInGacPropertyHandler : DslModeling::DomainPropertyValueHandler<ExternalPublicPort, global::System.Boolean>
		{
			private IsInGacPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExternalPublicPort.IsInGac domain property value handler.
			/// </summary>
			public static readonly IsInGacPropertyHandler Instance = new IsInGacPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExternalPublicPort.IsInGac domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsInGacDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ExternalPublicPort element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isInGacPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExternalPublicPort element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isInGacPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Clients opposite domain role accessor
		/// <summary>
		/// Gets a list of Clients.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ExternalServiceReference.ExternalPublicPort
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AbstractLayer> Clients
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<AbstractLayer>(this, global::DSLFactory.Candle.SystemModel.ExternalServiceReference.ExternalPublicPortDomainRoleId);
			}
		}
		#endregion
		#region Parent opposite domain role accessor
		/// <summary>
		/// Gets or sets Parent.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.Port
		/// </summary>
		public virtual ExternalComponent Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.PortDomainRoleId) as ExternalComponent;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.PortDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass Enumeration
	/// Description for DSLFactory.Candle.SystemModel.Enumeration
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Enumeration.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Enumeration.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6b2618d0-6e2b-4a8d-ba52-efe0f1d981d8")]
	public partial class Enumeration : DataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Enumeration domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6b2618d0, 0x6e2b, 0x4a8d, 0xba, 0x52, 0xef, 0xe0, 0xf1, 0xd9, 0x81, 0xd8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Enumeration(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Enumeration(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsFlag domain property code
		
		/// <summary>
		/// IsFlag domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsFlagDomainPropertyId = new global::System.Guid(0x5f57c3dc, 0x9d64, 0x4e64, 0xaf, 0xe3, 0x9a, 0xe3, 0xf4, 0xb2, 0xc4, 0x41);
		
		/// <summary>
		/// Storage for IsFlag
		/// </summary>
		private global::System.Boolean isFlagPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsFlag domain property.
		/// Description for DSLFactory.Candle.SystemModel.Enumeration.Is Flag
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Enumeration/IsFlag.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Enumeration/IsFlag.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5f57c3dc-9d64-4e64-afe3-9ae3f4b2c441")]
		public global::System.Boolean IsFlag
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isFlagPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsFlagPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Enumeration.IsFlag domain property.
		/// </summary>
		internal sealed partial class IsFlagPropertyHandler : DslModeling::DomainPropertyValueHandler<Enumeration, global::System.Boolean>
		{
			private IsFlagPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Enumeration.IsFlag domain property value handler.
			/// </summary>
			public static readonly IsFlagPropertyHandler Instance = new IsFlagPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Enumeration.IsFlag domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsFlagDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Enumeration element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isFlagPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Enumeration element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isFlagPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Values opposite domain role accessor
		/// <summary>
		/// Gets a list of Values.
		/// Description for DSLFactory.Candle.SystemModel.EnumHasValues.Parent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EnumValue> Values
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<EnumValue>(this, global::DSLFactory.Candle.SystemModel.EnumHasValues.ParentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass UIWorkflowLayer
	/// Description for DSLFactory.Candle.SystemModel.UIWorkflowLayer
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.UIWorkflowLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.UIWorkflowLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("19a05e14-7dcc-4c88-9762-9e414c61f0ae")]
	public partial class UIWorkflowLayer : Layer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UIWorkflowLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x19a05e14, 0x7dcc, 0x4c88, 0x97, 0x62, 0x9e, 0x41, 0x4c, 0x61, 0xf0, 0xae);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UIWorkflowLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UIWorkflowLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Scenarios opposite domain role accessor
		/// <summary>
		/// Gets a list of Scenarios.
		/// Description for DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.Layer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Scenario> Scenarios
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Scenario>(this, global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.LayerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.Scenario.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.Scenario sourceScenario1 = sourceElement as global::DSLFactory.Candle.SystemModel.Scenario;
			if (sourceScenario1 != null)
			{
				// Create link for path AppWorkflowLayerHasScenarios.Scenarios
				this.Scenarios.Add(sourceScenario1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.Scenario sourceScenario1 = sourceElement as global::DSLFactory.Candle.SystemModel.Scenario;
			if (sourceScenario1 != null)
			{
				// Delete link for path AppWorkflowLayerHasScenarios.Scenarios
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.GetLinks((global::DSLFactory.Candle.SystemModel.UIWorkflowLayer)this, sourceScenario1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.LayerDomainRoleId, global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.ScenarioDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass Scenario
	/// Description for DSLFactory.Candle.SystemModel.Scenario
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Scenario.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Scenario.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("94c88e9d-3563-49b0-84fe-572ef8f9280e")]
	public partial class Scenario : TypeWithOperations
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Scenario domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x94c88e9d, 0x3563, 0x49b0, 0x84, 0xfe, 0x57, 0x2e, 0xf8, 0xf9, 0x28, 0x0e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Scenario(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Scenario(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Views opposite domain role accessor
		/// <summary>
		/// Gets a list of Views.
		/// Description for DSLFactory.Candle.SystemModel.ScenarioHasUIView.Scenario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<UIView> Views
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<UIView>(this, global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.ScenarioDomainRoleId);
			}
		}
		#endregion
		#region Layer opposite domain role accessor
		/// <summary>
		/// Gets or sets Layer.
		/// Description for
		/// DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.Scenario
		/// </summary>
		public virtual UIWorkflowLayer Layer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.ScenarioDomainRoleId) as UIWorkflowLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.ScenarioDomainRoleId, value);
			}
		}
		#endregion
		#region Contracts opposite domain role accessor
		/// <summary>
		/// Gets a list of Contracts.
		/// Description for DSLFactory.Candle.SystemModel.ScenarioUsesContracts.Scenario
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ServiceContract> Contracts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ServiceContract>(this, global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts.ScenarioDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.UIView.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.UIView sourceUIView1 = sourceElement as global::DSLFactory.Candle.SystemModel.UIView;
			if (sourceUIView1 != null)
			{
				// Create link for path ScenarioHasUIView.Views
				this.Views.Add(sourceUIView1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.UIView sourceUIView1 = sourceElement as global::DSLFactory.Candle.SystemModel.UIView;
			if (sourceUIView1 != null)
			{
				// Delete link for path ScenarioHasUIView.Views
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.GetLinks((global::DSLFactory.Candle.SystemModel.Scenario)this, sourceUIView1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.ScenarioDomainRoleId, global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.ViewDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass UIView
	/// Description for DSLFactory.Candle.SystemModel.UIView
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.UIView.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.UIView.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("736c084d-6f53-4bb2-b8b4-361e786106dc")]
	public partial class UIView : CandleElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UIView domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x736c084d, 0x6f53, 0x4bb2, 0xb8, 0xb4, 0x36, 0x1e, 0x78, 0x61, 0x06, 0xdc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UIView(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UIView(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xd8f9d919, 0xd472, 0x4cec, 0x88, 0x16, 0x8f, 0xf8, 0x2c, 0xcd, 0x08, 0x97);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for DSLFactory.Candle.SystemModel.UIView.Description
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.UIView/Description.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.UIView/Description.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d8f9d919-d472-4cec-8816-8ff82ccd0897")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UIView.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<UIView, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the UIView.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the UIView.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(UIView element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UIView element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Scenario opposite domain role accessor
		/// <summary>
		/// Gets or sets Scenario.
		/// Description for DSLFactory.Candle.SystemModel.ScenarioHasUIView.View
		/// </summary>
		public virtual Scenario Scenario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.ViewDomainRoleId) as Scenario;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.ViewDomainRoleId, value);
			}
		}
		#endregion
		#region ViewTargets opposite domain role accessor
		/// <summary>
		/// Gets a list of ViewTargets.
		/// Description for DSLFactory.Candle.SystemModel.Action.ViewSource
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<UIView> ViewTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<UIView>(this, global::DSLFactory.Candle.SystemModel.Action.ViewSourceDomainRoleId);
			}
		}
		#endregion
		#region ViewSources opposite domain role accessor
		/// <summary>
		/// Gets a list of ViewSources.
		/// Description for DSLFactory.Candle.SystemModel.Action.ViewTarget
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<UIView> ViewSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<UIView>(this, global::DSLFactory.Candle.SystemModel.Action.ViewTargetDomainRoleId);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass DotNetAssembly
	/// Description for DSLFactory.Candle.SystemModel.DotNetAssembly
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DotNetAssembly.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DotNetAssembly.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4095c222-0aa7-44d7-abc1-5907b7b23806")]
	public partial class DotNetAssembly : AbstractLayer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DotNetAssembly domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4095c222, 0x0aa7, 0x44d7, 0xab, 0xc1, 0x59, 0x07, 0xb7, 0xb2, 0x38, 0x06);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DotNetAssembly(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DotNetAssembly(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FullName domain property code
		
		/// <summary>
		/// FullName domain property Id.
		/// </summary>
		public static readonly global::System.Guid FullNameDomainPropertyId = new global::System.Guid(0xfc98b496, 0xeb0c, 0x41a2, 0x83, 0x10, 0xc2, 0x9f, 0x99, 0xc5, 0x17, 0xb4);
		
		/// <summary>
		/// Storage for FullName
		/// </summary>
		private global::System.String fullNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of FullName domain property.
		/// Description for DSLFactory.Candle.SystemModel.DotNetAssembly.Full Name
		/// </summary>
		[System.ComponentModel.Editor(typeof(DSLFactory.Candle.SystemModel.Editor.AssemblyReferenceEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DotNetAssembly/FullName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DotNetAssembly/FullName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("fc98b496-eb0c-41a2-8310-c29f99c517b4")]
		public global::System.String FullName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fullNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FullNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DotNetAssembly.FullName domain property.
		/// </summary>
		internal sealed partial class FullNamePropertyHandler : DslModeling::DomainPropertyValueHandler<DotNetAssembly, global::System.String>
		{
			private FullNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DotNetAssembly.FullName domain property value handler.
			/// </summary>
			public static readonly FullNamePropertyHandler Instance = new FullNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DotNetAssembly.FullName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FullNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DotNetAssembly element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fullNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DotNetAssembly element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fullNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsInGac domain property code
		
		/// <summary>
		/// IsInGac domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsInGacDomainPropertyId = new global::System.Guid(0xcba8216c, 0x2981, 0x414f, 0xa2, 0xd8, 0x6d, 0xbd, 0x97, 0x9c, 0x6e, 0x5b);
		
		/// <summary>
		/// Storage for IsInGac
		/// </summary>
		private global::System.Boolean isInGacPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsInGac domain property.
		/// Description for DSLFactory.Candle.SystemModel.DotNetAssembly.Is In Gac
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DotNetAssembly/IsInGac.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DotNetAssembly/IsInGac.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cba8216c-2981-414f-a2d8-6dbd979c6e5b")]
		public global::System.Boolean IsInGac
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isInGacPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsInGacPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DotNetAssembly.IsInGac domain property.
		/// </summary>
		internal sealed partial class IsInGacPropertyHandler : DslModeling::DomainPropertyValueHandler<DotNetAssembly, global::System.Boolean>
		{
			private IsInGacPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DotNetAssembly.IsInGac domain property value handler.
			/// </summary>
			public static readonly IsInGacPropertyHandler Instance = new IsInGacPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DotNetAssembly.IsInGac domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsInGacDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(DotNetAssembly element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isInGacPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DotNetAssembly element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isInGacPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Version domain property code
		
		/// <summary>
		/// Version domain property Id.
		/// </summary>
		public static readonly global::System.Guid VersionDomainPropertyId = new global::System.Guid(0xb4753e0d, 0xddee, 0x430b, 0xb3, 0x1a, 0x68, 0x7c, 0x8a, 0xf7, 0x1f, 0x63);
		
		/// <summary>
		/// Storage for Version
		/// </summary>
		private VersionInfo versionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Version domain property.
		/// Description for DSLFactory.Candle.SystemModel.DotNetAssembly.Version
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DotNetAssembly/Version.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DotNetAssembly/Version.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b4753e0d-ddee-430b-b31a-687c8af71f63")]
		public VersionInfo Version
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return versionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DotNetAssembly.Version domain property.
		/// </summary>
		internal sealed partial class VersionPropertyHandler : DslModeling::DomainPropertyValueHandler<DotNetAssembly, VersionInfo>
		{
			private VersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DotNetAssembly.Version domain property value handler.
			/// </summary>
			public static readonly VersionPropertyHandler Instance = new VersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DotNetAssembly.Version domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed VersionInfo GetValue(DotNetAssembly element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.versionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DotNetAssembly element, VersionInfo newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				VersionInfo oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.versionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InitialLocation domain property code
		
		/// <summary>
		/// InitialLocation domain property Id.
		/// </summary>
		public static readonly global::System.Guid InitialLocationDomainPropertyId = new global::System.Guid(0xb98b00cb, 0xeb4b, 0x4622, 0x94, 0x7a, 0xfd, 0x46, 0xfe, 0x59, 0x2a, 0x5b);
		
		/// <summary>
		/// Storage for InitialLocation
		/// </summary>
		private global::System.String initialLocationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InitialLocation domain property.
		/// Description for DSLFactory.Candle.SystemModel.DotNetAssembly.Initial Location
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DotNetAssembly/InitialLocation.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DotNetAssembly/InitialLocation.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b98b00cb-eb4b-4622-947a-fd46fe592a5b")]
		public global::System.String InitialLocation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return initialLocationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InitialLocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DotNetAssembly.InitialLocation domain property.
		/// </summary>
		internal sealed partial class InitialLocationPropertyHandler : DslModeling::DomainPropertyValueHandler<DotNetAssembly, global::System.String>
		{
			private InitialLocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DotNetAssembly.InitialLocation domain property value handler.
			/// </summary>
			public static readonly InitialLocationPropertyHandler Instance = new InitialLocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DotNetAssembly.InitialLocation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InitialLocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DotNetAssembly element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.initialLocationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DotNetAssembly element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.initialLocationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Visibility domain property code
		
		/// <summary>
		/// Visibility domain property Id.
		/// </summary>
		public static readonly global::System.Guid VisibilityDomainPropertyId = new global::System.Guid(0x37c670d6, 0x3e04, 0x4ba0, 0x84, 0xf6, 0xf6, 0x8d, 0x48, 0x44, 0xf5, 0xcb);
		
		/// <summary>
		/// Storage for Visibility
		/// </summary>
		private Visibility visibilityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Visibility domain property.
		/// Description for DSLFactory.Candle.SystemModel.DotNetAssembly.Visibility
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DotNetAssembly/Visibility.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DotNetAssembly/Visibility.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("37c670d6-3e04-4ba0-84f6-f68d4844f5cb")]
		public Visibility Visibility
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return visibilityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VisibilityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DotNetAssembly.Visibility domain property.
		/// </summary>
		internal sealed partial class VisibilityPropertyHandler : DslModeling::DomainPropertyValueHandler<DotNetAssembly, Visibility>
		{
			private VisibilityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DotNetAssembly.Visibility domain property value handler.
			/// </summary>
			public static readonly VisibilityPropertyHandler Instance = new VisibilityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DotNetAssembly.Visibility domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VisibilityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Visibility GetValue(DotNetAssembly element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.visibilityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DotNetAssembly element, Visibility newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Visibility oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.visibilityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InternalAssemblyReferences opposite domain role accessor
		/// <summary>
		/// Gets a list of InternalAssemblyReferences.
		/// Description for
		/// DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies.TargetAssembly
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DotNetAssembly> InternalAssemblyReferences
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<DotNetAssembly>(this, global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies.TargetAssemblyDomainRoleId);
			}
		}
		#endregion
		#region Component opposite domain role accessor
		/// <summary>
		/// Gets or sets Component.
		/// Description for
		/// DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.DotNetAssembly
		/// </summary>
		public virtual BinaryComponent Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.DotNetAssemblyDomainRoleId) as BinaryComponent;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.DotNetAssemblyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass AbstractLayer
	/// Description for DSLFactory.Candle.SystemModel.AbstractLayer
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AbstractLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AbstractLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d7dd6d0e-968a-4e48-b91c-6a09aba63799")]
	public abstract partial class AbstractLayer : CandleElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AbstractLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd7dd6d0e, 0x968a, 0x4e48, 0xb9, 0x1c, 0x6a, 0x09, 0xab, 0xa6, 0x37, 0x99);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected AbstractLayer(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AssemblyName domain property code
		
		/// <summary>
		/// AssemblyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid AssemblyNameDomainPropertyId = new global::System.Guid(0x6afa3f80, 0xedc9, 0x479b, 0xa6, 0x46, 0x88, 0x5f, 0x04, 0x31, 0x78, 0x75);
		
		/// <summary>
		/// Storage for AssemblyName
		/// </summary>
		private global::System.String assemblyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of AssemblyName domain property.
		/// Nom de l'assembly gÃ©nÃ©rÃ©
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AbstractLayer/AssemblyName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AbstractLayer/AssemblyName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6afa3f80-edc9-479b-a646-885f04317875")]
		public global::System.String AssemblyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return assemblyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AssemblyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AbstractLayer.AssemblyName domain property.
		/// </summary>
		internal sealed partial class AssemblyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<AbstractLayer, global::System.String>
		{
			private AssemblyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AbstractLayer.AssemblyName domain property value handler.
			/// </summary>
			public static readonly AssemblyNamePropertyHandler Instance = new AssemblyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AbstractLayer.AssemblyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AssemblyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AbstractLayer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.assemblyNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AbstractLayer element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.assemblyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExternalServiceReferences opposite domain role accessor
		/// <summary>
		/// Gets a list of ExternalServiceReferences.
		/// Description for DSLFactory.Candle.SystemModel.ExternalServiceReference.Client
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ExternalPublicPort> ExternalServiceReferences
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ExternalPublicPort>(this, global::DSLFactory.Candle.SystemModel.ExternalServiceReference.ClientDomainRoleId);
			}
		}
		#endregion
		#region Artifacts opposite domain role accessor
		/// <summary>
		/// Gets a list of Artifacts.
		/// Description for DSLFactory.Candle.SystemModel.LayerHasArtifacts.AbstractLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Artifact> Artifacts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Artifact>(this, global::DSLFactory.Candle.SystemModel.LayerHasArtifacts.AbstractLayerDomainRoleId);
			}
		}
		#endregion
		#region Configurations opposite domain role accessor
		/// <summary>
		/// Gets a list of Configurations.
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.AbstractLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConfigurationPart> Configurations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ConfigurationPart>(this, global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.AbstractLayerDomainRoleId);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass Entity
	/// Description for DSLFactory.Candle.SystemModel.Entity
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Entity.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Entity.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0b77322d-0e58-472c-8d4f-8d1f3ea452be")]
	public partial class Entity : DataType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Entity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0b77322d, 0x0e58, 0x472c, 0x8d, 0x4f, 0x8d, 0x1f, 0x3e, 0xa4, 0x52, 0xbe);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region BaseType domain property code
		
		/// <summary>
		/// BaseType domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseTypeDomainPropertyId = new global::System.Guid(0x23c651b6, 0x373c, 0x4582, 0xa7, 0x47, 0xbc, 0x8d, 0x71, 0x60, 0x30, 0xdd);
		
		/// <summary>
		/// Storage for BaseType
		/// </summary>
		private global::System.String baseTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of BaseType domain property.
		/// Description for DSLFactory.Candle.SystemModel.Entity.Base Type
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Entity/BaseType.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Entity/BaseType.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("23c651b6-373c-4582-a747-bc8d716030dd")]
		public global::System.String BaseType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return baseTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BaseTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.BaseType domain property.
		/// </summary>
		internal sealed partial class BaseTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private BaseTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.BaseType domain property value handler.
			/// </summary>
			public static readonly BaseTypePropertyHandler Instance = new BaseTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.BaseType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BaseTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.baseTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.baseTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAbstract domain property code
		
		/// <summary>
		/// IsAbstract domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAbstractDomainPropertyId = new global::System.Guid(0x8b77d24b, 0x562f, 0x48df, 0x9f, 0xe1, 0xdc, 0xf1, 0xad, 0x3b, 0xc5, 0x1b);
		
		/// <summary>
		/// Storage for IsAbstract
		/// </summary>
		private global::System.Boolean isAbstractPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAbstract domain property.
		/// Description for DSLFactory.Candle.SystemModel.Entity.Is Abstract
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Entity/IsAbstract.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Entity/IsAbstract.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8b77d24b-562f-48df-9fe1-dcf1ad3bc51b")]
		public global::System.Boolean IsAbstract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAbstractPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAbstractPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.IsAbstract domain property.
		/// </summary>
		internal sealed partial class IsAbstractPropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.Boolean>
		{
			private IsAbstractPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.IsAbstract domain property value handler.
			/// </summary>
			public static readonly IsAbstractPropertyHandler Instance = new IsAbstractPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.IsAbstract domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAbstractDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAbstractPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAbstractPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomAttributes domain property code
		
		/// <summary>
		/// CustomAttributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomAttributesDomainPropertyId = new global::System.Guid(0x6037528c, 0xc222, 0x4b7c, 0x93, 0xac, 0xf7, 0xf4, 0x2e, 0xae, 0xe7, 0xd0);
		
		/// <summary>
		/// Storage for CustomAttributes
		/// </summary>
		private global::System.String customAttributesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomAttributes domain property.
		/// Additional custom attributes
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Entity/CustomAttributes.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Entity/CustomAttributes.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6037528c-c222-4b7c-93ac-f7f42eaee7d0")]
		public global::System.String CustomAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customAttributesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomAttributesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.CustomAttributes domain property.
		/// </summary>
		internal sealed partial class CustomAttributesPropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private CustomAttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.CustomAttributes domain property value handler.
			/// </summary>
			public static readonly CustomAttributesPropertyHandler Instance = new CustomAttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.CustomAttributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomAttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customAttributesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customAttributesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TableName domain property code
		
		/// <summary>
		/// TableName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TableNameDomainPropertyId = new global::System.Guid(0x0fc628d3, 0x8ee8, 0x4960, 0xab, 0x52, 0xd8, 0xec, 0x24, 0x26, 0x68, 0x00);
		
		/// <summary>
		/// Storage for TableName
		/// </summary>
		private global::System.String tableNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TableName domain property.
		/// Description for DSLFactory.Candle.SystemModel.Entity.Table Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Entity/TableName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Entity/TableName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0fc628d3-8ee8-4960-ab52-d8ec24266800")]
		public global::System.String TableName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tableNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TableNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.TableName domain property.
		/// </summary>
		internal sealed partial class TableNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private TableNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.TableName domain property value handler.
			/// </summary>
			public static readonly TableNamePropertyHandler Instance = new TableNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.TableName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TableNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tableNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tableNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TableOwner domain property code
		
		/// <summary>
		/// TableOwner domain property Id.
		/// </summary>
		public static readonly global::System.Guid TableOwnerDomainPropertyId = new global::System.Guid(0xf68c094e, 0x8beb, 0x4666, 0xa6, 0x7c, 0xa5, 0x9d, 0x7c, 0xdc, 0xec, 0xce);
		
		/// <summary>
		/// Storage for TableOwner
		/// </summary>
		private global::System.String tableOwnerPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TableOwner domain property.
		/// Description for DSLFactory.Candle.SystemModel.Entity.Table Owner
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Entity/TableOwner.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Entity/TableOwner.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f68c094e-8beb-4666-a67c-a59d7cdcecce")]
		public global::System.String TableOwner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tableOwnerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TableOwnerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.TableOwner domain property.
		/// </summary>
		internal sealed partial class TableOwnerPropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::System.String>
		{
			private TableOwnerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.TableOwner domain property value handler.
			/// </summary>
			public static readonly TableOwnerPropertyHandler Instance = new TableOwnerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.TableOwner domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TableOwnerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tableOwnerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tableOwnerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabaseType domain property code
		
		/// <summary>
		/// DatabaseType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseTypeDomainPropertyId = new global::System.Guid(0x8eccc3d6, 0x732a, 0x4c26, 0xb6, 0xde, 0xed, 0x19, 0x8f, 0x60, 0x4f, 0xc3);
		
		/// <summary>
		/// Storage for DatabaseType
		/// </summary>
		private DatabaseType databaseTypePropertyStorage = DSLFactory.Candle.SystemModel.DatabaseType.Table;
		
		/// <summary>
		/// Gets or sets the value of DatabaseType domain property.
		/// Description for DSLFactory.Candle.SystemModel.Entity.Database Type
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Entity/DatabaseType.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Entity/DatabaseType.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DSLFactory.Candle.SystemModel.DatabaseType.Table)]
		[DslModeling::DomainObjectId("8eccc3d6-732a-4c26-b6de-ed198f604fc3")]
		public DatabaseType DatabaseType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databaseTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.DatabaseType domain property.
		/// </summary>
		internal sealed partial class DatabaseTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, DatabaseType>
		{
			private DatabaseTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.DatabaseType domain property value handler.
			/// </summary>
			public static readonly DatabaseTypePropertyHandler Instance = new DatabaseTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.DatabaseType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DatabaseType GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.databaseTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, DatabaseType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DatabaseType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databaseTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Targets opposite domain role accessor
		/// <summary>
		/// Gets a list of Targets.
		/// Description for DSLFactory.Candle.SystemModel.Association.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Entity>(this, global::DSLFactory.Candle.SystemModel.Association.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		/// <summary>
		/// Gets a list of Sources.
		/// Description for DSLFactory.Candle.SystemModel.Association.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Entity>(this, global::DSLFactory.Candle.SystemModel.Association.TargetDomainRoleId);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		/// <summary>
		/// Gets a list of Properties.
		/// Description for DSLFactory.Candle.SystemModel.EntityHasProperties.Parent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Property>(this, global::DSLFactory.Candle.SystemModel.EntityHasProperties.ParentDomainRoleId);
			}
		}
		#endregion
		#region SuperClasses opposite domain role accessor
		/// <summary>
		/// Gets a list of SuperClasses.
		/// Description for DSLFactory.Candle.SystemModel.EntityHasSubClasses.SubClass
		/// </summary>
		internal virtual DslModeling::LinkedElementCollection<Entity> SuperClasses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Entity>(this, global::DSLFactory.Candle.SystemModel.EntityHasSubClasses.SubClassDomainRoleId);
			}
		}
		#endregion
		#region SubClasses opposite domain role accessor
		/// <summary>
		/// Gets a list of SubClasses.
		/// Description for DSLFactory.Candle.SystemModel.Generalization.SuperClass
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> SubClasses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Entity>(this, global::DSLFactory.Candle.SystemModel.Generalization.SuperClassDomainRoleId);
			}
		}
		#endregion
		#region SuperClass opposite domain role accessor
		/// <summary>
		/// Gets or sets SuperClass.
		/// Description for DSLFactory.Candle.SystemModel.Generalization.SubClass
		/// </summary>
		public virtual Entity SuperClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.Generalization.SubClassDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.Generalization.SubClassDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.Property.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.Property sourceProperty1 = sourceElement as global::DSLFactory.Candle.SystemModel.Property;
			if (sourceProperty1 != null)
			{
				// Create link for path EntityHasProperties.Properties
				this.Properties.Add(sourceProperty1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.Property sourceProperty1 = sourceElement as global::DSLFactory.Candle.SystemModel.Property;
			if (sourceProperty1 != null)
			{
				// Delete link for path EntityHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.EntityHasProperties.GetLinks((global::DSLFactory.Candle.SystemModel.Entity)this, sourceProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.EntityHasProperties.ParentDomainRoleId, global::DSLFactory.Candle.SystemModel.EntityHasProperties.PropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass EnumValue
	/// Description for DSLFactory.Candle.SystemModel.EnumValue
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EnumValue.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EnumValue.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d6fc8577-845b-4904-92a6-bde2e971e8c3")]
	public partial class EnumValue : TypeMember
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnumValue domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd6fc8577, 0x845b, 0x4904, 0x92, 0xa6, 0xbd, 0xe2, 0xe9, 0x71, 0xe8, 0xc3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnumValue(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnumValue(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0x65970471, 0x93cb, 0x4459, 0x81, 0x1d, 0xaa, 0x0f, 0xb9, 0xfb, 0xbb, 0x98);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.Int32 valuePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// Description for DSLFactory.Candle.SystemModel.EnumValue.Value
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EnumValue/Value.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EnumValue/Value.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("65970471-93cb-4459-811d-aa0fb9fbbb98")]
		public global::System.Int32 Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumValue.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<EnumValue, global::System.Int32>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumValue.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumValue.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(EnumValue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.valuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumValue element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region HasValue domain property code
		
		/// <summary>
		/// HasValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid HasValueDomainPropertyId = new global::System.Guid(0x187918d5, 0x6e6a, 0x460a, 0x86, 0x9b, 0x07, 0xff, 0x4d, 0x04, 0xbb, 0x85);
		
		/// <summary>
		/// Storage for HasValue
		/// </summary>
		private global::System.Boolean hasValuePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of HasValue domain property.
		/// Description for DSLFactory.Candle.SystemModel.EnumValue.Has Value
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EnumValue/HasValue.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EnumValue/HasValue.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("187918d5-6e6a-460a-869b-07ff4d04bb85")]
		public global::System.Boolean HasValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hasValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HasValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumValue.HasValue domain property.
		/// </summary>
		internal sealed partial class HasValuePropertyHandler : DslModeling::DomainPropertyValueHandler<EnumValue, global::System.Boolean>
		{
			private HasValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumValue.HasValue domain property value handler.
			/// </summary>
			public static readonly HasValuePropertyHandler Instance = new HasValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumValue.HasValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HasValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EnumValue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hasValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumValue element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hasValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Parent opposite domain role accessor
		/// <summary>
		/// Gets or sets Parent.
		/// Description for DSLFactory.Candle.SystemModel.EnumHasValues.Value
		/// </summary>
		public virtual Enumeration Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.EnumHasValues.ValueDomainRoleId) as Enumeration;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.EnumHasValues.ValueDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass Artifact
	/// Description for DSLFactory.Candle.SystemModel.Artifact
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Artifact.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Artifact.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5e9091a3-4b61-4e54-979f-f625d92f9fa5")]
	public partial class Artifact : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Artifact domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5e9091a3, 0x4b61, 0x4e54, 0x97, 0x9f, 0xf6, 0x25, 0xd9, 0x2f, 0x9f, 0xa5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Artifact(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Artifact(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FileName domain property code
		
		/// <summary>
		/// FileName domain property Id.
		/// </summary>
		public static readonly global::System.Guid FileNameDomainPropertyId = new global::System.Guid(0x182a72ba, 0x64d0, 0x4ffd, 0x80, 0x44, 0xb6, 0x95, 0xa8, 0x41, 0xbc, 0x66);
		
		/// <summary>
		/// Storage for FileName
		/// </summary>
		private global::System.String fileNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of FileName domain property.
		/// Description for DSLFactory.Candle.SystemModel.Artifact.File Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Artifact/FileName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Artifact/FileName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("182a72ba-64d0-4ffd-8044-b695a841bc66")]
		public global::System.String FileName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fileNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FileNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Artifact.FileName domain property.
		/// </summary>
		internal sealed partial class FileNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Artifact, global::System.String>
		{
			private FileNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Artifact.FileName domain property value handler.
			/// </summary>
			public static readonly FileNamePropertyHandler Instance = new FileNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Artifact.FileName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FileNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Artifact element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fileNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Artifact element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fileNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xcd6df25e, 0xa38b, 0x49b3, 0x92, 0xb6, 0x07, 0x75, 0x99, 0xf2, 0x7c, 0xa8);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private ArtifactType typePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for DSLFactory.Candle.SystemModel.Artifact.Type
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Artifact/Type.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Artifact/Type.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cd6df25e-a38b-49b3-92b6-077599f27ca8")]
		public ArtifactType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Artifact.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<Artifact, ArtifactType>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Artifact.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Artifact.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ArtifactType GetValue(Artifact element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Artifact element, ArtifactType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ArtifactType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InitialFileName domain property code
		
		/// <summary>
		/// InitialFileName domain property Id.
		/// </summary>
		public static readonly global::System.Guid InitialFileNameDomainPropertyId = new global::System.Guid(0x2731659b, 0xa5d9, 0x479a, 0x8d, 0xb0, 0x6e, 0x91, 0xc0, 0xf6, 0x48, 0x75);
		
		/// <summary>
		/// Storage for InitialFileName
		/// </summary>
		private global::System.String initialFileNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InitialFileName domain property.
		/// Description for DSLFactory.Candle.SystemModel.Artifact.Initial File Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Artifact/InitialFileName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Artifact/InitialFileName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("2731659b-a5d9-479a-8db0-6e91c0f64875")]
		public global::System.String InitialFileName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return initialFileNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InitialFileNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Artifact.InitialFileName domain property.
		/// </summary>
		internal sealed partial class InitialFileNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Artifact, global::System.String>
		{
			private InitialFileNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Artifact.InitialFileName domain property value handler.
			/// </summary>
			public static readonly InitialFileNamePropertyHandler Instance = new InitialFileNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Artifact.InitialFileName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InitialFileNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Artifact element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.initialFileNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Artifact element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.initialFileNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Scope domain property code
		
		/// <summary>
		/// Scope domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScopeDomainPropertyId = new global::System.Guid(0x8c49f307, 0xb5b4, 0x4d99, 0x86, 0x89, 0xde, 0xa0, 0x35, 0xad, 0x22, 0xae);
		
		/// <summary>
		/// Storage for Scope
		/// </summary>
		private ReferenceScope scopePropertyStorage = DslModeling::SerializationUtilities.GetValue<ReferenceScope>("Runtime");
		
		/// <summary>
		/// Gets or sets the value of Scope domain property.
		/// Description for DSLFactory.Candle.SystemModel.Artifact.Scope
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Artifact/Scope.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Artifact/Scope.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(typeof(global::DSLFactory.Candle.SystemModel.ReferenceScope), "Runtime")]
		[DslModeling::DomainObjectId("8c49f307-b5b4-4d99-8689-dea035ad22ae")]
		public ReferenceScope Scope
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scopePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScopePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Artifact.Scope domain property.
		/// </summary>
		internal sealed partial class ScopePropertyHandler : DslModeling::DomainPropertyValueHandler<Artifact, ReferenceScope>
		{
			private ScopePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Artifact.Scope domain property value handler.
			/// </summary>
			public static readonly ScopePropertyHandler Instance = new ScopePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Artifact.Scope domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScopeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceScope GetValue(Artifact element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scopePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Artifact element, ReferenceScope newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReferenceScope oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scopePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConfigurationMode domain property code
		
		/// <summary>
		/// ConfigurationMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationModeDomainPropertyId = new global::System.Guid(0x60d5b797, 0xe141, 0x4896, 0x9a, 0x5f, 0x66, 0x31, 0xdc, 0x9d, 0x2a, 0x41);
		
		/// <summary>
		/// Storage for ConfigurationMode
		/// </summary>
		private global::System.String configurationModePropertyStorage = "*";
		
		/// <summary>
		/// Gets or sets the value of ConfigurationMode domain property.
		/// Description for DSLFactory.Candle.SystemModel.Artifact.Configuration Mode
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Artifact/ConfigurationMode.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Artifact/ConfigurationMode.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*")]
		[DslModeling::DomainObjectId("60d5b797-e141-4896-9a5f-6631dc9d2a41")]
		public global::System.String ConfigurationMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return configurationModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConfigurationModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Artifact.ConfigurationMode domain property.
		/// </summary>
		internal sealed partial class ConfigurationModePropertyHandler : DslModeling::DomainPropertyValueHandler<Artifact, global::System.String>
		{
			private ConfigurationModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Artifact.ConfigurationMode domain property value handler.
			/// </summary>
			public static readonly ConfigurationModePropertyHandler Instance = new ConfigurationModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Artifact.ConfigurationMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConfigurationModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Artifact element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.configurationModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Artifact element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.configurationModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass BinaryComponent
	/// Description for DSLFactory.Candle.SystemModel.BinaryComponent
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.BinaryComponent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.BinaryComponent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c3cff247-3982-4cc3-843b-dce42bb76c6f")]
	public partial class BinaryComponent : Component
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BinaryComponent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc3cff247, 0x3982, 0x4cc3, 0x84, 0x3b, 0xdc, 0xe4, 0x2b, 0xb7, 0x6c, 0x6f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BinaryComponent(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BinaryComponent(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Assemblies opposite domain role accessor
		/// <summary>
		/// Gets a list of Assemblies.
		/// Description for
		/// DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.BinaryComponent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DotNetAssembly> Assemblies
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<DotNetAssembly>(this, global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.BinaryComponentDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.DotNetAssembly.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.DotNetAssembly sourceDotNetAssembly1 = sourceElement as global::DSLFactory.Candle.SystemModel.DotNetAssembly;
			if (sourceDotNetAssembly1 != null)
			{
				// Create link for path BinaryComponentHasAssemblies.Assemblies
				this.Assemblies.Add(sourceDotNetAssembly1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.DotNetAssembly sourceDotNetAssembly1 = sourceElement as global::DSLFactory.Candle.SystemModel.DotNetAssembly;
			if (sourceDotNetAssembly1 != null)
			{
				// Delete link for path BinaryComponentHasAssemblies.Assemblies
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.GetLinks((global::DSLFactory.Candle.SystemModel.BinaryComponent)this, sourceDotNetAssembly1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.BinaryComponentDomainRoleId, global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.DotNetAssemblyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass LayerPackage
	/// Description for DSLFactory.Candle.SystemModel.LayerPackage
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerPackage.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerPackage.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4dbe0df1-633a-4a00-a8e3-f2db3d75923e")]
	public partial class LayerPackage : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// LayerPackage domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4dbe0df1, 0x633a, 0x4a00, 0xa8, 0xe3, 0xf2, 0xdb, 0x3d, 0x75, 0x92, 0x3e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LayerPackage(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public LayerPackage(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Level domain property code
		
		/// <summary>
		/// Level domain property Id.
		/// </summary>
		public static readonly global::System.Guid LevelDomainPropertyId = new global::System.Guid(0xde77ba00, 0xd400, 0x437b, 0x83, 0xd0, 0x3b, 0x26, 0xf4, 0xf3, 0x0c, 0xc0);
		
		/// <summary>
		/// Storage for Level
		/// </summary>
		private global::System.Int16 levelPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Level domain property.
		/// Description for DSLFactory.Candle.SystemModel.LayerPackage.Level
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerPackage/Level.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerPackage/Level.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("de77ba00-d400-437b-83d0-3b26f4f30cc0")]
		public global::System.Int16 Level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return levelPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LevelPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the LayerPackage.Level domain property.
		/// </summary>
		internal sealed partial class LevelPropertyHandler : DslModeling::DomainPropertyValueHandler<LayerPackage, global::System.Int16>
		{
			private LevelPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the LayerPackage.Level domain property value handler.
			/// </summary>
			public static readonly LevelPropertyHandler Instance = new LevelPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the LayerPackage.Level domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LevelDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(LayerPackage element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.levelPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(LayerPackage element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.levelPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Layers opposite domain role accessor
		/// <summary>
		/// Gets a list of Layers.
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.LayerPackage
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Layer> Layers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Layer>(this, global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.LayerPackageDomainRoleId);
			}
		}
		#endregion
		#region Component opposite domain role accessor
		/// <summary>
		/// Gets or sets Component.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.LayerPackage
		/// </summary>
		public virtual SoftwareComponent Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.LayerPackageDomainRoleId) as SoftwareComponent;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.LayerPackageDomainRoleId, value);
			}
		}
		#endregion
		#region InterfaceLayer opposite domain role accessor
		/// <summary>
		/// Gets or sets InterfaceLayer.
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.LayerPackage
		/// </summary>
		public virtual InterfaceLayer InterfaceLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.LayerPackageDomainRoleId) as InterfaceLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.LayerPackageDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.Id == global::DSLFactory.Candle.SystemModel.InterfaceLayer.DomainClassId) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeInterfaceLayer(rootElement, elementGroupPrototype);
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.Layer.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeLayer(rootElement, elementGroupPrototype);
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.InterfaceLayer sourceInterfaceLayer1 = sourceElement as global::DSLFactory.Candle.SystemModel.InterfaceLayer;
			if (sourceInterfaceLayer1 != null)
			{
				
				// Call custom method implemented in partial class
				this.MergeRelateInterfaceLayer(sourceElement, elementGroup);
				return;
			}
				
			global::DSLFactory.Candle.SystemModel.Layer sourceLayer2 = sourceElement as global::DSLFactory.Candle.SystemModel.Layer;
			if (sourceLayer2 != null)
			{
				
				// Call custom method implemented in partial class
				this.MergeRelateLayer(sourceElement, elementGroup);
				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.InterfaceLayer sourceInterfaceLayer1 = sourceElement as global::DSLFactory.Candle.SystemModel.InterfaceLayer;
			if (sourceInterfaceLayer1 != null)
			{
				
				// Call custom method implemented in partial class
				this.MergeDisconnectInterfaceLayer(sourceElement);
				return;
			}
				
			global::DSLFactory.Candle.SystemModel.Layer sourceLayer2 = sourceElement as global::DSLFactory.Candle.SystemModel.Layer;
			if (sourceLayer2 != null)
			{
				
				// Call custom method implemented in partial class
				this.MergeDisconnectLayer(sourceElement);
				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass ConfigurationPart
	/// Description for DSLFactory.Candle.SystemModel.ConfigurationPart
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ConfigurationPart.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ConfigurationPart.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("876d3e65-a9dd-4214-845e-09eca82d4845")]
	public partial class ConfigurationPart : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConfigurationPart domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x876d3e65, 0xa9dd, 0x4214, 0x84, 0x5e, 0x09, 0xec, 0xa8, 0x2d, 0x48, 0x45);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationPart(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConfigurationPart(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region XmlContent domain property code
		
		/// <summary>
		/// XmlContent domain property Id.
		/// </summary>
		public static readonly global::System.Guid XmlContentDomainPropertyId = new global::System.Guid(0xc95b61f9, 0x7a5e, 0x4803, 0xbe, 0x67, 0x67, 0xa2, 0x06, 0xc9, 0x55, 0x93);
		
		/// <summary>
		/// Storage for XmlContent
		/// </summary>
		private global::System.String xmlContentPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of XmlContent domain property.
		/// Specific xml configuration relative file path 
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ConfigurationPart/XmlContent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ConfigurationPart/XmlContent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c95b61f9-7a5e-4803-be67-67a206c95593")]
		public global::System.String XmlContent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return xmlContentPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				XmlContentPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationPart.XmlContent domain property.
		/// </summary>
		internal sealed partial class XmlContentPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationPart, global::System.String>
		{
			private XmlContentPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationPart.XmlContent domain property value handler.
			/// </summary>
			public static readonly XmlContentPropertyHandler Instance = new XmlContentPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationPart.XmlContent domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return XmlContentDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationPart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.xmlContentPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationPart element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.xmlContentPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xb6e67f25, 0xd552, 0x49c4, 0x8e, 0x62, 0x4b, 0x8f, 0x22, 0x96, 0x04, 0x0c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for DSLFactory.Candle.SystemModel.ConfigurationPart.Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ConfigurationPart/Name.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ConfigurationPart/Name.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("b6e67f25-d552-49c4-8e62-4b8f2296040c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationPart.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationPart, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationPart.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationPart.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConfigurationPart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationPart element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Enabled domain property code
		
		/// <summary>
		/// Enabled domain property Id.
		/// </summary>
		public static readonly global::System.Guid EnabledDomainPropertyId = new global::System.Guid(0xb01c1e13, 0x3d57, 0x4d4d, 0xaa, 0xeb, 0x5d, 0x4f, 0xd4, 0x31, 0xbd, 0x4b);
		
		/// <summary>
		/// Storage for Enabled
		/// </summary>
		private global::System.Boolean enabledPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Enabled domain property.
		/// Description for DSLFactory.Candle.SystemModel.ConfigurationPart.Enabled
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ConfigurationPart/Enabled.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ConfigurationPart/Enabled.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("b01c1e13-3d57-4d4d-aaeb-5d4fd431bd4b")]
		public global::System.Boolean Enabled
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return enabledPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EnabledPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationPart.Enabled domain property.
		/// </summary>
		internal sealed partial class EnabledPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationPart, global::System.Boolean>
		{
			private EnabledPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationPart.Enabled domain property value handler.
			/// </summary>
			public static readonly EnabledPropertyHandler Instance = new EnabledPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationPart.Enabled domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EnabledDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ConfigurationPart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.enabledPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationPart element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.enabledPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Visibility domain property code
		
		/// <summary>
		/// Visibility domain property Id.
		/// </summary>
		public static readonly global::System.Guid VisibilityDomainPropertyId = new global::System.Guid(0xe0858aa9, 0x4997, 0x47e0, 0x96, 0x89, 0x5a, 0xe0, 0xc0, 0x69, 0xda, 0x34);
		
		/// <summary>
		/// Storage for Visibility
		/// </summary>
		private Visibility visibilityPropertyStorage = DSLFactory.Candle.SystemModel.Visibility.Public;
		
		/// <summary>
		/// Gets or sets the value of Visibility domain property.
		/// Description for DSLFactory.Candle.SystemModel.ConfigurationPart.Visibility
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ConfigurationPart/Visibility.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ConfigurationPart/Visibility.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DSLFactory.Candle.SystemModel.Visibility.Public)]
		[DslModeling::DomainObjectId("e0858aa9-4997-47e0-9689-5ae0c069da34")]
		public Visibility Visibility
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return visibilityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VisibilityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConfigurationPart.Visibility domain property.
		/// </summary>
		internal sealed partial class VisibilityPropertyHandler : DslModeling::DomainPropertyValueHandler<ConfigurationPart, Visibility>
		{
			private VisibilityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConfigurationPart.Visibility domain property value handler.
			/// </summary>
			public static readonly VisibilityPropertyHandler Instance = new VisibilityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConfigurationPart.Visibility domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VisibilityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Visibility GetValue(ConfigurationPart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.visibilityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConfigurationPart element, Visibility newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Visibility oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.visibilityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Layer opposite domain role accessor
		/// <summary>
		/// Gets or sets Layer.
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.ConfigurationPart
		/// </summary>
		public virtual AbstractLayer Layer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.ConfigurationPartDomainRoleId) as AbstractLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.ConfigurationPartDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass ForeignKey
	/// Description for DSLFactory.Candle.SystemModel.ForeignKey
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ForeignKey.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ForeignKey.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("60bf2a2f-9b7c-406c-b804-5589b5360993")]
	public partial class ForeignKey : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ForeignKey domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x60bf2a2f, 0x9b7c, 0x406c, 0xb8, 0x04, 0x55, 0x89, 0xb5, 0x36, 0x09, 0x93);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ForeignKey(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ForeignKey(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Association opposite domain role accessor
		/// <summary>
		/// Gets or sets Association.
		/// Description for
		/// DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.ForeignKey
		/// </summary>
		public virtual Association Association
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.ForeignKeyDomainRoleId) as Association;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.ForeignKeyDomainRoleId, value);
			}
		}
		#endregion
		#region Column opposite domain role accessor
		/// <summary>
		/// Gets or sets Column.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty.ForeignKey
		/// </summary>
		public virtual Property Column
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty.ForeignKeyDomainRoleId) as Property;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty.ForeignKeyDomainRoleId, value);
			}
		}
		#endregion
		#region PrimaryKey opposite domain role accessor
		/// <summary>
		/// Gets or sets PrimaryKey.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey.ForeignKey
		/// </summary>
		public virtual Property PrimaryKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey.ForeignKeyDomainRoleId) as Property;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey.ForeignKeyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass TypeWithOperations
	/// Description for DSLFactory.Candle.SystemModel.TypeWithOperations
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.TypeWithOperations.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.TypeWithOperations.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a5dbd35e-2c47-4fc2-9ebe-86ffdd8bb14a")]
	public abstract partial class TypeWithOperations : CandleElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TypeWithOperations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa5dbd35e, 0x2c47, 0x4fc2, 0x9e, 0xbe, 0x86, 0xff, 0xdd, 0x8b, 0xb1, 0x4a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TypeWithOperations(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CustomAttributes domain property code
		
		/// <summary>
		/// CustomAttributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomAttributesDomainPropertyId = new global::System.Guid(0x219c5215, 0xb648, 0x466d, 0x98, 0x7d, 0x41, 0xd3, 0xb4, 0x18, 0xba, 0x89);
		
		/// <summary>
		/// Storage for CustomAttributes
		/// </summary>
		private global::System.String customAttributesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomAttributes domain property.
		/// Custom attributes without brackets
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.TypeWithOperations/CustomAttributes.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.TypeWithOperations/CustomAttributes.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("219c5215-b648-466d-987d-41d3b418ba89")]
		public global::System.String CustomAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customAttributesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomAttributesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the TypeWithOperations.CustomAttributes domain property.
		/// </summary>
		internal sealed partial class CustomAttributesPropertyHandler : DslModeling::DomainPropertyValueHandler<TypeWithOperations, global::System.String>
		{
			private CustomAttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TypeWithOperations.CustomAttributes domain property value handler.
			/// </summary>
			public static readonly CustomAttributesPropertyHandler Instance = new CustomAttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TypeWithOperations.CustomAttributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomAttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TypeWithOperations element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customAttributesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(TypeWithOperations element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customAttributesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Operations opposite domain role accessor
		/// <summary>
		/// Gets a list of Operations.
		/// Description for
		/// DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.Parent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Operation> Operations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Operation>(this, global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.ParentDomainRoleId);
			}
		}
		#endregion
		#region ServicesUsed opposite domain role accessor
		/// <summary>
		/// Gets a list of ServicesUsed.
		/// Description for DSLFactory.Candle.SystemModel.ClassUsesOperations.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NamedElement> ServicesUsed
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<NamedElement>(this, global::DSLFactory.Candle.SystemModel.ClassUsesOperations.SourceDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.Operation.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.Operation sourceOperation1 = sourceElement as global::DSLFactory.Candle.SystemModel.Operation;
			if (sourceOperation1 != null)
			{
				// Create link for path TypeWithOperationsHasOperations.Operations
				this.Operations.Add(sourceOperation1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.Operation sourceOperation1 = sourceElement as global::DSLFactory.Candle.SystemModel.Operation;
			if (sourceOperation1 != null)
			{
				// Delete link for path TypeWithOperationsHasOperations.Operations
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.GetLinks((global::DSLFactory.Candle.SystemModel.TypeWithOperations)this, sourceOperation1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.ParentDomainRoleId, global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.OperationDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass ServiceContract
	/// Description for DSLFactory.Candle.SystemModel.ServiceContract
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ServiceContract.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ServiceContract.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("26edb2d3-d12e-4eda-95de-d462f73756a5")]
	public partial class ServiceContract : TypeWithOperations
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ServiceContract domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x26edb2d3, 0xd12e, 0x4eda, 0x95, 0xde, 0xd4, 0x62, 0xf7, 0x37, 0x56, 0xa5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceContract(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceContract(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Layer opposite domain role accessor
		/// <summary>
		/// Gets or sets Layer.
		/// Description for
		/// DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.ServiceContract
		/// </summary>
		public virtual InterfaceLayer Layer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.ServiceContractDomainRoleId) as InterfaceLayer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.ServiceContractDomainRoleId, value);
			}
		}
		#endregion
		#region Implementations opposite domain role accessor
		/// <summary>
		/// Gets a list of Implementations.
		/// Description for DSLFactory.Candle.SystemModel.Implementation.Contract
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ClassImplementation> Implementations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ClassImplementation>(this, global::DSLFactory.Candle.SystemModel.Implementation.ContractDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.Operation.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.Operation sourceOperation1 = sourceElement as global::DSLFactory.Candle.SystemModel.Operation;
			if (sourceOperation1 != null)
			{
				// Create link for path TypeWithOperationsHasOperations.Operations
				this.Operations.Add(sourceOperation1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.Operation sourceOperation1 = sourceElement as global::DSLFactory.Candle.SystemModel.Operation;
			if (sourceOperation1 != null)
			{
				// Delete link for path TypeWithOperationsHasOperations.Operations
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.GetLinks((global::DSLFactory.Candle.SystemModel.TypeWithOperations)this, sourceOperation1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.ParentDomainRoleId, global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.OperationDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass InterfaceLayer
	/// Description for DSLFactory.Candle.SystemModel.InterfaceLayer
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.InterfaceLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.InterfaceLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("99fabf5f-7e7f-46d1-ac38-32b4f2c7623d")]
	public partial class InterfaceLayer : SoftwareLayer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InterfaceLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x99fabf5f, 0x7e7f, 0x46d1, 0xac, 0x38, 0x32, 0xb4, 0xf2, 0xc7, 0x62, 0x3d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InterfaceLayer(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InterfaceLayer(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Level domain property code
		
		/// <summary>
		/// Level domain property Id.
		/// </summary>
		public static readonly global::System.Guid LevelDomainPropertyId = new global::System.Guid(0xc92ea98d, 0xdf92, 0x411e, 0x8d, 0xa6, 0xae, 0x19, 0xcd, 0x81, 0x62, 0xd6);
		
		/// <summary>
		/// Storage for Level
		/// </summary>
		private global::System.Int16 levelPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Level domain property.
		/// Layers's level
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.InterfaceLayer/Level.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.InterfaceLayer/Level.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("c92ea98d-df92-411e-8da6-ae19cd8162d6")]
		public global::System.Int16 Level
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return levelPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LevelPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InterfaceLayer.Level domain property.
		/// </summary>
		internal sealed partial class LevelPropertyHandler : DslModeling::DomainPropertyValueHandler<InterfaceLayer, global::System.Int16>
		{
			private LevelPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InterfaceLayer.Level domain property value handler.
			/// </summary>
			public static readonly LevelPropertyHandler Instance = new LevelPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InterfaceLayer.Level domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LevelDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(InterfaceLayer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.levelPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InterfaceLayer element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.levelPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ServiceContracts opposite domain role accessor
		/// <summary>
		/// Gets a list of ServiceContracts.
		/// Description for
		/// DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.InterfaceLayer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ServiceContract> ServiceContracts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ServiceContract>(this, global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.InterfaceLayerDomainRoleId);
			}
		}
		#endregion
		#region LayerPackage opposite domain role accessor
		/// <summary>
		/// Gets or sets LayerPackage.
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.InterfaceLayer
		/// </summary>
		public virtual LayerPackage LayerPackage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.InterfaceLayerDomainRoleId) as LayerPackage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.InterfaceLayerDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.ServiceContract.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.ServiceContract sourceServiceContract1 = sourceElement as global::DSLFactory.Candle.SystemModel.ServiceContract;
			if (sourceServiceContract1 != null)
			{
				// Create link for path InterfaceLayerHasContracts.ServiceContracts
				this.ServiceContracts.Add(sourceServiceContract1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.ServiceContract sourceServiceContract1 = sourceElement as global::DSLFactory.Candle.SystemModel.ServiceContract;
			if (sourceServiceContract1 != null)
			{
				// Delete link for path InterfaceLayerHasContracts.ServiceContracts
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.GetLinks((global::DSLFactory.Candle.SystemModel.InterfaceLayer)this, sourceServiceContract1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.InterfaceLayerDomainRoleId, global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.ServiceContractDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass Component
	/// Description for DSLFactory.Candle.SystemModel.Component
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Component.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Component.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c12d49a3-82f5-4bf2-bc4f-27e2f5131682")]
	public abstract partial class Component : CandleElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Component domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc12d49a3, 0x82f5, 0x4bf2, 0xbc, 0x4f, 0x27, 0xe2, 0xf5, 0x13, 0x16, 0x82);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Component(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x53094dce, 0xee31, 0x4598, 0xab, 0xe5, 0xb7, 0x7f, 0x4d, 0xe5, 0x3c, 0xd4);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Description for DSLFactory.Candle.SystemModel.Component.Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Component/Namespace.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Component/Namespace.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("53094dce-ee31-4598-abe5-b77f4de53cd4")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Component.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<Component, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Component.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Component.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Component element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Component element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Model opposite domain role accessor
		/// <summary>
		/// Gets or sets Model.
		/// Description for DSLFactory.Candle.SystemModel.ModelRootHasComponent.Component
		/// </summary>
		public virtual CandleModel Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.ComponentDomainRoleId) as CandleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.ComponentDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass Layer
	/// Description for DSLFactory.Candle.SystemModel.Layer
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Layer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Layer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("581a9ebb-1f42-4bac-bf67-4af4f8a4bf00")]
	public abstract partial class Layer : SoftwareLayer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Layer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x581a9ebb, 0x1f42, 0x4bac, 0xbf, 0x67, 0x4a, 0xf4, 0xf8, 0xa4, 0xbf, 0x00);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Layer(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region HostingContext domain property code
		
		/// <summary>
		/// HostingContext domain property Id.
		/// </summary>
		public static readonly global::System.Guid HostingContextDomainPropertyId = new global::System.Guid(0x1924e6df, 0x1cf3, 0x4dc6, 0xb0, 0xd9, 0x9d, 0x6f, 0x91, 0xcc, 0x9c, 0x44);
		
		/// <summary>
		/// Storage for HostingContext
		/// </summary>
		private HostingContext hostingContextPropertyStorage = DSLFactory.Candle.SystemModel.HostingContext.None;
		
		/// <summary>
		/// Gets or sets the value of HostingContext domain property.
		/// Is the component's main layer
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Layer/HostingContext.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Layer/HostingContext.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DSLFactory.Candle.SystemModel.HostingContext.None)]
		[DslModeling::DomainObjectId("1924e6df-1cf3-4dc6-b0d9-9d6f91cc9c44")]
		public HostingContext HostingContext
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hostingContextPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HostingContextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Layer.HostingContext domain property.
		/// </summary>
		internal sealed partial class HostingContextPropertyHandler : DslModeling::DomainPropertyValueHandler<Layer, HostingContext>
		{
			private HostingContextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Layer.HostingContext domain property value handler.
			/// </summary>
			public static readonly HostingContextPropertyHandler Instance = new HostingContextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Layer.HostingContext domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HostingContextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed HostingContext GetValue(Layer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hostingContextPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Layer element, HostingContext newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				HostingContext oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hostingContextPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region StartupProject domain property code
		
		/// <summary>
		/// StartupProject domain property Id.
		/// </summary>
		public static readonly global::System.Guid StartupProjectDomainPropertyId = new global::System.Guid(0x8a565775, 0xa0a4, 0x4e39, 0xa1, 0x05, 0x97, 0xea, 0x41, 0x2b, 0x50, 0x96);
		
		/// <summary>
		/// Storage for StartupProject
		/// </summary>
		private global::System.Boolean startupProjectPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of StartupProject domain property.
		/// Is it the startup project
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Layer/StartupProject.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Layer/StartupProject.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8a565775-a0a4-4e39-a105-97ea412b5096")]
		public global::System.Boolean StartupProject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return startupProjectPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StartupProjectPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Layer.StartupProject domain property.
		/// </summary>
		internal sealed partial class StartupProjectPropertyHandler : DslModeling::DomainPropertyValueHandler<Layer, global::System.Boolean>
		{
			private StartupProjectPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Layer.StartupProject domain property value handler.
			/// </summary>
			public static readonly StartupProjectPropertyHandler Instance = new StartupProjectPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Layer.StartupProject domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StartupProjectDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Layer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.startupProjectPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Layer element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.startupProjectPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LayerPackage opposite domain role accessor
		/// <summary>
		/// Gets or sets LayerPackage.
		/// Description for DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.Layer
		/// </summary>
		public virtual LayerPackage LayerPackage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.LayerDomainRoleId) as LayerPackage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.LayerDomainRoleId, value);
			}
		}
		#endregion
		#region Classes opposite domain role accessor
		/// <summary>
		/// Gets a list of Classes.
		/// Description for DSLFactory.Candle.SystemModel.LayerHasClassImplementations.Layer
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ClassImplementation> Classes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ClassImplementation>(this, global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.LayerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.Id == global::DSLFactory.Candle.SystemModel.ClassImplementation.DomainClassId) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.ClassImplementation sourceClassImplementation1 = sourceElement as global::DSLFactory.Candle.SystemModel.ClassImplementation;
			if (sourceClassImplementation1 != null)
			{
				// Create link for path LayerHasClassImplementations.Classes
				this.Classes.Add(sourceClassImplementation1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.ClassImplementation sourceClassImplementation1 = sourceElement as global::DSLFactory.Candle.SystemModel.ClassImplementation;
			if (sourceClassImplementation1 != null)
			{
				// Delete link for path LayerHasClassImplementations.Classes
				
				foreach (DslModeling::ElementLink link in global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.GetLinks((global::DSLFactory.Candle.SystemModel.Layer)this, sourceClassImplementation1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.LayerDomainRoleId, global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.ClassImplementationDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass SoftwareLayer
	/// Description for DSLFactory.Candle.SystemModel.SoftwareLayer
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.SoftwareLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.SoftwareLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ab5f4b45-871d-4e0d-9d9b-7e0f1f73f2e1")]
	public abstract partial class SoftwareLayer : AbstractLayer
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SoftwareLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xab5f4b45, 0x871d, 0x4e0d, 0x9d, 0x9b, 0x7e, 0x0f, 0x1f, 0x73, 0xf2, 0xe1);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SoftwareLayer(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Template domain property code
		
		/// <summary>
		/// Template domain property Id.
		/// </summary>
		public static readonly global::System.Guid TemplateDomainPropertyId = new global::System.Guid(0x839442d7, 0x7907, 0x42a2, 0xa0, 0x6a, 0x40, 0x1e, 0xc8, 0x7e, 0xd7, 0xc3);
		
		/// <summary>
		/// Storage for Template
		/// </summary>
		private global::System.String templatePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Template domain property.
		/// Description for DSLFactory.Candle.SystemModel.SoftwareLayer.Template
		/// </summary>
		[System.ComponentModel.Editor(typeof(DSLFactory.Candle.SystemModel.Editor.VSTemplateTypeEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.SoftwareLayer/Template.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.SoftwareLayer/Template.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("839442d7-7907-42a2-a06a-401ec87ed7c3")]
		public global::System.String Template
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return templatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TemplatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SoftwareLayer.Template domain property.
		/// </summary>
		internal sealed partial class TemplatePropertyHandler : DslModeling::DomainPropertyValueHandler<SoftwareLayer, global::System.String>
		{
			private TemplatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SoftwareLayer.Template domain property value handler.
			/// </summary>
			public static readonly TemplatePropertyHandler Instance = new TemplatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SoftwareLayer.Template domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TemplateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SoftwareLayer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.templatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SoftwareLayer element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.templatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0xf6e10985, 0x013f, 0x4000, 0x8e, 0x0c, 0x2c, 0xe1, 0x8c, 0x24, 0x37, 0x5f);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Description for DSLFactory.Candle.SystemModel.SoftwareLayer.Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.SoftwareLayer/Namespace.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.SoftwareLayer/Namespace.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f6e10985-013f-4000-8e0c-2ce18c24375f")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SoftwareLayer.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<SoftwareLayer, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SoftwareLayer.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SoftwareLayer.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SoftwareLayer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SoftwareLayer element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region VSProjectName domain property code
		
		/// <summary>
		/// VSProjectName domain property Id.
		/// </summary>
		public static readonly global::System.Guid VSProjectNameDomainPropertyId = new global::System.Guid(0x19609ee8, 0x1db0, 0x46c6, 0xba, 0x77, 0xa1, 0x9b, 0x36, 0xac, 0xf7, 0xab);
		
		/// <summary>
		/// Gets or sets the value of VSProjectName domain property.
		/// Visual Studio Project Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.SoftwareLayer/VSProjectName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.SoftwareLayer/VSProjectName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("19609ee8-1db0-46c6-ba77-a19b36acf7ab")]
		public global::System.String VSProjectName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return VSProjectNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VSProjectNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SoftwareLayer.VSProjectName domain property.
		/// </summary>
		internal sealed partial class VSProjectNamePropertyHandler : DslModeling::DomainPropertyValueHandler<SoftwareLayer, global::System.String>
		{
			private VSProjectNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SoftwareLayer.VSProjectName domain property value handler.
			/// </summary>
			public static readonly VSProjectNamePropertyHandler Instance = new VSProjectNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SoftwareLayer.VSProjectName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VSProjectNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SoftwareLayer element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for VSProjectName because its Kind is
				// set to CustomStorage. Please provide the GetVSProjectNameValue()
				// method on the domain class.
				return element.GetVSProjectNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SoftwareLayer element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for VSProjectName because its Kind is
					// set to CustomStorage. Please provide the SetVSProjectNameValue()
					// method on the domain class.
					element.SetVSProjectNameValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region Component opposite domain role accessor
		/// <summary>
		/// Gets or sets Component.
		/// Description for
		/// DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareLayer
		/// </summary>
		public virtual SoftwareComponent Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareLayerDomainRoleId) as SoftwareComponent;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareLayerDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.SoftwareLayer.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Gets the ModelElement to be used as the target for the ElementGroupPrototype merge 
		/// process.  
		/// This is called by the merge process when this element is the target of the merge.  
		/// This provides this element with the opportunity to forward the target to something 
		/// other than itself.
		/// </summary>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that will be reconstituted and merged with the target element.</param>
		/// <returns>The ModelElement to use as the target for the merge process.</returns>
		protected override DslModeling::ModelElement ChooseMergeTarget(DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
		
			if (elementGroupPrototype.RootProtoElements.Count > 0)
			{
				// We choose to assume that the first rootProtoElement is representative of the set
				DslModeling::ProtoElementBase rootProtoElement = elementGroupPrototype.RootProtoElements[0];
				DslModeling::DomainClassInfo classInfo;
				classInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootProtoElement.DomainClassId);
				
				if (classInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.SoftwareLayer.DomainClassId))
				
				{
					// Find Target by traversing path SoftwareComponentHasLayers.Component/!SoftwareComponent
							// Segments 0 and 1
							global::DSLFactory.Candle.SystemModel.SoftwareComponent softwareLayerTarget = this.Component;
							if ( softwareLayerTarget == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'SoftwareComponentHasLayers.Component/!SoftwareComponent'.");
					return softwareLayerTarget;
				}
			}
			return this;
		}
		
		/// <summary>
		/// Gets the ModelElement to be used as the target for the ElementGroup merge 
		/// process.  
		/// This is called by the merge process when this element is the target of the merge.  
		/// This provides this element with the opportunity to forward the target to something 
		/// other than itself.
		/// </summary>
		/// <param name="elementGroup">The ElementGroup that will be merged with the target element.</param>
		/// <returns>The ModelElement to use as the target for the merge process.</returns>
		protected override DslModeling::ModelElement ChooseMergeTarget(DslModeling::ElementGroup elementGroup)
		{
			if ( elementGroup == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
		
			if (elementGroup.RootElements.Count > 0)
			{
				// We choose to assume that the first rootProtoElement is representative of the set
				DslModeling::ModelElement rootElement = elementGroup.RootElements[0];
				DslModeling::DomainClassInfo classInfo;
				classInfo = rootElement.GetDomainClass();
				
				if (classInfo.IsDerivedFrom(global::DSLFactory.Candle.SystemModel.SoftwareLayer.DomainClassId))
			
				{
					// Find Target by traversing path SoftwareComponentHasLayers.Component/!SoftwareComponent
							// Segments 0 and 1
							global::DSLFactory.Candle.SystemModel.SoftwareComponent softwareLayerTarget = this.Component;
							if ( softwareLayerTarget == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'SoftwareComponentHasLayers.Component/!SoftwareComponent'.");
					return softwareLayerTarget;
				}
			}
			return this;
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DSLFactory.Candle.SystemModel.SoftwareLayer sourceSoftwareLayer1 = sourceElement as global::DSLFactory.Candle.SystemModel.SoftwareLayer;
			if (sourceSoftwareLayer1 != null)
			{
				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DSLFactory.Candle.SystemModel.SoftwareLayer sourceSoftwareLayer1 = sourceElement as global::DSLFactory.Candle.SystemModel.SoftwareLayer;
			if (sourceSoftwareLayer1 != null)
			{
				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass ClassImplementation
	/// Description for DSLFactory.Candle.SystemModel.ClassImplementation
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassImplementation.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassImplementation.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("298db53b-6dbb-428c-8652-c37dd95b0832")]
	public partial class ClassImplementation : TypeWithOperations
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassImplementation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x298db53b, 0x6dbb, 0x428c, 0x86, 0x52, 0xc3, 0x7d, 0xd9, 0x5b, 0x08, 0x32);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassImplementation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassImplementation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Layer opposite domain role accessor
		/// <summary>
		/// Gets or sets Layer.
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerHasClassImplementations.ClassImplementation
		/// </summary>
		public virtual Layer Layer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.ClassImplementationDomainRoleId) as Layer;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.ClassImplementationDomainRoleId, value);
			}
		}
		#endregion
		#region Contract opposite domain role accessor
		/// <summary>
		/// Gets or sets Contract.
		/// Description for DSLFactory.Candle.SystemModel.Implementation.ClassImplementation
		/// </summary>
		public virtual ServiceContract Contract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.Implementation.ClassImplementationDomainRoleId) as ServiceContract;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.Implementation.ClassImplementationDomainRoleId, value);
			}
		}
		#endregion
		#region AssociatedEntity opposite domain role accessor
		/// <summary>
		/// Gets or sets AssociatedEntity.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity.ClassImplementation
		/// </summary>
		public virtual Entity AssociatedEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity.ClassImplementationDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity.ClassImplementationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass Process
	/// Description for DSLFactory.Candle.SystemModel.Process
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Process.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Process.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("092e4ff2-02fb-4f74-a445-18c72bed78fc")]
	public partial class Process : ClassImplementation
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Process domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x092e4ff2, 0x02fb, 0x4f74, 0xa4, 0x45, 0x18, 0xc7, 0x2b, 0xed, 0x78, 0xfc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Process(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Process(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainClass ExternalServiceContract
	/// Description for DSLFactory.Candle.SystemModel.ExternalServiceContract
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalServiceContract.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalServiceContract.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2f2eb3c3-bbab-4893-997d-2d61597c89bd")]
	public partial class ExternalServiceContract : ExternalPublicPort
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExternalServiceContract domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2f2eb3c3, 0xbbab, 0x4893, 0x99, 0x7d, 0x2d, 0x61, 0x59, 0x7c, 0x89, 0xbd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalServiceContract(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExternalServiceContract(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
