//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainModel CandleDomainModel
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleDomainModel.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleDomainModel.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5c5acb63-d99c-4e4a-9d6a-b61acb347d12")]
	public partial class CandleDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// CandleDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x5c5acb63, 0xd99c, 0x4e4a, 0x9d, 0x6a, 0xb6, 0x1a, 0xcb, 0x34, 0x7d, 0x12);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public CandleDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
		}
		
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(CandleModel),
				typeof(SoftwareComponent),
				typeof(NamedElement),
				typeof(BusinessLayer),
				typeof(DataAccessLayer),
				typeof(PresentationLayer),
				typeof(CandleElement),
				typeof(DataLayer),
				typeof(TypeMember),
				typeof(Argument),
				typeof(Operation),
				typeof(Package),
				typeof(DataType),
				typeof(Property),
				typeof(ExternalComponent),
				typeof(DependencyProperty),
				typeof(ExternalPublicPort),
				typeof(Enumeration),
				typeof(UIWorkflowLayer),
				typeof(Scenario),
				typeof(UIView),
				typeof(DotNetAssembly),
				typeof(AbstractLayer),
				typeof(Entity),
				typeof(EnumValue),
				typeof(Artifact),
				typeof(BinaryComponent),
				typeof(LayerPackage),
				typeof(ConfigurationPart),
				typeof(ForeignKey),
				typeof(TypeWithOperations),
				typeof(ServiceContract),
				typeof(InterfaceLayer),
				typeof(Component),
				typeof(Layer),
				typeof(SoftwareLayer),
				typeof(ClassImplementation),
				typeof(Process),
				typeof(ExternalServiceContract),
				typeof(OperationHasArguments),
				typeof(PackageHasTypes),
				typeof(DataLayerHasPackages),
				typeof(Association),
				typeof(CandleModelHasExternalComponents),
				typeof(ScenarioHasUIView),
				typeof(AppWorkflowLayerHasScenarios),
				typeof(Action),
				typeof(EnumHasValues),
				typeof(EntityHasProperties),
				typeof(ElementHasDependencyProperties),
				typeof(AssemblyReferencesAssemblies),
				typeof(AssociationHasProperties),
				typeof(ActionHasDependencyProperties),
				typeof(AssociationHasForeignKeys),
				typeof(ForeignKeyReferencesProperty),
				typeof(ForeignKeyReferencesPrimaryKey),
				typeof(TypeWithOperationsHasOperations),
				typeof(ModelRootHasComponent),
				typeof(ExternalServiceReference),
				typeof(LayerHasArtifacts),
				typeof(InterfaceLayerHasContracts),
				typeof(ExternalServiceReferenceHasDependencyProperties),
				typeof(LayerPackageContainsLayers),
				typeof(SoftwareComponentHasLayers),
				typeof(BinaryComponentHasAssemblies),
				typeof(ComponentHasLayerPackages),
				typeof(LayerHasClassImplementations),
				typeof(Implementation),
				typeof(ClassImplementationReferencesAssociatedEntity),
				typeof(ImplementationHasDependencyProperties),
				typeof(LayerPackageReferencesInterfaceLayer),
				typeof(LayerHasConfigurationParts),
				typeof(ExternalComponentHasPublicPorts),
				typeof(ScenarioUsesContracts),
				typeof(ClassUsesOperations),
				typeof(ClassUsesOperationsHasDependencyProperties),
				typeof(DataLayerReferencesExternalComponent),
				typeof(EntityHasSubClasses),
				typeof(Generalization),
				typeof(ComponentModelDiagram),
				typeof(AssociationLink),
				typeof(ActionLink),
				typeof(AssemblyReferencesAssemblyLink),
				typeof(ImplementationLink),
				typeof(ExternalServiceReferenceLink),
				typeof(ClassUsesOperationLink),
				typeof(ScenarioUsesContractsLink),
				typeof(DataLayerReferencesExternalComponentLink),
				typeof(GeneralizationLink),
				typeof(SoftwareComponentShape),
				typeof(BusinessLayerShape),
				typeof(DataAccessLayerShape),
				typeof(PresentationLayerShape),
				typeof(DataLayerShape),
				typeof(PackageShape),
				typeof(ExternalComponentShape),
				typeof(ScenarioShape),
				typeof(UiViewShape),
				typeof(UIWorkflowLayerShape),
				typeof(DotnetAssemblyShape),
				typeof(BinaryComponentShape),
				typeof(LayerPackageShape),
				typeof(InterfaceLayerShape),
				typeof(ProcessShape),
				typeof(ScenarioThumbnailShape),
				typeof(EntityShape),
				typeof(EnumTypeShape),
				typeof(ServiceContractShape),
				typeof(ClassImplementationShape),
				typeof(ExternalPublicPortShape),
				typeof(ExternalServiceContractShape),
				typeof(global::DSLFactory.Candle.SystemModel.FixUpDiagram),
				typeof(global::DSLFactory.Candle.SystemModel.DecoratorPropertyChanged),
				typeof(global::DSLFactory.Candle.SystemModel.ConnectorRolePlayerChanged),
				typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemAddRule),
				typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemDeleteRule),
				typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemRolePlayerChangeRule),
				typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemRolePlayerPositionChangeRule),
				typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemChangeRule),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(CandleModel), "Path", CandleModel.PathDomainPropertyId, typeof(CandleModel.PathPropertyHandler)),
				new DomainMemberInfo(typeof(CandleModel), "Url", CandleModel.UrlDomainPropertyId, typeof(CandleModel.UrlPropertyHandler)),
				new DomainMemberInfo(typeof(CandleModel), "Version", CandleModel.VersionDomainPropertyId, typeof(CandleModel.VersionPropertyHandler)),
				new DomainMemberInfo(typeof(CandleModel), "StrategyTemplate", CandleModel.StrategyTemplateDomainPropertyId, typeof(CandleModel.StrategyTemplatePropertyHandler)),
				new DomainMemberInfo(typeof(CandleModel), "DotNetFrameworkVersion", CandleModel.DotNetFrameworkVersionDomainPropertyId, typeof(CandleModel.DotNetFrameworkVersionPropertyHandler)),
				new DomainMemberInfo(typeof(CandleModel), "Visibility", CandleModel.VisibilityDomainPropertyId, typeof(CandleModel.VisibilityPropertyHandler)),
				new DomainMemberInfo(typeof(CandleModel), "ComponentType", CandleModel.ComponentTypeDomainPropertyId, typeof(CandleModel.ComponentTypePropertyHandler)),
				new DomainMemberInfo(typeof(CandleModel), "IsLibrary", CandleModel.IsLibraryDomainPropertyId, typeof(CandleModel.IsLibraryPropertyHandler)),
				new DomainMemberInfo(typeof(CandleModel), "BaseAddress", CandleModel.BaseAddressDomainPropertyId, typeof(CandleModel.BaseAddressPropertyHandler)),
				new DomainMemberInfo(typeof(NamedElement), "Name", NamedElement.NameDomainPropertyId, typeof(NamedElement.NamePropertyHandler)),
				new DomainMemberInfo(typeof(NamedElement), "Comment", NamedElement.CommentDomainPropertyId, typeof(NamedElement.CommentPropertyHandler)),
				new DomainMemberInfo(typeof(CandleElement), "RootName", CandleElement.RootNameDomainPropertyId, typeof(CandleElement.RootNamePropertyHandler)),
				new DomainMemberInfo(typeof(DataLayer), "XmlNamespace", DataLayer.XmlNamespaceDomainPropertyId, typeof(DataLayer.XmlNamespacePropertyHandler)),
				new DomainMemberInfo(typeof(TypeMember), "Type", TypeMember.TypeDomainPropertyId, typeof(TypeMember.TypePropertyHandler)),
				new DomainMemberInfo(typeof(TypeMember), "IsCollection", TypeMember.IsCollectionDomainPropertyId, typeof(TypeMember.IsCollectionPropertyHandler)),
				new DomainMemberInfo(typeof(TypeMember), "DisplayName", TypeMember.DisplayNameDomainPropertyId, typeof(TypeMember.DisplayNamePropertyHandler)),
				new DomainMemberInfo(typeof(TypeMember), "XmlName", TypeMember.XmlNameDomainPropertyId, typeof(TypeMember.XmlNamePropertyHandler)),
				new DomainMemberInfo(typeof(Argument), "Direction", Argument.DirectionDomainPropertyId, typeof(Argument.DirectionPropertyHandler)),
				new DomainMemberInfo(typeof(Operation), "CustomAttributes", Operation.CustomAttributesDomainPropertyId, typeof(Operation.CustomAttributesPropertyHandler)),
				new DomainMemberInfo(typeof(Property), "Nullable", Property.NullableDomainPropertyId, typeof(Property.NullablePropertyHandler)),
				new DomainMemberInfo(typeof(Property), "IsPrimaryKey", Property.IsPrimaryKeyDomainPropertyId, typeof(Property.IsPrimaryKeyPropertyHandler)),
				new DomainMemberInfo(typeof(Property), "CustomAttributes", Property.CustomAttributesDomainPropertyId, typeof(Property.CustomAttributesPropertyHandler)),
				new DomainMemberInfo(typeof(Property), "ColumnName", Property.ColumnNameDomainPropertyId, typeof(Property.ColumnNamePropertyHandler)),
				new DomainMemberInfo(typeof(Property), "ServerType", Property.ServerTypeDomainPropertyId, typeof(Property.ServerTypePropertyHandler)),
				new DomainMemberInfo(typeof(Property), "IsAutoIncrement", Property.IsAutoIncrementDomainPropertyId, typeof(Property.IsAutoIncrementPropertyHandler)),
				new DomainMemberInfo(typeof(ExternalComponent), "Version", ExternalComponent.VersionDomainPropertyId, typeof(ExternalComponent.VersionPropertyHandler)),
				new DomainMemberInfo(typeof(ExternalComponent), "ModelMoniker", ExternalComponent.ModelMonikerDomainPropertyId, typeof(ExternalComponent.ModelMonikerPropertyHandler)),
				new DomainMemberInfo(typeof(ExternalComponent), "IsLastVersion", ExternalComponent.IsLastVersionDomainPropertyId, typeof(ExternalComponent.IsLastVersionPropertyHandler)),
				new DomainMemberInfo(typeof(ExternalComponent), "Description", ExternalComponent.DescriptionDomainPropertyId, typeof(ExternalComponent.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(ExternalComponent), "Namespace", ExternalComponent.NamespaceDomainPropertyId, typeof(ExternalComponent.NamespacePropertyHandler)),
				new DomainMemberInfo(typeof(DependencyProperty), "StrategyId", DependencyProperty.StrategyIdDomainPropertyId, typeof(DependencyProperty.StrategyIdPropertyHandler)),
				new DomainMemberInfo(typeof(DependencyProperty), "Name", DependencyProperty.NameDomainPropertyId, typeof(DependencyProperty.NamePropertyHandler)),
				new DomainMemberInfo(typeof(DependencyProperty), "Value", DependencyProperty.ValueDomainPropertyId, typeof(DependencyProperty.ValuePropertyHandler)),
				new DomainMemberInfo(typeof(ExternalPublicPort), "ComponentPortMoniker", ExternalPublicPort.ComponentPortMonikerDomainPropertyId, typeof(ExternalPublicPort.ComponentPortMonikerPropertyHandler)),
				new DomainMemberInfo(typeof(ExternalPublicPort), "IsInGac", ExternalPublicPort.IsInGacDomainPropertyId, typeof(ExternalPublicPort.IsInGacPropertyHandler)),
				new DomainMemberInfo(typeof(Enumeration), "IsFlag", Enumeration.IsFlagDomainPropertyId, typeof(Enumeration.IsFlagPropertyHandler)),
				new DomainMemberInfo(typeof(UIView), "Description", UIView.DescriptionDomainPropertyId, typeof(UIView.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(DotNetAssembly), "FullName", DotNetAssembly.FullNameDomainPropertyId, typeof(DotNetAssembly.FullNamePropertyHandler)),
				new DomainMemberInfo(typeof(DotNetAssembly), "IsInGac", DotNetAssembly.IsInGacDomainPropertyId, typeof(DotNetAssembly.IsInGacPropertyHandler)),
				new DomainMemberInfo(typeof(DotNetAssembly), "Version", DotNetAssembly.VersionDomainPropertyId, typeof(DotNetAssembly.VersionPropertyHandler)),
				new DomainMemberInfo(typeof(DotNetAssembly), "InitialLocation", DotNetAssembly.InitialLocationDomainPropertyId, typeof(DotNetAssembly.InitialLocationPropertyHandler)),
				new DomainMemberInfo(typeof(DotNetAssembly), "Visibility", DotNetAssembly.VisibilityDomainPropertyId, typeof(DotNetAssembly.VisibilityPropertyHandler)),
				new DomainMemberInfo(typeof(AbstractLayer), "AssemblyName", AbstractLayer.AssemblyNameDomainPropertyId, typeof(AbstractLayer.AssemblyNamePropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "BaseType", Entity.BaseTypeDomainPropertyId, typeof(Entity.BaseTypePropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "IsAbstract", Entity.IsAbstractDomainPropertyId, typeof(Entity.IsAbstractPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "CustomAttributes", Entity.CustomAttributesDomainPropertyId, typeof(Entity.CustomAttributesPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "TableName", Entity.TableNameDomainPropertyId, typeof(Entity.TableNamePropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "TableOwner", Entity.TableOwnerDomainPropertyId, typeof(Entity.TableOwnerPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "DatabaseType", Entity.DatabaseTypeDomainPropertyId, typeof(Entity.DatabaseTypePropertyHandler)),
				new DomainMemberInfo(typeof(EnumValue), "Value", EnumValue.ValueDomainPropertyId, typeof(EnumValue.ValuePropertyHandler)),
				new DomainMemberInfo(typeof(EnumValue), "HasValue", EnumValue.HasValueDomainPropertyId, typeof(EnumValue.HasValuePropertyHandler)),
				new DomainMemberInfo(typeof(Artifact), "FileName", Artifact.FileNameDomainPropertyId, typeof(Artifact.FileNamePropertyHandler)),
				new DomainMemberInfo(typeof(Artifact), "Type", Artifact.TypeDomainPropertyId, typeof(Artifact.TypePropertyHandler)),
				new DomainMemberInfo(typeof(Artifact), "InitialFileName", Artifact.InitialFileNameDomainPropertyId, typeof(Artifact.InitialFileNamePropertyHandler)),
				new DomainMemberInfo(typeof(Artifact), "Scope", Artifact.ScopeDomainPropertyId, typeof(Artifact.ScopePropertyHandler)),
				new DomainMemberInfo(typeof(Artifact), "ConfigurationMode", Artifact.ConfigurationModeDomainPropertyId, typeof(Artifact.ConfigurationModePropertyHandler)),
				new DomainMemberInfo(typeof(LayerPackage), "Level", LayerPackage.LevelDomainPropertyId, typeof(LayerPackage.LevelPropertyHandler)),
				new DomainMemberInfo(typeof(ConfigurationPart), "XmlContent", ConfigurationPart.XmlContentDomainPropertyId, typeof(ConfigurationPart.XmlContentPropertyHandler)),
				new DomainMemberInfo(typeof(ConfigurationPart), "Name", ConfigurationPart.NameDomainPropertyId, typeof(ConfigurationPart.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ConfigurationPart), "Enabled", ConfigurationPart.EnabledDomainPropertyId, typeof(ConfigurationPart.EnabledPropertyHandler)),
				new DomainMemberInfo(typeof(ConfigurationPart), "Visibility", ConfigurationPart.VisibilityDomainPropertyId, typeof(ConfigurationPart.VisibilityPropertyHandler)),
				new DomainMemberInfo(typeof(TypeWithOperations), "CustomAttributes", TypeWithOperations.CustomAttributesDomainPropertyId, typeof(TypeWithOperations.CustomAttributesPropertyHandler)),
				new DomainMemberInfo(typeof(InterfaceLayer), "Level", InterfaceLayer.LevelDomainPropertyId, typeof(InterfaceLayer.LevelPropertyHandler)),
				new DomainMemberInfo(typeof(Component), "Namespace", Component.NamespaceDomainPropertyId, typeof(Component.NamespacePropertyHandler)),
				new DomainMemberInfo(typeof(Layer), "HostingContext", Layer.HostingContextDomainPropertyId, typeof(Layer.HostingContextPropertyHandler)),
				new DomainMemberInfo(typeof(Layer), "StartupProject", Layer.StartupProjectDomainPropertyId, typeof(Layer.StartupProjectPropertyHandler)),
				new DomainMemberInfo(typeof(SoftwareLayer), "Template", SoftwareLayer.TemplateDomainPropertyId, typeof(SoftwareLayer.TemplatePropertyHandler)),
				new DomainMemberInfo(typeof(SoftwareLayer), "Namespace", SoftwareLayer.NamespaceDomainPropertyId, typeof(SoftwareLayer.NamespacePropertyHandler)),
				new DomainMemberInfo(typeof(SoftwareLayer), "VSProjectName", SoftwareLayer.VSProjectNameDomainPropertyId, typeof(SoftwareLayer.VSProjectNamePropertyHandler)),
				new DomainMemberInfo(typeof(Association), "XmlName", Association.XmlNameDomainPropertyId, typeof(Association.XmlNamePropertyHandler)),
				new DomainMemberInfo(typeof(Association), "SourceRoleName", Association.SourceRoleNameDomainPropertyId, typeof(Association.SourceRoleNamePropertyHandler)),
				new DomainMemberInfo(typeof(Association), "TargetRoleName", Association.TargetRoleNameDomainPropertyId, typeof(Association.TargetRoleNamePropertyHandler)),
				new DomainMemberInfo(typeof(Association), "TargetMultiplicity", Association.TargetMultiplicityDomainPropertyId, typeof(Association.TargetMultiplicityPropertyHandler)),
				new DomainMemberInfo(typeof(Association), "SourceMultiplicity", Association.SourceMultiplicityDomainPropertyId, typeof(Association.SourceMultiplicityPropertyHandler)),
				new DomainMemberInfo(typeof(Association), "Sort", Association.SortDomainPropertyId, typeof(Association.SortPropertyHandler)),
				new DomainMemberInfo(typeof(Action), "Name", Action.NameDomainPropertyId, typeof(Action.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Action), "Roles", Action.RolesDomainPropertyId, typeof(Action.RolesPropertyHandler)),
				new DomainMemberInfo(typeof(Action), "Description", Action.DescriptionDomainPropertyId, typeof(Action.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(AssemblyReferencesAssemblies), "Scope", AssemblyReferencesAssemblies.ScopeDomainPropertyId, typeof(AssemblyReferencesAssemblies.ScopePropertyHandler)),
				new DomainMemberInfo(typeof(ExternalServiceReference), "ConfigurationMode", ExternalServiceReference.ConfigurationModeDomainPropertyId, typeof(ExternalServiceReference.ConfigurationModePropertyHandler)),
				new DomainMemberInfo(typeof(ExternalServiceReference), "Scope", ExternalServiceReference.ScopeDomainPropertyId, typeof(ExternalServiceReference.ScopePropertyHandler)),
				new DomainMemberInfo(typeof(Implementation), "Name", Implementation.NameDomainPropertyId, typeof(Implementation.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Implementation), "ConfigurationMode", Implementation.ConfigurationModeDomainPropertyId, typeof(Implementation.ConfigurationModePropertyHandler)),
				new DomainMemberInfo(typeof(ScenarioUsesContracts), "Name", ScenarioUsesContracts.NameDomainPropertyId, typeof(ScenarioUsesContracts.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ScenarioUsesContracts), "ConfigurationMode", ScenarioUsesContracts.ConfigurationModeDomainPropertyId, typeof(ScenarioUsesContracts.ConfigurationModePropertyHandler)),
				new DomainMemberInfo(typeof(ClassUsesOperations), "Name", ClassUsesOperations.NameDomainPropertyId, typeof(ClassUsesOperations.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ClassUsesOperations), "ConfigurationMode", ClassUsesOperations.ConfigurationModeDomainPropertyId, typeof(ClassUsesOperations.ConfigurationModePropertyHandler)),
				new DomainMemberInfo(typeof(ClassUsesOperations), "Singleton", ClassUsesOperations.SingletonDomainPropertyId, typeof(ClassUsesOperations.SingletonPropertyHandler)),
				new DomainMemberInfo(typeof(ClassUsesOperations), "Scope", ClassUsesOperations.ScopeDomainPropertyId, typeof(ClassUsesOperations.ScopePropertyHandler)),
				new DomainMemberInfo(typeof(DataLayerReferencesExternalComponent), "ConfigurationMode", DataLayerReferencesExternalComponent.ConfigurationModeDomainPropertyId, typeof(DataLayerReferencesExternalComponent.ConfigurationModePropertyHandler)),
				new DomainMemberInfo(typeof(DataLayerReferencesExternalComponent), "Scope", DataLayerReferencesExternalComponent.ScopeDomainPropertyId, typeof(DataLayerReferencesExternalComponent.ScopePropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(OperationHasArguments), "Operation", OperationHasArguments.OperationDomainRoleId),
				new DomainRolePlayerInfo(typeof(OperationHasArguments), "Argument", OperationHasArguments.ArgumentDomainRoleId),
				new DomainRolePlayerInfo(typeof(PackageHasTypes), "Package", PackageHasTypes.PackageDomainRoleId),
				new DomainRolePlayerInfo(typeof(PackageHasTypes), "TypeModel", PackageHasTypes.TypeModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataLayerHasPackages), "Layer", DataLayerHasPackages.LayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataLayerHasPackages), "Package", DataLayerHasPackages.PackageDomainRoleId),
				new DomainRolePlayerInfo(typeof(Association), "Source", Association.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(Association), "Target", Association.TargetDomainRoleId),
				new DomainRolePlayerInfo(typeof(CandleModelHasExternalComponents), "CandleModel", CandleModelHasExternalComponents.CandleModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(CandleModelHasExternalComponents), "ExternalComponent", CandleModelHasExternalComponents.ExternalComponentDomainRoleId),
				new DomainRolePlayerInfo(typeof(ScenarioHasUIView), "Scenario", ScenarioHasUIView.ScenarioDomainRoleId),
				new DomainRolePlayerInfo(typeof(ScenarioHasUIView), "View", ScenarioHasUIView.ViewDomainRoleId),
				new DomainRolePlayerInfo(typeof(AppWorkflowLayerHasScenarios), "Layer", AppWorkflowLayerHasScenarios.LayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(AppWorkflowLayerHasScenarios), "Scenario", AppWorkflowLayerHasScenarios.ScenarioDomainRoleId),
				new DomainRolePlayerInfo(typeof(Action), "ViewSource", Action.ViewSourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(Action), "ViewTarget", Action.ViewTargetDomainRoleId),
				new DomainRolePlayerInfo(typeof(EnumHasValues), "Parent", EnumHasValues.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(EnumHasValues), "Value", EnumHasValues.ValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasProperties), "Parent", EntityHasProperties.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasProperties), "Property", EntityHasProperties.PropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasDependencyProperties), "Parent", ElementHasDependencyProperties.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasDependencyProperties), "DependencyProperty", ElementHasDependencyProperties.DependencyPropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(AssemblyReferencesAssemblies), "TargetAssembly", AssemblyReferencesAssemblies.TargetAssemblyDomainRoleId),
				new DomainRolePlayerInfo(typeof(AssemblyReferencesAssemblies), "SourceAssembly", AssemblyReferencesAssemblies.SourceAssemblyDomainRoleId),
				new DomainRolePlayerInfo(typeof(AssociationHasProperties), "Association", AssociationHasProperties.AssociationDomainRoleId),
				new DomainRolePlayerInfo(typeof(AssociationHasProperties), "DependencyProperty", AssociationHasProperties.DependencyPropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(ActionHasDependencyProperties), "Action", ActionHasDependencyProperties.ActionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ActionHasDependencyProperties), "DependencyProperty", ActionHasDependencyProperties.DependencyPropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(AssociationHasForeignKeys), "Association", AssociationHasForeignKeys.AssociationDomainRoleId),
				new DomainRolePlayerInfo(typeof(AssociationHasForeignKeys), "ForeignKey", AssociationHasForeignKeys.ForeignKeyDomainRoleId),
				new DomainRolePlayerInfo(typeof(ForeignKeyReferencesProperty), "ForeignKey", ForeignKeyReferencesProperty.ForeignKeyDomainRoleId),
				new DomainRolePlayerInfo(typeof(ForeignKeyReferencesProperty), "Property", ForeignKeyReferencesProperty.PropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(ForeignKeyReferencesPrimaryKey), "ForeignKey", ForeignKeyReferencesPrimaryKey.ForeignKeyDomainRoleId),
				new DomainRolePlayerInfo(typeof(ForeignKeyReferencesPrimaryKey), "Property", ForeignKeyReferencesPrimaryKey.PropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(TypeWithOperationsHasOperations), "Parent", TypeWithOperationsHasOperations.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(TypeWithOperationsHasOperations), "Operation", TypeWithOperationsHasOperations.OperationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelRootHasComponent), "CandleModel", ModelRootHasComponent.CandleModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelRootHasComponent), "Component", ModelRootHasComponent.ComponentDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExternalServiceReference), "Client", ExternalServiceReference.ClientDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExternalServiceReference), "ExternalPublicPort", ExternalServiceReference.ExternalPublicPortDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayerHasArtifacts), "AbstractLayer", LayerHasArtifacts.AbstractLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayerHasArtifacts), "Artifact", LayerHasArtifacts.ArtifactDomainRoleId),
				new DomainRolePlayerInfo(typeof(InterfaceLayerHasContracts), "InterfaceLayer", InterfaceLayerHasContracts.InterfaceLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(InterfaceLayerHasContracts), "ServiceContract", InterfaceLayerHasContracts.ServiceContractDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExternalServiceReferenceHasDependencyProperties), "ExternalServiceReference", ExternalServiceReferenceHasDependencyProperties.ExternalServiceReferenceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExternalServiceReferenceHasDependencyProperties), "DependencyProperty", ExternalServiceReferenceHasDependencyProperties.DependencyPropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayerPackageContainsLayers), "LayerPackage", LayerPackageContainsLayers.LayerPackageDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayerPackageContainsLayers), "Layer", LayerPackageContainsLayers.LayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(SoftwareComponentHasLayers), "SoftwareComponent", SoftwareComponentHasLayers.SoftwareComponentDomainRoleId),
				new DomainRolePlayerInfo(typeof(SoftwareComponentHasLayers), "SoftwareLayer", SoftwareComponentHasLayers.SoftwareLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(BinaryComponentHasAssemblies), "BinaryComponent", BinaryComponentHasAssemblies.BinaryComponentDomainRoleId),
				new DomainRolePlayerInfo(typeof(BinaryComponentHasAssemblies), "DotNetAssembly", BinaryComponentHasAssemblies.DotNetAssemblyDomainRoleId),
				new DomainRolePlayerInfo(typeof(ComponentHasLayerPackages), "Component", ComponentHasLayerPackages.ComponentDomainRoleId),
				new DomainRolePlayerInfo(typeof(ComponentHasLayerPackages), "LayerPackage", ComponentHasLayerPackages.LayerPackageDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayerHasClassImplementations), "Layer", LayerHasClassImplementations.LayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayerHasClassImplementations), "ClassImplementation", LayerHasClassImplementations.ClassImplementationDomainRoleId),
				new DomainRolePlayerInfo(typeof(Implementation), "ClassImplementation", Implementation.ClassImplementationDomainRoleId),
				new DomainRolePlayerInfo(typeof(Implementation), "Contract", Implementation.ContractDomainRoleId),
				new DomainRolePlayerInfo(typeof(ClassImplementationReferencesAssociatedEntity), "ClassImplementation", ClassImplementationReferencesAssociatedEntity.ClassImplementationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ClassImplementationReferencesAssociatedEntity), "Entity", ClassImplementationReferencesAssociatedEntity.EntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImplementationHasDependencyProperties), "Implementation", ImplementationHasDependencyProperties.ImplementationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ImplementationHasDependencyProperties), "DependencyProperty", ImplementationHasDependencyProperties.DependencyPropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayerPackageReferencesInterfaceLayer), "LayerPackage", LayerPackageReferencesInterfaceLayer.LayerPackageDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayerPackageReferencesInterfaceLayer), "InterfaceLayer", LayerPackageReferencesInterfaceLayer.InterfaceLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayerHasConfigurationParts), "AbstractLayer", LayerHasConfigurationParts.AbstractLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(LayerHasConfigurationParts), "ConfigurationPart", LayerHasConfigurationParts.ConfigurationPartDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExternalComponentHasPublicPorts), "Parent", ExternalComponentHasPublicPorts.ParentDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExternalComponentHasPublicPorts), "Port", ExternalComponentHasPublicPorts.PortDomainRoleId),
				new DomainRolePlayerInfo(typeof(ScenarioUsesContracts), "Scenario", ScenarioUsesContracts.ScenarioDomainRoleId),
				new DomainRolePlayerInfo(typeof(ScenarioUsesContracts), "Service", ScenarioUsesContracts.ServiceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ClassUsesOperations), "Source", ClassUsesOperations.SourceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ClassUsesOperations), "TargetService", ClassUsesOperations.TargetServiceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ClassUsesOperationsHasDependencyProperties), "ClassUsesOperations", ClassUsesOperationsHasDependencyProperties.ClassUsesOperationsDomainRoleId),
				new DomainRolePlayerInfo(typeof(ClassUsesOperationsHasDependencyProperties), "DependencyProperty", ClassUsesOperationsHasDependencyProperties.DependencyPropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataLayerReferencesExternalComponent), "DataLayer", DataLayerReferencesExternalComponent.DataLayerDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataLayerReferencesExternalComponent), "ReferencedExternalComponent", DataLayerReferencesExternalComponent.ReferencedExternalComponentDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasSubClasses), "SuperClass", EntityHasSubClasses.SuperClassDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasSubClasses), "SubClass", EntityHasSubClasses.SubClassDomainRoleId),
				new DomainRolePlayerInfo(typeof(Generalization), "SuperClass", Generalization.SuperClassDomainRoleId),
				new DomainRolePlayerInfo(typeof(Generalization), "SubClass", Generalization.SubClassDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(71);
				createElementMap.Add(typeof(CandleModel), 0);
				createElementMap.Add(typeof(SoftwareComponent), 1);
				createElementMap.Add(typeof(BusinessLayer), 2);
				createElementMap.Add(typeof(DataAccessLayer), 3);
				createElementMap.Add(typeof(PresentationLayer), 4);
				createElementMap.Add(typeof(DataLayer), 5);
				createElementMap.Add(typeof(Argument), 6);
				createElementMap.Add(typeof(Operation), 7);
				createElementMap.Add(typeof(Package), 8);
				createElementMap.Add(typeof(Property), 9);
				createElementMap.Add(typeof(ExternalComponent), 10);
				createElementMap.Add(typeof(DependencyProperty), 11);
				createElementMap.Add(typeof(ExternalPublicPort), 12);
				createElementMap.Add(typeof(Enumeration), 13);
				createElementMap.Add(typeof(UIWorkflowLayer), 14);
				createElementMap.Add(typeof(Scenario), 15);
				createElementMap.Add(typeof(UIView), 16);
				createElementMap.Add(typeof(DotNetAssembly), 17);
				createElementMap.Add(typeof(Entity), 18);
				createElementMap.Add(typeof(EnumValue), 19);
				createElementMap.Add(typeof(Artifact), 20);
				createElementMap.Add(typeof(BinaryComponent), 21);
				createElementMap.Add(typeof(LayerPackage), 22);
				createElementMap.Add(typeof(ConfigurationPart), 23);
				createElementMap.Add(typeof(ForeignKey), 24);
				createElementMap.Add(typeof(ServiceContract), 25);
				createElementMap.Add(typeof(InterfaceLayer), 26);
				createElementMap.Add(typeof(ClassImplementation), 27);
				createElementMap.Add(typeof(Process), 28);
				createElementMap.Add(typeof(ExternalServiceContract), 29);
				createElementMap.Add(typeof(ComponentModelDiagram), 30);
				createElementMap.Add(typeof(AssociationLink), 31);
				createElementMap.Add(typeof(ActionLink), 32);
				createElementMap.Add(typeof(AssemblyReferencesAssemblyLink), 33);
				createElementMap.Add(typeof(ImplementationLink), 34);
				createElementMap.Add(typeof(ExternalServiceReferenceLink), 35);
				createElementMap.Add(typeof(ClassUsesOperationLink), 36);
				createElementMap.Add(typeof(ScenarioUsesContractsLink), 37);
				createElementMap.Add(typeof(DataLayerReferencesExternalComponentLink), 38);
				createElementMap.Add(typeof(GeneralizationLink), 39);
				createElementMap.Add(typeof(SoftwareComponentShape), 40);
				createElementMap.Add(typeof(BusinessLayerShape), 41);
				createElementMap.Add(typeof(DataAccessLayerShape), 42);
				createElementMap.Add(typeof(PresentationLayerShape), 43);
				createElementMap.Add(typeof(DataLayerShape), 44);
				createElementMap.Add(typeof(PackageShape), 45);
				createElementMap.Add(typeof(ExternalComponentShape), 46);
				createElementMap.Add(typeof(ScenarioShape), 47);
				createElementMap.Add(typeof(UiViewShape), 48);
				createElementMap.Add(typeof(UIWorkflowLayerShape), 49);
				createElementMap.Add(typeof(DotnetAssemblyShape), 50);
				createElementMap.Add(typeof(BinaryComponentShape), 51);
				createElementMap.Add(typeof(LayerPackageShape), 52);
				createElementMap.Add(typeof(InterfaceLayerShape), 53);
				createElementMap.Add(typeof(ProcessShape), 54);
				createElementMap.Add(typeof(ScenarioThumbnailShape), 55);
				createElementMap.Add(typeof(EntityShape), 56);
				createElementMap.Add(typeof(EnumTypeShape), 57);
				createElementMap.Add(typeof(ServiceContractShape), 58);
				createElementMap.Add(typeof(ClassImplementationShape), 59);
				createElementMap.Add(typeof(ExternalPublicPortShape), 60);
				createElementMap.Add(typeof(ExternalServiceContractShape), 61);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				throw new global::System.ArgumentException("elementType is not recognized as a type of domain class which belongs to this domain model.");
			}
			switch (index)
			{
				// A constructor was not generated for CandleModel because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 0: return new CandleModel(partition, propertyAssignments);
				case 1: return new SoftwareComponent(partition, propertyAssignments);
				case 2: return new BusinessLayer(partition, propertyAssignments);
				case 3: return new DataAccessLayer(partition, propertyAssignments);
				case 4: return new PresentationLayer(partition, propertyAssignments);
				case 5: return new DataLayer(partition, propertyAssignments);
				case 6: return new Argument(partition, propertyAssignments);
				case 7: return new Operation(partition, propertyAssignments);
				case 8: return new Package(partition, propertyAssignments);
				case 9: return new Property(partition, propertyAssignments);
				case 10: return new ExternalComponent(partition, propertyAssignments);
				case 11: return new DependencyProperty(partition, propertyAssignments);
				case 12: return new ExternalPublicPort(partition, propertyAssignments);
				case 13: return new Enumeration(partition, propertyAssignments);
				case 14: return new UIWorkflowLayer(partition, propertyAssignments);
				case 15: return new Scenario(partition, propertyAssignments);
				case 16: return new UIView(partition, propertyAssignments);
				case 17: return new DotNetAssembly(partition, propertyAssignments);
				case 18: return new Entity(partition, propertyAssignments);
				case 19: return new EnumValue(partition, propertyAssignments);
				case 20: return new Artifact(partition, propertyAssignments);
				case 21: return new BinaryComponent(partition, propertyAssignments);
				case 22: return new LayerPackage(partition, propertyAssignments);
				case 23: return new ConfigurationPart(partition, propertyAssignments);
				case 24: return new ForeignKey(partition, propertyAssignments);
				case 25: return new ServiceContract(partition, propertyAssignments);
				case 26: return new InterfaceLayer(partition, propertyAssignments);
				case 27: return new ClassImplementation(partition, propertyAssignments);
				case 28: return new Process(partition, propertyAssignments);
				case 29: return new ExternalServiceContract(partition, propertyAssignments);
				case 30: return new ComponentModelDiagram(partition, propertyAssignments);
				case 31: return new AssociationLink(partition, propertyAssignments);
				case 32: return new ActionLink(partition, propertyAssignments);
				case 33: return new AssemblyReferencesAssemblyLink(partition, propertyAssignments);
				case 34: return new ImplementationLink(partition, propertyAssignments);
				case 35: return new ExternalServiceReferenceLink(partition, propertyAssignments);
				case 36: return new ClassUsesOperationLink(partition, propertyAssignments);
				case 37: return new ScenarioUsesContractsLink(partition, propertyAssignments);
				case 38: return new DataLayerReferencesExternalComponentLink(partition, propertyAssignments);
				case 39: return new GeneralizationLink(partition, propertyAssignments);
				case 40: return new SoftwareComponentShape(partition, propertyAssignments);
				case 41: return new BusinessLayerShape(partition, propertyAssignments);
				case 42: return new DataAccessLayerShape(partition, propertyAssignments);
				case 43: return new PresentationLayerShape(partition, propertyAssignments);
				case 44: return new DataLayerShape(partition, propertyAssignments);
				case 45: return new PackageShape(partition, propertyAssignments);
				case 46: return new ExternalComponentShape(partition, propertyAssignments);
				case 47: return new ScenarioShape(partition, propertyAssignments);
				case 48: return new UiViewShape(partition, propertyAssignments);
				case 49: return new UIWorkflowLayerShape(partition, propertyAssignments);
				case 50: return new DotnetAssemblyShape(partition, propertyAssignments);
				case 51: return new BinaryComponentShape(partition, propertyAssignments);
				case 52: return new LayerPackageShape(partition, propertyAssignments);
				case 53: return new InterfaceLayerShape(partition, propertyAssignments);
				case 54: return new ProcessShape(partition, propertyAssignments);
				case 55: return new ScenarioThumbnailShape(partition, propertyAssignments);
				case 56: return new EntityShape(partition, propertyAssignments);
				case 57: return new EnumTypeShape(partition, propertyAssignments);
				case 58: return new ServiceContractShape(partition, propertyAssignments);
				case 59: return new ClassImplementationShape(partition, propertyAssignments);
				case 60: return new ExternalPublicPortShape(partition, propertyAssignments);
				case 61: return new ExternalServiceContractShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(40);
				createElementLinkMap.Add(typeof(OperationHasArguments), 0);
				createElementLinkMap.Add(typeof(PackageHasTypes), 1);
				createElementLinkMap.Add(typeof(DataLayerHasPackages), 2);
				createElementLinkMap.Add(typeof(Association), 3);
				createElementLinkMap.Add(typeof(CandleModelHasExternalComponents), 4);
				createElementLinkMap.Add(typeof(ScenarioHasUIView), 5);
				createElementLinkMap.Add(typeof(AppWorkflowLayerHasScenarios), 6);
				createElementLinkMap.Add(typeof(Action), 7);
				createElementLinkMap.Add(typeof(EnumHasValues), 8);
				createElementLinkMap.Add(typeof(EntityHasProperties), 9);
				createElementLinkMap.Add(typeof(ElementHasDependencyProperties), 10);
				createElementLinkMap.Add(typeof(AssemblyReferencesAssemblies), 11);
				createElementLinkMap.Add(typeof(AssociationHasProperties), 12);
				createElementLinkMap.Add(typeof(ActionHasDependencyProperties), 13);
				createElementLinkMap.Add(typeof(AssociationHasForeignKeys), 14);
				createElementLinkMap.Add(typeof(ForeignKeyReferencesProperty), 15);
				createElementLinkMap.Add(typeof(ForeignKeyReferencesPrimaryKey), 16);
				createElementLinkMap.Add(typeof(TypeWithOperationsHasOperations), 17);
				createElementLinkMap.Add(typeof(ModelRootHasComponent), 18);
				createElementLinkMap.Add(typeof(ExternalServiceReference), 19);
				createElementLinkMap.Add(typeof(LayerHasArtifacts), 20);
				createElementLinkMap.Add(typeof(InterfaceLayerHasContracts), 21);
				createElementLinkMap.Add(typeof(ExternalServiceReferenceHasDependencyProperties), 22);
				createElementLinkMap.Add(typeof(LayerPackageContainsLayers), 23);
				createElementLinkMap.Add(typeof(SoftwareComponentHasLayers), 24);
				createElementLinkMap.Add(typeof(BinaryComponentHasAssemblies), 25);
				createElementLinkMap.Add(typeof(ComponentHasLayerPackages), 26);
				createElementLinkMap.Add(typeof(LayerHasClassImplementations), 27);
				createElementLinkMap.Add(typeof(Implementation), 28);
				createElementLinkMap.Add(typeof(ClassImplementationReferencesAssociatedEntity), 29);
				createElementLinkMap.Add(typeof(ImplementationHasDependencyProperties), 30);
				createElementLinkMap.Add(typeof(LayerPackageReferencesInterfaceLayer), 31);
				createElementLinkMap.Add(typeof(LayerHasConfigurationParts), 32);
				createElementLinkMap.Add(typeof(ExternalComponentHasPublicPorts), 33);
				createElementLinkMap.Add(typeof(ScenarioUsesContracts), 34);
				createElementLinkMap.Add(typeof(ClassUsesOperations), 35);
				createElementLinkMap.Add(typeof(ClassUsesOperationsHasDependencyProperties), 36);
				createElementLinkMap.Add(typeof(DataLayerReferencesExternalComponent), 37);
				createElementLinkMap.Add(typeof(EntityHasSubClasses), 38);
				createElementLinkMap.Add(typeof(Generalization), 39);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				throw new global::System.ArgumentException("elementLinkType is not recognized as a type of domain relationship which belongs to this domain model.");
			}
			switch (index)
			{
				case 0: return new OperationHasArguments(partition, roleAssignments, propertyAssignments);
				case 1: return new PackageHasTypes(partition, roleAssignments, propertyAssignments);
				case 2: return new DataLayerHasPackages(partition, roleAssignments, propertyAssignments);
				case 3: return new Association(partition, roleAssignments, propertyAssignments);
				case 4: return new CandleModelHasExternalComponents(partition, roleAssignments, propertyAssignments);
				case 5: return new ScenarioHasUIView(partition, roleAssignments, propertyAssignments);
				case 6: return new AppWorkflowLayerHasScenarios(partition, roleAssignments, propertyAssignments);
				case 7: return new Action(partition, roleAssignments, propertyAssignments);
				case 8: return new EnumHasValues(partition, roleAssignments, propertyAssignments);
				case 9: return new EntityHasProperties(partition, roleAssignments, propertyAssignments);
				case 10: return new ElementHasDependencyProperties(partition, roleAssignments, propertyAssignments);
				case 11: return new AssemblyReferencesAssemblies(partition, roleAssignments, propertyAssignments);
				case 12: return new AssociationHasProperties(partition, roleAssignments, propertyAssignments);
				case 13: return new ActionHasDependencyProperties(partition, roleAssignments, propertyAssignments);
				case 14: return new AssociationHasForeignKeys(partition, roleAssignments, propertyAssignments);
				case 15: return new ForeignKeyReferencesProperty(partition, roleAssignments, propertyAssignments);
				case 16: return new ForeignKeyReferencesPrimaryKey(partition, roleAssignments, propertyAssignments);
				case 17: return new TypeWithOperationsHasOperations(partition, roleAssignments, propertyAssignments);
				case 18: return new ModelRootHasComponent(partition, roleAssignments, propertyAssignments);
				case 19: return new ExternalServiceReference(partition, roleAssignments, propertyAssignments);
				case 20: return new LayerHasArtifacts(partition, roleAssignments, propertyAssignments);
				case 21: return new InterfaceLayerHasContracts(partition, roleAssignments, propertyAssignments);
				case 22: return new ExternalServiceReferenceHasDependencyProperties(partition, roleAssignments, propertyAssignments);
				case 23: return new LayerPackageContainsLayers(partition, roleAssignments, propertyAssignments);
				case 24: return new SoftwareComponentHasLayers(partition, roleAssignments, propertyAssignments);
				case 25: return new BinaryComponentHasAssemblies(partition, roleAssignments, propertyAssignments);
				case 26: return new ComponentHasLayerPackages(partition, roleAssignments, propertyAssignments);
				case 27: return new LayerHasClassImplementations(partition, roleAssignments, propertyAssignments);
				case 28: return new Implementation(partition, roleAssignments, propertyAssignments);
				case 29: return new ClassImplementationReferencesAssociatedEntity(partition, roleAssignments, propertyAssignments);
				case 30: return new ImplementationHasDependencyProperties(partition, roleAssignments, propertyAssignments);
				case 31: return new LayerPackageReferencesInterfaceLayer(partition, roleAssignments, propertyAssignments);
				case 32: return new LayerHasConfigurationParts(partition, roleAssignments, propertyAssignments);
				case 33: return new ExternalComponentHasPublicPorts(partition, roleAssignments, propertyAssignments);
				case 34: return new ScenarioUsesContracts(partition, roleAssignments, propertyAssignments);
				case 35: return new ClassUsesOperations(partition, roleAssignments, propertyAssignments);
				case 36: return new ClassUsesOperationsHasDependencyProperties(partition, roleAssignments, propertyAssignments);
				case 37: return new DataLayerReferencesExternalComponent(partition, roleAssignments, propertyAssignments);
				case 38: return new EntityHasSubClasses(partition, roleAssignments, propertyAssignments);
				case 39: return new Generalization(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CandleDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (CandleDomainModel.resourceManager == null)
				{
					CandleDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(CandleDomainModel).Assembly);
				}
				return CandleDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return CandleDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return CandleDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (CandleDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new CandleCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					CandleDomainModel.copyClosure = copyFilter;
				}
				return CandleDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (CandleDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new CandleDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					CandleDomainModel.removeClosure = removeFilter;
				}
				return CandleDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::DSLFactory.Candle.SystemModel.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::DSLFactory.Candle.SystemModel.DecoratorPropertyChanged));
			ruleManager.EnableRule(typeof(global::DSLFactory.Candle.SystemModel.ConnectorRolePlayerChanged));
			ruleManager.EnableRule(typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemAddRule));
			ruleManager.EnableRule(typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemDeleteRule));
			ruleManager.EnableRule(typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemRolePlayerChangeRule));
			ruleManager.EnableRule(typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.EnableRule(typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemChangeRule));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::DSLFactory.Candle.SystemModel.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::DSLFactory.Candle.SystemModel.DecoratorPropertyChanged));
			ruleManager.DisableRule(typeof(global::DSLFactory.Candle.SystemModel.ConnectorRolePlayerChanged));
			ruleManager.DisableRule(typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemAddRule));
			ruleManager.DisableRule(typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemDeleteRule));
			ruleManager.DisableRule(typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemRolePlayerChangeRule));
			ruleManager.DisableRule(typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.DisableRule(typeof(global::DSLFactory.Candle.SystemModel.CompartmentItemChangeRule));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class CandleDeleteClosure : CandleDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CandleDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	public partial class CandleDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Generic.Dictionary<global::System.Guid, bool> domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public CandleDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.OperationHasArguments.ArgumentDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.PackageHasTypes.TypeModelDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.PackageDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.ExternalComponentDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.ViewDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.ScenarioDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.EntityHasProperties.PropertyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.DependencyPropertyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.AssociationHasProperties.DependencyPropertyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.ForeignKeyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.OperationDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.ComponentDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.LayerHasArtifacts.ArtifactDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.ServiceContractDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.DependencyPropertyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareLayerDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.DotNetAssemblyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.LayerPackageDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.ClassImplementationDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.DependencyPropertyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.ConfigurationPartDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.PortDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.DependencyPropertyDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			return this.DomainRoles.ContainsKey(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Generic.Dictionary<global::System.Guid, bool> DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Generic.Dictionary<global::System.Guid, bool>();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class CandleCopyClosure : CandleCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CandleCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	public partial class CandleCopyClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Generic.Dictionary<global::System.Guid, bool> domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public CandleCopyClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.OperationHasArguments.ArgumentDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.PackageHasTypes.TypeModelDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.PackageDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.ExternalComponentDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.ViewDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.ScenarioDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.EntityHasProperties.PropertyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.DependencyPropertyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.AssociationHasProperties.DependencyPropertyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.ForeignKeyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.OperationDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.ComponentDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.LayerHasArtifacts.ArtifactDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.ServiceContractDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.DependencyPropertyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareLayerDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.DotNetAssemblyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.LayerPackageDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.ClassImplementationDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.DependencyPropertyDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.ConfigurationPartDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.PortDomainRoleId, true);
			DomainRoles.Add(global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.DependencyPropertyDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return this.DomainRoles.ContainsKey(sourceRoleInfo.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			return this.DomainRoles.ContainsKey(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Generic.Dictionary<global::System.Guid, bool> DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Generic.Dictionary<global::System.Guid, bool>();
				}
				return this.domainRoles;
			}
		}
	
	}
	#endregion
		
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainEnumeration: Multiplicity
	/// Description for DSLFactory.Candle.SystemModel.Multiplicity
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum Multiplicity
	{
		/// <summary>
		/// One
		/// Description for DSLFactory.Candle.SystemModel.Multiplicity.One
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Multiplicity/One.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		One,
		/// <summary>
		/// OneMany
		/// Description for DSLFactory.Candle.SystemModel.Multiplicity.OneMany
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Multiplicity/OneMany.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		OneMany,
		/// <summary>
		/// ZeroMany
		/// Description for DSLFactory.Candle.SystemModel.Multiplicity.ZeroMany
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Multiplicity/ZeroMany.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		ZeroMany,
		/// <summary>
		/// ZeroOne
		/// Description for DSLFactory.Candle.SystemModel.Multiplicity.ZeroOne
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Multiplicity/ZeroOne.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		ZeroOne,
		/// <summary>
		/// NotApplicable
		/// Description for DSLFactory.Candle.SystemModel.Multiplicity.NotApplicable
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Multiplicity/NotApplicable.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		NotApplicable,
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainEnumeration: ArtifactType
	/// Artifact type
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ArtifactType
	{
		/// <summary>
		/// Assembly
		/// Description for DSLFactory.Candle.SystemModel.ArtifactType.Assembly
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ArtifactType/Assembly.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Assembly,
		/// <summary>
		/// Content
		/// Description for DSLFactory.Candle.SystemModel.ArtifactType.Content
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ArtifactType/Content.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Content = 2,
		/// <summary>
		/// AssemblyInGac
		/// Assembly dans le GAC
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ArtifactType/AssemblyInGac.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		AssemblyInGac = 1,
		/// <summary>
		/// DotNetFramework
		/// Description for DSLFactory.Candle.SystemModel.ArtifactType.DotNetFramework
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ArtifactType/DotNetFramework.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		DotNetFramework = 4,
		/// <summary>
		/// Project
		/// Description for DSLFactory.Candle.SystemModel.ArtifactType.Project
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ArtifactType/Project.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Project = 3,
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainEnumeration: AssociationSort
	/// Description for DSLFactory.Candle.SystemModel.AssociationSort
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum AssociationSort
	{
		/// <summary>
		/// Composition
		/// Description for DSLFactory.Candle.SystemModel.AssociationSort.Composition
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssociationSort/Composition.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Composition = 3,
		/// <summary>
		/// Aggregation
		/// Description for DSLFactory.Candle.SystemModel.AssociationSort.Aggregation
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssociationSort/Aggregation.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Aggregation = 1,
		/// <summary>
		/// Normal
		/// Description for DSLFactory.Candle.SystemModel.AssociationSort.Normal
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssociationSort/Normal.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Normal = 2,
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainEnumeration: Visibility
	/// Visibility
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum Visibility
	{
		/// <summary>
		/// Private
		/// Description for DSLFactory.Candle.SystemModel.Visibility.Private
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Visibility/Private.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Private,
		/// <summary>
		/// Public
		/// Description for DSLFactory.Candle.SystemModel.Visibility.Public
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Visibility/Public.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Public,
		/// <summary>
		/// Internal
		/// Description for DSLFactory.Candle.SystemModel.Visibility.Internal
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Visibility/Internal.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Internal,
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainEnumeration: ArgumentDirection
	/// Argument direction
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ArgumentDirection
	{
		/// <summary>
		/// InOut
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ArgumentDirection/InOut.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		InOut,
		/// <summary>
		/// In
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ArgumentDirection/In.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		In,
		/// <summary>
		/// Out
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ArgumentDirection/Out.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Out,
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainEnumeration: DatabaseType
	/// Description for DSLFactory.Candle.SystemModel.DatabaseType
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum DatabaseType
	{
		/// <summary>
		/// Table
		/// Description for DSLFactory.Candle.SystemModel.DatabaseType.Table
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DatabaseType/Table.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Table,
		/// <summary>
		/// StoredProcedure
		/// Description for DSLFactory.Candle.SystemModel.DatabaseType.StoredProcedure
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DatabaseType/StoredProcedure.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		StoredProcedure,
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainEnumeration: HostingContext
	/// Description for DSLFactory.Candle.SystemModel.HostingContext
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum HostingContext
	{
		/// <summary>
		/// None
		/// Cette couche n'est pas hostÃ©e
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.HostingContext/None.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		None,
		/// <summary>
		/// Standalone
		/// Description for DSLFactory.Candle.SystemModel.HostingContext.Standalone
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.HostingContext/Standalone.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Standalone,
		/// <summary>
		/// Web
		/// Description for DSLFactory.Candle.SystemModel.HostingContext.Web
		/// </summary>
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.HostingContext/Web.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		Web,
	}
}

