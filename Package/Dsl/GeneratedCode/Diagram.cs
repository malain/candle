//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// Double-derived base class for DomainClass ComponentModelDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ComponentModelDiagram.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ComponentModelDiagram.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4aaab11a-70bc-416d-a87f-01da4a8d8817")]
	public abstract partial class ComponentModelDiagramBase : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::DSLFactory.Candle.SystemModel.CandleToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Port shape support
		public override bool SupportsPorts
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Compartment support
		/// <summary>
		/// Whether compartment items change events are subscribed to.
		/// </summary>
		private bool subscribedCompartmentItemsEvents;
		
		/// <summary>
		/// Subscribe to events fired when compartment items changes.
		/// </summary>
		public void SubscribeCompartmentItemsEvents()
		{
			if (!subscribedCompartmentItemsEvents && this.Store != null)
			{
				subscribedCompartmentItemsEvents = true;
				this.Store.EventManagerDirectory.ElementAdded.Add(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Add(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Add(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
			}
		}
		
		/// <summary>
		/// Unsubscribe to events fired when compartment items changes.
		/// </summary>
		public void UnsubscribeCompartmentItemsEvents()
		{
			if (subscribedCompartmentItemsEvents)
			{
				this.Store.EventManagerDirectory.ElementAdded.Remove(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Remove(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Remove(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
				subscribedCompartmentItemsEvents = false;
			}
		}
		
		#region Event handlers
		/// <summary>
		/// Event for element added.
		/// </summary>
		private void CompartmentItemAdded(object sender, DslModeling::ElementAddedEventArgs e)
		{
			CompartmentItemAddRule.ElementAdded(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for element deleted.
		/// </summary>
		private void CompartmentItemDeleted(object sender, DslModeling::ElementDeletedEventArgs e)
		{
			CompartmentItemDeleteRule.ElementDeleted(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for element property changed.
		/// </summary>
		private void CompartmentItemPropertyChanged(object sender, DslModeling::ElementPropertyChangedEventArgs e)
		{
			CompartmentItemChangeRule.ElementPropertyChanged(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for role-player changed.
		/// </summary>
		private void CompartmentItemRolePlayerChanged(object sender, DslModeling::RolePlayerChangedEventArgs e)
		{
			CompartmentItemRolePlayerChangeRule.RolePlayerChanged(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for role-player order changed.
		/// </summary>
		private void CompartmentItemRolePlayerOrderChanged(object sender, DslModeling::RolePlayerOrderChangedEventArgs e)
		{
			CompartmentItemRolePlayerPositionChangeRule.RolePlayerPositionChanged(e, true /* repaint only */);
		}
		#endregion
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			if(connector is global::DSLFactory.Candle.SystemModel.ClassUsesOperationLink)
			{
				// Method:
				// private DslDiagrams::NodeShape GetTargetShapeForClassUsesOperationLink(ClassUsesOperationLink connector)
				// {
				// }
				// must be implemented in a partial class of ComponentModelDiagramBase.  Given an instance of ClassUsesOperationLink,
				// the method should return the source shape for the connector.  This method should not return null.
				targetShape = GetTargetShapeForClassUsesOperationLink((global::DSLFactory.Candle.SystemModel.ClassUsesOperationLink)connector);
			}
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Get the source role-player of the link that would be mapped by the given connector
		/// </summary>
		/// <param name="connector">The given connector.</param>
		/// <returns>The source role-player of the link that would be mapped by the given connector.</returns>
		protected override DslModeling::ModelElement GetSourceRolePlayerForLinkMappedByConnector(DslDiagrams::BinaryLinkShape connector)
		{
			// Fallthrough to base behavior
			return base.GetSourceRolePlayerForLinkMappedByConnector(connector);
		}
		
		/// <summary>
		/// Get the target role-player of the link that would be mapped by the given connector
		/// </summary>
		/// <param name="connector">The given connector.</param>
		/// <returns>The target role-player of the link that would be mapped by the given connector.</returns>
		protected override DslModeling::ModelElement GetTargetRolePlayerForLinkMappedByConnector(DslDiagrams::BinaryLinkShape connector)
		{
			ClassUsesOperationLink instanceOfClassUsesOperationLink = connector as ClassUsesOperationLink;
			if (instanceOfClassUsesOperationLink != null)
			{
				// The following method needs to be added in a partial class
				//   private DslModeling::ModelElement GetTargetRolePlayerForLinkMappedByClassUsesOperationLink(ClassUsesOperationLink connector);
				return this.GetTargetRolePlayerForLinkMappedByClassUsesOperationLink(instanceOfClassUsesOperationLink);
			}
		
			// Fallthrough to base behavior
			return base.GetTargetRolePlayerForLinkMappedByConnector(connector);
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::DSLFactory.Candle.SystemModel.PresentationLayer)
			{
				global::DSLFactory.Candle.SystemModel.PresentationLayerShape newShape = new global::DSLFactory.Candle.SystemModel.PresentationLayerShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.DataAccessLayer)
			{
				global::DSLFactory.Candle.SystemModel.DataAccessLayerShape newShape = new global::DSLFactory.Candle.SystemModel.DataAccessLayerShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.UIWorkflowLayer)
			{
				global::DSLFactory.Candle.SystemModel.UIWorkflowLayerShape newShape = new global::DSLFactory.Candle.SystemModel.UIWorkflowLayerShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.BusinessLayer)
			{
				global::DSLFactory.Candle.SystemModel.BusinessLayerShape newShape = new global::DSLFactory.Candle.SystemModel.BusinessLayerShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.DataLayer)
			{
				global::DSLFactory.Candle.SystemModel.DataLayerShape newShape = new global::DSLFactory.Candle.SystemModel.DataLayerShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.Entity)
			{
				global::DSLFactory.Candle.SystemModel.EntityShape newShape = new global::DSLFactory.Candle.SystemModel.EntityShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.Process)
			{
				global::DSLFactory.Candle.SystemModel.ProcessShape newShape = new global::DSLFactory.Candle.SystemModel.ProcessShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.Enumeration)
			{
				global::DSLFactory.Candle.SystemModel.EnumTypeShape newShape = new global::DSLFactory.Candle.SystemModel.EnumTypeShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.InterfaceLayer)
			{
				global::DSLFactory.Candle.SystemModel.InterfaceLayerShape newShape = new global::DSLFactory.Candle.SystemModel.InterfaceLayerShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.SoftwareComponent)
			{
				global::DSLFactory.Candle.SystemModel.SoftwareComponentShape newShape = new global::DSLFactory.Candle.SystemModel.SoftwareComponentShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.DotNetAssembly)
			{
				global::DSLFactory.Candle.SystemModel.DotnetAssemblyShape newShape = new global::DSLFactory.Candle.SystemModel.DotnetAssemblyShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.Scenario)
			{
				global::DSLFactory.Candle.SystemModel.ScenarioShape newShape = new global::DSLFactory.Candle.SystemModel.ScenarioShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.ServiceContract)
			{
				global::DSLFactory.Candle.SystemModel.ServiceContractShape newShape = new global::DSLFactory.Candle.SystemModel.ServiceContractShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.BinaryComponent)
			{
				global::DSLFactory.Candle.SystemModel.BinaryComponentShape newShape = new global::DSLFactory.Candle.SystemModel.BinaryComponentShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.ExternalServiceContract)
			{
				global::DSLFactory.Candle.SystemModel.ExternalServiceContractShape newShape = new global::DSLFactory.Candle.SystemModel.ExternalServiceContractShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.ClassImplementation)
			{
				global::DSLFactory.Candle.SystemModel.ClassImplementationShape newShape = new global::DSLFactory.Candle.SystemModel.ClassImplementationShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.Package)
			{
				global::DSLFactory.Candle.SystemModel.PackageShape newShape = new global::DSLFactory.Candle.SystemModel.PackageShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.UIView)
			{
				global::DSLFactory.Candle.SystemModel.UiViewShape newShape = new global::DSLFactory.Candle.SystemModel.UiViewShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.ExternalPublicPort)
			{
				global::DSLFactory.Candle.SystemModel.ExternalPublicPortShape newShape = new global::DSLFactory.Candle.SystemModel.ExternalPublicPortShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.ExternalComponent)
			{
				global::DSLFactory.Candle.SystemModel.ExternalComponentShape newShape = new global::DSLFactory.Candle.SystemModel.ExternalComponentShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.LayerPackage)
			{
				global::DSLFactory.Candle.SystemModel.LayerPackageShape newShape = new global::DSLFactory.Candle.SystemModel.LayerPackageShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.Association)
			{
				global::DSLFactory.Candle.SystemModel.AssociationLink newShape = new global::DSLFactory.Candle.SystemModel.AssociationLink(this.Partition);
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.Action)
			{
				global::DSLFactory.Candle.SystemModel.ActionLink newShape = new global::DSLFactory.Candle.SystemModel.ActionLink(this.Partition);
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies)
			{
				global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblyLink newShape = new global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblyLink(this.Partition);
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.Implementation)
			{
				global::DSLFactory.Candle.SystemModel.ImplementationLink newShape = new global::DSLFactory.Candle.SystemModel.ImplementationLink(this.Partition);
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.ExternalServiceReference)
			{
				global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceLink newShape = new global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceLink(this.Partition);
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts)
			{
				global::DSLFactory.Candle.SystemModel.ScenarioUsesContractsLink newShape = new global::DSLFactory.Candle.SystemModel.ScenarioUsesContractsLink(this.Partition);
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.ClassUsesOperations)
			{
				global::DSLFactory.Candle.SystemModel.ClassUsesOperationLink newShape = new global::DSLFactory.Candle.SystemModel.ClassUsesOperationLink(this.Partition);
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent)
			{
				global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponentLink newShape = new global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponentLink(this.Partition);
				return newShape;
			}
			if(element is global::DSLFactory.Candle.SystemModel.EntityHasSubClasses)
			{
				global::DSLFactory.Candle.SystemModel.GeneralizationLink newShape = new global::DSLFactory.Candle.SystemModel.GeneralizationLink(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::DSLFactory.Candle.SystemModel.DataAccessLayerShape.DecoratorsInitialized += DataAccessLayerShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.PresentationLayerShape.DecoratorsInitialized += PresentationLayerShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.DataLayerShape.DecoratorsInitialized += DataLayerShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.PackageShape.DecoratorsInitialized += PackageShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.EnumTypeShape.DecoratorsInitialized += EnumTypeShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.EntityShape.DecoratorsInitialized += EntityShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.ExternalPublicPortShape.DecoratorsInitialized += ExternalPublicPortShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.BusinessLayerShape.DecoratorsInitialized += BusinessLayerShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.UiViewShape.DecoratorsInitialized += UiViewShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.ScenarioShape.DecoratorsInitialized += ScenarioShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.ScenarioThumbnailShape.DecoratorsInitialized += ScenarioThumbnailShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.UIWorkflowLayerShape.DecoratorsInitialized += UIWorkflowLayerShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.DotnetAssemblyShape.DecoratorsInitialized += DotnetAssemblyShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.SoftwareComponentShape.DecoratorsInitialized += SoftwareComponentShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.InterfaceLayerShape.DecoratorsInitialized += InterfaceLayerShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.ServiceContractShape.DecoratorsInitialized += ServiceContractShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.ClassImplementationShape.DecoratorsInitialized += ClassImplementationShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.ExternalServiceContractShape.DecoratorsInitialized += ExternalServiceContractShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.ExternalComponentShape.DecoratorsInitialized += ExternalComponentShapeDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.AssociationLink.DecoratorsInitialized += AssociationLinkDecoratorMap.OnDecoratorsInitialized;
			global::DSLFactory.Candle.SystemModel.ActionLink.DecoratorsInitialized += ActionLinkDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for DataAccessLayerShape.
		/// </summary>
		internal static partial class DataAccessLayerShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for DataAccessLayerShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for PresentationLayerShape.
		/// </summary>
		internal static partial class PresentationLayerShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for PresentationLayerShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for DataLayerShape.
		/// </summary>
		internal static partial class DataLayerShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for DataLayerShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for PackageShape.
		/// </summary>
		internal static partial class PackageShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for PackageShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for EnumTypeShape.
		/// </summary>
		internal static partial class EnumTypeShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for EnumTypeShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for EntityShape.
		/// </summary>
		internal static partial class EntityShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for EntityShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ExternalPublicPortShape.
		/// </summary>
		internal static partial class ExternalPublicPortShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ExternalPublicPortShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for BusinessLayerShape.
		/// </summary>
		internal static partial class BusinessLayerShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for BusinessLayerShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for UiViewShape.
		/// </summary>
		internal static partial class UiViewShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for UiViewShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ScenarioShape.
		/// </summary>
		internal static partial class ScenarioShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ScenarioShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ScenarioThumbnailShape.
		/// </summary>
		internal static partial class ScenarioThumbnailShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ScenarioThumbnailShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				ScenarioShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for UIWorkflowLayerShape.
		/// </summary>
		internal static partial class UIWorkflowLayerShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for UIWorkflowLayerShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for DotnetAssemblyShape.
		/// </summary>
		internal static partial class DotnetAssemblyShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for DotnetAssemblyShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.DotNetAssembly.VisibilityDomainPropertyId);
				propertyInfo.FilteringValues.Add("Public");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "IconDecorator1").AssociateVisibilityWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for SoftwareComponentShape.
		/// </summary>
		internal static partial class SoftwareComponentShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for SoftwareComponentShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "HeaderText").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for InterfaceLayerShape.
		/// </summary>
		internal static partial class InterfaceLayerShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for InterfaceLayerShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ServiceContractShape.
		/// </summary>
		internal static partial class ServiceContractShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ServiceContractShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextDecorator1").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ClassImplementationShape.
		/// </summary>
		internal static partial class ClassImplementationShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ClassImplementationShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextDecorator1").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ExternalServiceContractShape.
		/// </summary>
		internal static partial class ExternalServiceContractShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ExternalServiceContractShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ExternalComponentShape.
		/// </summary>
		internal static partial class ExternalComponentShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ExternalComponentShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.ExternalComponent.IsLastVersionDomainPropertyId);
				propertyInfo.FilteringValues.Add("False");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "IsLastVersionDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.ExternalComponent.VersionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "VersionDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AssociationLink.
		/// </summary>
		internal static partial class AssociationLinkDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AssociationLink.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.Association.SourceRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.Association.TargetRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.Association.SourceMultiplicityDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceMultiplicityDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.Association.TargetMultiplicityDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetMultiplicityDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ActionLink.
		/// </summary>
		internal static partial class ActionLinkDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ActionLink.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::DSLFactory.Candle.SystemModel.Action.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		#region Connect actions
		private global::DSLFactory.Candle.SystemModel.ReferenceConnectAction referenceConnectAction;
		private global::DSLFactory.Candle.SystemModel.AssociationConnectAction associationConnectAction;
		private global::DSLFactory.Candle.SystemModel.GeneralizationConnectAction generalizationConnectAction;
		private global::DSLFactory.Candle.SystemModel.ActionConnectAction actionConnectAction;
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (activeView.SelectedToolboxItemSupportsFilterString(global::DSLFactory.Candle.SystemModel.CandleToolboxHelper.ReferenceFilterString))
				{
					if (this.referenceConnectAction == null)
					{
						this.referenceConnectAction = new global::DSLFactory.Candle.SystemModel.ReferenceConnectAction(this);
						this.referenceConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.referenceConnectAction;
				} 
				else if (activeView.SelectedToolboxItemSupportsFilterString(global::DSLFactory.Candle.SystemModel.CandleToolboxHelper.AssociationFilterString))
				{
					if (this.associationConnectAction == null)
					{
						this.associationConnectAction = new global::DSLFactory.Candle.SystemModel.AssociationConnectAction(this);
						this.associationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.associationConnectAction;
				} 
				else if (activeView.SelectedToolboxItemSupportsFilterString(global::DSLFactory.Candle.SystemModel.CandleToolboxHelper.GeneralizationFilterString))
				{
					if (this.generalizationConnectAction == null)
					{
						this.generalizationConnectAction = new global::DSLFactory.Candle.SystemModel.GeneralizationConnectAction(this);
						this.generalizationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.generalizationConnectAction;
				} 
				else if (activeView.SelectedToolboxItemSupportsFilterString(global::DSLFactory.Candle.SystemModel.CandleToolboxHelper.ActionFilterString))
				{
					if (this.actionConnectAction == null)
					{
						this.actionConnectAction = new global::DSLFactory.Candle.SystemModel.ActionConnectAction(this);
						this.actionConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.actionConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					pointArgs.DiagramClientView.ActiveMouseAction = action;
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				activeView.Toolbox.SelectedToolboxItemUsed();
			}
		}
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.referenceConnectAction != null)
					{
						this.referenceConnectAction.Dispose();
						this.referenceConnectAction = null;
					}
					if(this.associationConnectAction != null)
					{
						this.associationConnectAction.Dispose();
						this.associationConnectAction = null;
					}
					if(this.generalizationConnectAction != null)
					{
						this.generalizationConnectAction.Dispose();
						this.generalizationConnectAction = null;
					}
					if(this.actionConnectAction != null)
					{
						this.actionConnectAction.Dispose();
						this.actionConnectAction = null;
					}
					this.UnsubscribeCompartmentItemsEvents();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ComponentModelDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4aaab11a, 0x70bc, 0x416d, 0xa8, 0x7f, 0x01, 0xda, 0x4a, 0x8d, 0x88, 0x17);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ComponentModelDiagramBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
	/// <summary>
	/// DomainClass ComponentModelDiagram
	/// Base diagram for ComponentModelDiagram
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class ComponentModelDiagram : ComponentModelDiagramBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ComponentModelDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ComponentModelDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.UIWorkflowLayer), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.BusinessLayer), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.PresentationLayer), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.DataAccessLayer), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Enumeration), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.InterfaceLayer), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Process), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.DataLayer), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Entity), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.BinaryComponent), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.ExternalServiceContract), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority + 1, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.ClassImplementation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.ServiceContract), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.SoftwareComponent), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.DotNetAssembly), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Scenario), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.ExternalPublicPort), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority + 1, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.ExternalComponent), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Package), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.UIView), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.LayerPackage), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.ClassUsesOperations), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.EntityHasSubClasses), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.ExternalServiceReference), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Action), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Association), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Implementation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : DslModeling::AddRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (childElement.IsDeleted)
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is global::DSLFactory.Candle.SystemModel.ClassUsesOperations)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForClassUsesOperations(ClassUsesOperations childLink)
					// {
					// }
					// must be implemented in a partial class of DSLFactory.Candle.SystemModel.FixUpDiagram.  Given a child element link,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the connector created for this child.  If no connector should be created, the method should return null.
					parentElement = GetParentForClassUsesOperations((global::DSLFactory.Candle.SystemModel.ClassUsesOperations)childElement);
				} else
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.UIWorkflowLayer)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForUIWorkflowLayer(UIWorkflowLayer childElement)
					// {
					// }
					// must be implemented in a partial class of DSLFactory.Candle.SystemModel.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForUIWorkflowLayer((global::DSLFactory.Candle.SystemModel.UIWorkflowLayer)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.BusinessLayer)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForBusinessLayer(BusinessLayer childElement)
					// {
					// }
					// must be implemented in a partial class of DSLFactory.Candle.SystemModel.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForBusinessLayer((global::DSLFactory.Candle.SystemModel.BusinessLayer)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.PresentationLayer)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForPresentationLayer(PresentationLayer childElement)
					// {
					// }
					// must be implemented in a partial class of DSLFactory.Candle.SystemModel.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForPresentationLayer((global::DSLFactory.Candle.SystemModel.PresentationLayer)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.DataAccessLayer)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForDataAccessLayer(DataAccessLayer childElement)
					// {
					// }
					// must be implemented in a partial class of DSLFactory.Candle.SystemModel.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForDataAccessLayer((global::DSLFactory.Candle.SystemModel.DataAccessLayer)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.Enumeration)
				{
					parentElement = GetParentForEnumeration((global::DSLFactory.Candle.SystemModel.Enumeration)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.InterfaceLayer)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForInterfaceLayer(InterfaceLayer childElement)
					// {
					// }
					// must be implemented in a partial class of DSLFactory.Candle.SystemModel.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForInterfaceLayer((global::DSLFactory.Candle.SystemModel.InterfaceLayer)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.Process)
				{
					parentElement = GetParentForProcess((global::DSLFactory.Candle.SystemModel.Process)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.DataLayer)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForDataLayer(DataLayer childElement)
					// {
					// }
					// must be implemented in a partial class of DSLFactory.Candle.SystemModel.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForDataLayer((global::DSLFactory.Candle.SystemModel.DataLayer)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.Entity)
				{
					parentElement = GetParentForEntity((global::DSLFactory.Candle.SystemModel.Entity)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.BinaryComponent)
				{
					parentElement = GetParentForBinaryComponent((global::DSLFactory.Candle.SystemModel.BinaryComponent)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.ExternalServiceContract)
				{
					parentElement = GetParentForExternalServiceContract((global::DSLFactory.Candle.SystemModel.ExternalServiceContract)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.ClassImplementation)
				{
					parentElement = GetParentForClassImplementation((global::DSLFactory.Candle.SystemModel.ClassImplementation)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.ServiceContract)
				{
					parentElement = GetParentForServiceContract((global::DSLFactory.Candle.SystemModel.ServiceContract)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.SoftwareComponent)
				{
					parentElement = GetParentForSoftwareComponent((global::DSLFactory.Candle.SystemModel.SoftwareComponent)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.DotNetAssembly)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForDotNetAssembly(DotNetAssembly childElement)
					// {
					// }
					// must be implemented in a partial class of DSLFactory.Candle.SystemModel.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForDotNetAssembly((global::DSLFactory.Candle.SystemModel.DotNetAssembly)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.Scenario)
				{
					parentElement = GetParentForScenario((global::DSLFactory.Candle.SystemModel.Scenario)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.ExternalPublicPort)
				{
					parentElement = GetParentForExternalPublicPort((global::DSLFactory.Candle.SystemModel.ExternalPublicPort)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.ExternalComponent)
				{
					parentElement = GetParentForExternalComponent((global::DSLFactory.Candle.SystemModel.ExternalComponent)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.Package)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForPackage(Package childElement)
					// {
					// }
					// must be implemented in a partial class of DSLFactory.Candle.SystemModel.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForPackage((global::DSLFactory.Candle.SystemModel.Package)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.UIView)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForUIView(UIView childElement)
					// {
					// }
					// must be implemented in a partial class of DSLFactory.Candle.SystemModel.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForUIView((global::DSLFactory.Candle.SystemModel.UIView)childElement);
				} else
				if(childElement is global::DSLFactory.Candle.SystemModel.LayerPackage)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForLayerPackage(LayerPackage childElement)
					// {
					// }
					// must be implemented in a partial class of DSLFactory.Candle.SystemModel.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForLayerPackage((global::DSLFactory.Candle.SystemModel.LayerPackage)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::DSLFactory.Candle.SystemModel.Package GetParentForEnumeration( global::DSLFactory.Candle.SystemModel.DataType root )
			{
				// Segments 0 and 1
				global::DSLFactory.Candle.SystemModel.Package result = root.Package;
				if ( result == null ) return null;
				return result;
			}
			public static global::DSLFactory.Candle.SystemModel.Package GetParentForEntity( global::DSLFactory.Candle.SystemModel.DataType root )
			{
				// Segments 0 and 1
				global::DSLFactory.Candle.SystemModel.Package result = root.Package;
				if ( result == null ) return null;
				return result;
			}
			public static global::DSLFactory.Candle.SystemModel.ExternalComponent GetParentForExternalPublicPort( global::DSLFactory.Candle.SystemModel.ExternalPublicPort root )
			{
				// Segments 0 and 1
				global::DSLFactory.Candle.SystemModel.ExternalComponent result = root.Parent;
				if ( result == null ) return null;
				return result;
			}
			public static global::DSLFactory.Candle.SystemModel.UIWorkflowLayer GetParentForScenario( global::DSLFactory.Candle.SystemModel.Scenario root )
			{
				// Segments 0 and 1
				global::DSLFactory.Candle.SystemModel.UIWorkflowLayer result = root.Layer;
				if ( result == null ) return null;
				return result;
			}
			public static global::DSLFactory.Candle.SystemModel.CandleModel GetParentForSoftwareComponent( global::DSLFactory.Candle.SystemModel.Component root )
			{
				// Segments 0 and 1
				global::DSLFactory.Candle.SystemModel.CandleModel result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::DSLFactory.Candle.SystemModel.CandleModel GetParentForBinaryComponent( global::DSLFactory.Candle.SystemModel.Component root )
			{
				// Segments 0 and 1
				global::DSLFactory.Candle.SystemModel.CandleModel result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::DSLFactory.Candle.SystemModel.InterfaceLayer GetParentForServiceContract( global::DSLFactory.Candle.SystemModel.ServiceContract root )
			{
				// Segments 0 and 1
				global::DSLFactory.Candle.SystemModel.InterfaceLayer result = root.Layer;
				if ( result == null ) return null;
				return result;
			}
			public static global::DSLFactory.Candle.SystemModel.Layer GetParentForClassImplementation( global::DSLFactory.Candle.SystemModel.ClassImplementation root )
			{
				// Segments 0 and 1
				global::DSLFactory.Candle.SystemModel.Layer result = root.Layer;
				if ( result == null ) return null;
				return result;
			}
			public static global::DSLFactory.Candle.SystemModel.ExternalComponent GetParentForExternalServiceContract( global::DSLFactory.Candle.SystemModel.ExternalPublicPort root )
			{
				// Segments 0 and 1
				global::DSLFactory.Candle.SystemModel.ExternalComponent result = root.Parent;
				if ( result == null ) return null;
				return result;
			}
			public static global::DSLFactory.Candle.SystemModel.CandleModel GetParentForProcess( global::DSLFactory.Candle.SystemModel.ClassImplementation root )
			{
				// Segments 0 and 1
				global::DSLFactory.Candle.SystemModel.SoftwareLayer root2 = root.Layer as global::DSLFactory.Candle.SystemModel.SoftwareLayer;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::DSLFactory.Candle.SystemModel.Component root4 = root2.Component as global::DSLFactory.Candle.SystemModel.Component;
				if ( root4 == null ) return null;
				// Segments 4 and 5
				global::DSLFactory.Candle.SystemModel.CandleModel result = root4.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::DSLFactory.Candle.SystemModel.CandleModel GetParentForExternalComponent( global::DSLFactory.Candle.SystemModel.ExternalComponent root )
			{
				// Segments 0 and 1
				global::DSLFactory.Candle.SystemModel.CandleModel result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
		/// <summary>
		/// Rule to update compartments when an item is added to the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.EnumHasValues), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.EntityHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemAddRule : DslModeling::AddRule
		{
			/// <summary>
			/// Called when an element is added. 
			/// </summary>
			/// <param name="e"></param>
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				ElementAdded(e, false);
			}
	
			internal static void ElementAdded(DslModeling::ElementAddedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if (e.ModelElement.IsDeleted)
					return;
				if(e.ModelElement is global::DSLFactory.Candle.SystemModel.EnumHasValues)
				{
					global::System.Collections.IEnumerable elements = GetEnumerationForEnumTypeShapeValuesFromLastLink((global::DSLFactory.Candle.SystemModel.EnumHasValues)e.ModelElement);
					UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EnumTypeShape), "Values", repaintOnly);
				}
				if(e.ModelElement is global::DSLFactory.Candle.SystemModel.EntityHasProperties)
				{
					global::System.Collections.IEnumerable elements = GetEntityForEntityShapePropertiesFromLastLink((global::DSLFactory.Candle.SystemModel.EntityHasProperties)e.ModelElement);
					UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EntityShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations)
				{
					global::System.Collections.IEnumerable elements = GetServiceContractForServiceContractShapeOperationsFromLastLink((global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations)e.ModelElement);
					UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.ServiceContractShape), "Operations", repaintOnly);
				}
			}
			
			#region static DomainPath traversal methods to get the list of compartments to update
			internal static global::System.Collections.ICollection GetEnumerationForEnumTypeShapeValuesFromLastLink(global::DSLFactory.Candle.SystemModel.EnumHasValues root)
			{
				// Segment 0
				global::DSLFactory.Candle.SystemModel.Enumeration result = root.Parent;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetEnumerationForEnumTypeShapeValues(global::DSLFactory.Candle.SystemModel.EnumValue root)
			{
				// Segments 1 and 0
				global::DSLFactory.Candle.SystemModel.Enumeration result = root.Parent;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetEntityForEntityShapePropertiesFromLastLink(global::DSLFactory.Candle.SystemModel.EntityHasProperties root)
			{
				// Segment 0
				global::DSLFactory.Candle.SystemModel.Entity result = root.Parent;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetEntityForEntityShapeProperties(global::DSLFactory.Candle.SystemModel.Property root)
			{
				// Segments 1 and 0
				global::DSLFactory.Candle.SystemModel.Entity result = root.Parent;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetServiceContractForServiceContractShapeOperationsFromLastLink(global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations root)
			{
				// Segment 0
				global::DSLFactory.Candle.SystemModel.TypeWithOperations result = root.Parent;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetServiceContractForServiceContractShapeOperations(global::DSLFactory.Candle.SystemModel.Operation root)
			{
				// Segments 1 and 0
				global::DSLFactory.Candle.SystemModel.TypeWithOperations result = root.Parent;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			#endregion
	
			#region helper method to update compartments 
			/// <summary>
			/// Updates the compartments for the shapes associated to the given list of model elements
			/// </summary>
			/// <param name="elements">List of model elements</param>
			/// <param name="shapeType">The type of shape that needs updating</param>
			/// <param name="compartmentName">The name of the compartment to update</param>
			/// <param name="repaintOnly">If true, the method will only invalidate the shape for a repaint, without re-initializing the shape.</param>
			internal static void UpdateCompartments(global::System.Collections.IEnumerable elements, global::System.Type shapeType, string compartmentName, bool repaintOnly)
			{
				foreach (DslModeling::ModelElement element in elements)
				{
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
					foreach (DslDiagrams::PresentationElement pel in pels)
					{
						DslDiagrams::CompartmentShape compartmentShape = pel as DslDiagrams::CompartmentShape;
						if (compartmentShape != null && shapeType.IsAssignableFrom(compartmentShape.GetType()))
						{
							if (repaintOnly)
							{
								compartmentShape.Invalidate();
							}
							else
							{
								foreach(DslDiagrams::CompartmentMapping mapping in compartmentShape.GetCompartmentMappings())
								{
									if(mapping.CompartmentId==compartmentName)
									{
										mapping.InitializeCompartmentShape(compartmentShape);
										break;
									}
								}
							}
						}
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// Rule to update compartments when an items is removed from the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.EnumHasValues), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.EntityHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemDeleteRule : DslModeling::DeleteRule
		{
			/// <summary>
			/// Called when an element is deleted
			/// </summary>
			/// <param name="e"></param>
			public override void ElementDeleted(DslModeling::ElementDeletedEventArgs e)
			{
				ElementDeleted(e, false);
			}
			
			internal static void ElementDeleted(DslModeling::ElementDeletedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::DSLFactory.Candle.SystemModel.EnumHasValues)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetEnumerationForEnumTypeShapeValuesFromLastLink((global::DSLFactory.Candle.SystemModel.EnumHasValues)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EnumTypeShape), "Values", repaintOnly);
				}
				if(e.ModelElement is global::DSLFactory.Candle.SystemModel.EntityHasProperties)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetEntityForEntityShapePropertiesFromLastLink((global::DSLFactory.Candle.SystemModel.EntityHasProperties)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EntityShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetServiceContractForServiceContractShapeOperationsFromLastLink((global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.ServiceContractShape), "Operations", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when the property on an item being displayed changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.EnumValue), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Property), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Operation), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemChangeRule : DslModeling::ChangeRule 
		{
			/// <summary>
			/// Called when an element is changed
			/// </summary>
			/// <param name="e"></param>
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				ElementPropertyChanged(e, false);
			}
			
			internal static void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::DSLFactory.Candle.SystemModel.EnumValue && e.DomainProperty.Id == global::DSLFactory.Candle.SystemModel.EnumValue.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEnumerationForEnumTypeShapeValues((global::DSLFactory.Candle.SystemModel.EnumValue)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EnumTypeShape), "Values", repaintOnly);
				}
				if(e.ModelElement is global::DSLFactory.Candle.SystemModel.Property && e.DomainProperty.Id == global::DSLFactory.Candle.SystemModel.Property.DisplayNameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapeProperties((global::DSLFactory.Candle.SystemModel.Property)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EntityShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::DSLFactory.Candle.SystemModel.Operation && e.DomainProperty.Id == global::DSLFactory.Candle.SystemModel.Operation.DisplayNameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetServiceContractForServiceContractShapeOperations((global::DSLFactory.Candle.SystemModel.Operation)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.ServiceContractShape), "Operations", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when a roleplayer change happens
		/// </summary>
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.EnumHasValues), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.EntityHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerChangeRule : DslModeling::RolePlayerChangeRule 
		{
			/// <summary>
			/// Called when the roleplayer on a link changes.
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				RolePlayerChanged(e, false);
			}
			
			internal static void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::DSLFactory.Candle.SystemModel.EnumHasValues).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetEnumerationForEnumTypeShapeValuesFromLastLink((global::DSLFactory.Candle.SystemModel.EnumValue)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::DSLFactory.Candle.SystemModel.EnumTypeShape compartmentShape = pel as global::DSLFactory.Candle.SystemModel.EnumTypeShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEnumerationForEnumTypeShapeValuesFromLastLink((global::DSLFactory.Candle.SystemModel.EnumHasValues)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EnumTypeShape), "Values", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEnumerationForEnumTypeShapeValues((global::DSLFactory.Candle.SystemModel.EnumValue)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EnumTypeShape), "Values", repaintOnly);
					}
				}
				if(typeof(global::DSLFactory.Candle.SystemModel.EntityHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetEntityForEntityShapePropertiesFromLastLink((global::DSLFactory.Candle.SystemModel.Property)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::DSLFactory.Candle.SystemModel.EntityShape compartmentShape = pel as global::DSLFactory.Candle.SystemModel.EntityShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapePropertiesFromLastLink((global::DSLFactory.Candle.SystemModel.EntityHasProperties)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EntityShape), "Properties", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapeProperties((global::DSLFactory.Candle.SystemModel.Property)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EntityShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetServiceContractForServiceContractShapeOperationsFromLastLink((global::DSLFactory.Candle.SystemModel.Operation)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::DSLFactory.Candle.SystemModel.ServiceContractShape compartmentShape = pel as global::DSLFactory.Candle.SystemModel.ServiceContractShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetServiceContractForServiceContractShapeOperationsFromLastLink((global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.ServiceContractShape), "Operations", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetServiceContractForServiceContractShapeOperations((global::DSLFactory.Candle.SystemModel.Operation)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.ServiceContractShape), "Operations", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// Rule to update compartments when the order of items in the list changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.EnumHasValues), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.EntityHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerPositionChangeRule : DslModeling::RolePlayerPositionChangeRule 
		{
			/// <summary>
			/// Called when the order of a roleplayer in a relationship changes
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e)
			{
				RolePlayerPositionChanged(e, false);
			}
			
			internal static void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::DSLFactory.Candle.SystemModel.EnumHasValues).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEnumerationForEnumTypeShapeValues((global::DSLFactory.Candle.SystemModel.EnumValue)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EnumTypeShape), "Values", repaintOnly);
					}
				}
				if(typeof(global::DSLFactory.Candle.SystemModel.EntityHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetEntityForEntityShapeProperties((global::DSLFactory.Candle.SystemModel.Property)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.EntityShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetServiceContractForServiceContractShapeOperations((global::DSLFactory.Candle.SystemModel.Operation)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::DSLFactory.Candle.SystemModel.ServiceContractShape), "Operations", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.NamedElement), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Association), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Action), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::DSLFactory.Candle.SystemModel.NamedElement.NameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::DSLFactory.Candle.SystemModel.PackageShape.FindPackageShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::DSLFactory.Candle.SystemModel.Package.DomainClassId);
					}
					decorator = global::DSLFactory.Candle.SystemModel.ScenarioShape.FindScenarioShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::DSLFactory.Candle.SystemModel.Scenario.DomainClassId);
					}
					decorator = global::DSLFactory.Candle.SystemModel.ScenarioThumbnailShape.FindScenarioThumbnailShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::DSLFactory.Candle.SystemModel.Scenario.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::DSLFactory.Candle.SystemModel.Association.SourceRoleNameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::DSLFactory.Candle.SystemModel.AssociationLink.FindAssociationLinkDecorator("SourceDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::DSLFactory.Candle.SystemModel.Association.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::DSLFactory.Candle.SystemModel.Association.TargetRoleNameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::DSLFactory.Candle.SystemModel.AssociationLink.FindAssociationLinkDecorator("TargetDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::DSLFactory.Candle.SystemModel.Association.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::DSLFactory.Candle.SystemModel.Association.SourceMultiplicityDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::DSLFactory.Candle.SystemModel.AssociationLink.FindAssociationLinkDecorator("SourceMultiplicityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::DSLFactory.Candle.SystemModel.Association.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::DSLFactory.Candle.SystemModel.Association.TargetMultiplicityDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::DSLFactory.Candle.SystemModel.AssociationLink.FindAssociationLinkDecorator("TargetMultiplicityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::DSLFactory.Candle.SystemModel.Association.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::DSLFactory.Candle.SystemModel.Action.NameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::DSLFactory.Candle.SystemModel.ActionLink.FindActionLinkDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::DSLFactory.Candle.SystemModel.Action.DomainClassId);
					}
				}
			}
		}
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Association), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Action), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.Implementation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.ExternalServiceReference), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.ClassUsesOperations), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::DSLFactory.Candle.SystemModel.EntityHasSubClasses), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::DSLFactory.Candle.SystemModel.ComponentModelDiagram diagram = linkShape.Diagram as global::DSLFactory.Candle.SystemModel.ComponentModelDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
