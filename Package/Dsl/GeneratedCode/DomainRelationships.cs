//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship OperationHasArguments
	/// Description for DSLFactory.Candle.SystemModel.OperationHasArguments
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.OperationHasArguments.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.OperationHasArguments.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e2dec53b-ff9e-40c6-b5f9-d88aa211920e")]
	public partial class OperationHasArguments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OperationHasArguments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2dec53b, 0xff9e, 0x40c6, 0xb5, 0xf9, 0xd8, 0x8a, 0xa2, 0x11, 0x92, 0x0e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OperationHasArguments link in the same Partition as the given Operation
		/// </summary>
		/// <param name="source">Operation to use as the source of the relationship.</param>
		/// <param name="target">Argument to use as the target of the relationship.</param>
		public OperationHasArguments(Operation source, Argument target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OperationHasArguments.OperationDomainRoleId, source), new DslModeling::RoleAssignment(OperationHasArguments.ArgumentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OperationHasArguments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OperationHasArguments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OperationHasArguments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OperationHasArguments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0xbd4c0b80, 0xae02, 0x478f, 0xad, 0xdb, 0x6b, 0xd4, 0x9d, 0x11, 0x43, 0xc9);
		
		/// <summary>
		/// DomainRole Operation
		/// Description for DSLFactory.Candle.SystemModel.OperationHasArguments.Operation
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.OperationHasArguments/Operation.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.OperationHasArguments/Operation.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Arguments", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.OperationHasArguments/Operation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bd4c0b80-ae02-478f-addb-6bd49d1143c9")]
		public virtual Operation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Operation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operation of a Argument
		/// <summary>
		/// Gets Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Operation GetOperation(Argument element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ArgumentDomainRoleId) as Operation;
		}
		
		/// <summary>
		/// Sets Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOperation(Argument element, Operation newOperation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ArgumentDomainRoleId, newOperation);
		}
		#endregion
		#region Argument domain role code
		
		/// <summary>
		/// Argument domain role Id.
		/// </summary>
		public static readonly global::System.Guid ArgumentDomainRoleId = new global::System.Guid(0x209590a7, 0x9846, 0x47ef, 0x89, 0xea, 0x50, 0x2d, 0xba, 0x66, 0xea, 0x58);
		
		/// <summary>
		/// DomainRole Argument
		/// Description for DSLFactory.Candle.SystemModel.OperationHasArguments.Argument
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.OperationHasArguments/Argument.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.OperationHasArguments/Argument.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Operation", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.OperationHasArguments/Argument.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("209590a7-9846-47ef-89ea-502dba66ea58")]
		public virtual Argument Argument
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Argument)DslModeling::DomainRoleInfo.GetRolePlayer(this, ArgumentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ArgumentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Arguments of a Operation
		/// <summary>
		/// Gets a list of Arguments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Argument> GetArguments(Operation element)
		{
			return new DslModeling::LinkedElementCollection<Argument>(element, OperationDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the list of OperationHasArguments links to a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.OperationHasArguments> GetLinksToArguments ( global::DSLFactory.Candle.SystemModel.Operation operationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.OperationHasArguments>(operationInstance, global::DSLFactory.Candle.SystemModel.OperationHasArguments.OperationDomainRoleId);
		}
		#endregion
		#region Argument link accessor
		/// <summary>
		/// Get the OperationHasArguments link to a Argument.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.OperationHasArguments GetLinkToOperation (global::DSLFactory.Candle.SystemModel.Argument argumentInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.OperationHasArguments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.OperationHasArguments>(argumentInstance, global::DSLFactory.Candle.SystemModel.OperationHasArguments.ArgumentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Argument not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OperationHasArguments instance accessors
		
		/// <summary>
		/// Get any OperationHasArguments links between a given Operation and a Argument.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.OperationHasArguments> GetLinks( global::DSLFactory.Candle.SystemModel.Operation source, global::DSLFactory.Candle.SystemModel.Argument target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.OperationHasArguments> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.OperationHasArguments>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.OperationHasArguments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.OperationHasArguments>(source, global::DSLFactory.Candle.SystemModel.OperationHasArguments.OperationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.OperationHasArguments link in links )
			{
				if ( target.Equals(link.Argument) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OperationHasArguments link between a given Operationand a Argument.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.OperationHasArguments GetLink( global::DSLFactory.Candle.SystemModel.Operation source, global::DSLFactory.Candle.SystemModel.Argument target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.OperationHasArguments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.OperationHasArguments>(source, global::DSLFactory.Candle.SystemModel.OperationHasArguments.OperationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.OperationHasArguments link in links )
			{
				if ( target.Equals(link.Argument) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship PackageHasTypes
	/// Description for DSLFactory.Candle.SystemModel.PackageHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.PackageHasTypes.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.PackageHasTypes.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c265691f-17f8-426f-8cc3-44b9450ec544")]
	public partial class PackageHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PackageHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc265691f, 0x17f8, 0x426f, 0x8c, 0xc3, 0x44, 0xb9, 0x45, 0x0e, 0xc5, 0x44);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PackageHasTypes link in the same Partition as the given Package
		/// </summary>
		/// <param name="source">Package to use as the source of the relationship.</param>
		/// <param name="target">DataType to use as the target of the relationship.</param>
		public PackageHasTypes(Package source, DataType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PackageHasTypes.PackageDomainRoleId, source), new DslModeling::RoleAssignment(PackageHasTypes.TypeModelDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PackageHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PackageHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PackageHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PackageHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Package domain role code
		
		/// <summary>
		/// Package domain role Id.
		/// </summary>
		public static readonly global::System.Guid PackageDomainRoleId = new global::System.Guid(0x9b148f6f, 0xb75e, 0x41ae, 0xab, 0x1e, 0x71, 0x4f, 0x09, 0x89, 0xf6, 0x31);
		
		/// <summary>
		/// DomainRole Package
		/// Description for DSLFactory.Candle.SystemModel.PackageHasTypes.Package
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.PackageHasTypes/Package.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.PackageHasTypes/Package.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.PackageHasTypes/Package.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9b148f6f-b75e-41ae-ab1e-714f0989f631")]
		public virtual Package Package
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Package)DslModeling::DomainRoleInfo.GetRolePlayer(this, PackageDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PackageDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Package of a DataType
		/// <summary>
		/// Gets Package.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Package GetPackage(DataType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TypeModelDomainRoleId) as Package;
		}
		
		/// <summary>
		/// Sets Package.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPackage(DataType element, Package newPackage)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TypeModelDomainRoleId, newPackage);
		}
		#endregion
		#region TypeModel domain role code
		
		/// <summary>
		/// TypeModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeModelDomainRoleId = new global::System.Guid(0x5894c39a, 0x60f6, 0x4d7f, 0x8f, 0xdb, 0xfb, 0xc5, 0xe2, 0x26, 0x1e, 0xb7);
		
		/// <summary>
		/// DomainRole TypeModel
		/// Description for DSLFactory.Candle.SystemModel.PackageHasTypes.TypeModel
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.PackageHasTypes/TypeModel.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.PackageHasTypes/TypeModel.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Package", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.PackageHasTypes/TypeModel.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5894c39a-60f6-4d7f-8fdb-fbc5e2261eb7")]
		public virtual DataType TypeModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a Package
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataType> GetTypes(Package element)
		{
			return new DslModeling::LinkedElementCollection<DataType>(element, PackageDomainRoleId);
		}
		#endregion
		#region Package link accessor
		/// <summary>
		/// Get the list of PackageHasTypes links to a Package.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.PackageHasTypes> GetLinksToTypes ( global::DSLFactory.Candle.SystemModel.Package packageInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.PackageHasTypes>(packageInstance, global::DSLFactory.Candle.SystemModel.PackageHasTypes.PackageDomainRoleId);
		}
		#endregion
		#region TypeModel link accessor
		/// <summary>
		/// Get the PackageHasTypes link to a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.PackageHasTypes GetLinkToPackage (global::DSLFactory.Candle.SystemModel.DataType typeModelInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.PackageHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.PackageHasTypes>(typeModelInstance, global::DSLFactory.Candle.SystemModel.PackageHasTypes.TypeModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TypeModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PackageHasTypes instance accessors
		
		/// <summary>
		/// Get any PackageHasTypes links between a given Package and a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.PackageHasTypes> GetLinks( global::DSLFactory.Candle.SystemModel.Package source, global::DSLFactory.Candle.SystemModel.DataType target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.PackageHasTypes> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.PackageHasTypes>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.PackageHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.PackageHasTypes>(source, global::DSLFactory.Candle.SystemModel.PackageHasTypes.PackageDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.PackageHasTypes link in links )
			{
				if ( target.Equals(link.TypeModel) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PackageHasTypes link between a given Packageand a DataType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.PackageHasTypes GetLink( global::DSLFactory.Candle.SystemModel.Package source, global::DSLFactory.Candle.SystemModel.DataType target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.PackageHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.PackageHasTypes>(source, global::DSLFactory.Candle.SystemModel.PackageHasTypes.PackageDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.PackageHasTypes link in links )
			{
				if ( target.Equals(link.TypeModel) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship DataLayerHasPackages
	/// Description for DSLFactory.Candle.SystemModel.DataLayerHasPackages
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataLayerHasPackages.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataLayerHasPackages.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a0d65794-8063-4219-85e5-c949729b88d4")]
	public partial class DataLayerHasPackages : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataLayerHasPackages domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa0d65794, 0x8063, 0x4219, 0x85, 0xe5, 0xc9, 0x49, 0x72, 0x9b, 0x88, 0xd4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataLayerHasPackages link in the same Partition as the given DataLayer
		/// </summary>
		/// <param name="source">DataLayer to use as the source of the relationship.</param>
		/// <param name="target">Package to use as the target of the relationship.</param>
		public DataLayerHasPackages(DataLayer source, Package target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataLayerHasPackages.LayerDomainRoleId, source), new DslModeling::RoleAssignment(DataLayerHasPackages.PackageDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataLayerHasPackages(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataLayerHasPackages(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataLayerHasPackages(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataLayerHasPackages(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Layer domain role code
		
		/// <summary>
		/// Layer domain role Id.
		/// </summary>
		public static readonly global::System.Guid LayerDomainRoleId = new global::System.Guid(0xa3c591eb, 0x8fb1, 0x49ae, 0xb5, 0xc2, 0xed, 0x65, 0x2c, 0x5b, 0xda, 0x92);
		
		/// <summary>
		/// DomainRole Layer
		/// Description for DSLFactory.Candle.SystemModel.DataLayerHasPackages.Layer
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataLayerHasPackages/Layer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataLayerHasPackages/Layer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Packages", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.DataLayerHasPackages/Layer.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a3c591eb-8fb1-49ae-b5c2-ed652c5bda92")]
		public virtual DataLayer Layer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, LayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Layer of a Package
		/// <summary>
		/// Gets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataLayer GetLayer(Package element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PackageDomainRoleId) as DataLayer;
		}
		
		/// <summary>
		/// Sets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLayer(Package element, DataLayer newLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PackageDomainRoleId, newLayer);
		}
		#endregion
		#region Package domain role code
		
		/// <summary>
		/// Package domain role Id.
		/// </summary>
		public static readonly global::System.Guid PackageDomainRoleId = new global::System.Guid(0x4ac7c1c4, 0x77fe, 0x4a0c, 0xbc, 0xc1, 0x7f, 0x4e, 0xce, 0x3c, 0xce, 0xfa);
		
		/// <summary>
		/// DomainRole Package
		/// Description for DSLFactory.Candle.SystemModel.DataLayerHasPackages.Package
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataLayerHasPackages/Package.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataLayerHasPackages/Package.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Layer", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.DataLayerHasPackages/Package.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4ac7c1c4-77fe-4a0c-bcc1-7f4ece3ccefa")]
		public virtual Package Package
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Package)DslModeling::DomainRoleInfo.GetRolePlayer(this, PackageDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PackageDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Packages of a DataLayer
		/// <summary>
		/// Gets a list of Packages.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Package> GetPackages(DataLayer element)
		{
			return new DslModeling::LinkedElementCollection<Package>(element, LayerDomainRoleId);
		}
		#endregion
		#region Layer link accessor
		/// <summary>
		/// Get the list of DataLayerHasPackages links to a DataLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.DataLayerHasPackages> GetLinksToPackages ( global::DSLFactory.Candle.SystemModel.DataLayer layerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.DataLayerHasPackages>(layerInstance, global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.LayerDomainRoleId);
		}
		#endregion
		#region Package link accessor
		/// <summary>
		/// Get the DataLayerHasPackages link to a Package.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.DataLayerHasPackages GetLinkToLayer (global::DSLFactory.Candle.SystemModel.Package packageInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.DataLayerHasPackages> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.DataLayerHasPackages>(packageInstance, global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.PackageDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Package not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataLayerHasPackages instance accessors
		
		/// <summary>
		/// Get any DataLayerHasPackages links between a given DataLayer and a Package.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.DataLayerHasPackages> GetLinks( global::DSLFactory.Candle.SystemModel.DataLayer source, global::DSLFactory.Candle.SystemModel.Package target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.DataLayerHasPackages> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.DataLayerHasPackages>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.DataLayerHasPackages> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.DataLayerHasPackages>(source, global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.LayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.DataLayerHasPackages link in links )
			{
				if ( target.Equals(link.Package) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataLayerHasPackages link between a given DataLayerand a Package.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.DataLayerHasPackages GetLink( global::DSLFactory.Candle.SystemModel.DataLayer source, global::DSLFactory.Candle.SystemModel.Package target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.DataLayerHasPackages> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.DataLayerHasPackages>(source, global::DSLFactory.Candle.SystemModel.DataLayerHasPackages.LayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.DataLayerHasPackages link in links )
			{
				if ( target.Equals(link.Package) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship Association
	/// Description for DSLFactory.Candle.SystemModel.Association
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Association.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Association.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("b54f35dc-10d9-44cc-b8d6-6a3020300a89")]
	public partial class Association : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Association domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb54f35dc, 0x10d9, 0x44cc, 0xb8, 0xd6, 0x6a, 0x30, 0x20, 0x30, 0x0a, 0x89);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Association link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public Association(Entity source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Association.SourceDomainRoleId, source), new DslModeling::RoleAssignment(Association.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Association(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Association(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Association(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Association(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x7ef05dfa, 0x9ef0, 0x4e18, 0x91, 0xfa, 0x1e, 0x41, 0x9a, 0x58, 0x02, 0xdd);
		
		/// <summary>
		/// DomainRole Source
		/// Description for DSLFactory.Candle.SystemModel.Association.Source
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Association/Source.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Association/Source.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.Association/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7ef05dfa-9ef0-4e18-91fa-1e419a5802dd")]
		public virtual Entity Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a Entity
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetSources(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x19117517, 0x5f57, 0x446c, 0x98, 0x24, 0x7a, 0x19, 0xc2, 0x75, 0xa9, 0xd9);
		
		/// <summary>
		/// DomainRole Target
		/// Description for DSLFactory.Candle.SystemModel.Association.Target
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Association/Target.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Association/Target.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.Association/Target.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("19117517-5f57-446c-9824-7a19c275a9d9")]
		public virtual Entity Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a Entity
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetTargets(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, SourceDomainRoleId);
		}
		#endregion
		#region XmlName domain property code
		
		/// <summary>
		/// XmlName domain property Id.
		/// </summary>
		public static readonly global::System.Guid XmlNameDomainPropertyId = new global::System.Guid(0x504925ae, 0x0856, 0x4396, 0x96, 0xcf, 0xbb, 0xe3, 0x88, 0xcc, 0x99, 0x08);
		
		/// <summary>
		/// Storage for XmlName
		/// </summary>
		private global::System.String xmlNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of XmlName domain property.
		/// Description for DSLFactory.Candle.SystemModel.Association.Xml Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Association/XmlName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Association/XmlName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("504925ae-0856-4396-96cf-bbe388cc9908")]
		public global::System.String XmlName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return xmlNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				XmlNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.XmlName domain property.
		/// </summary>
		internal sealed partial class XmlNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private XmlNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.XmlName domain property value handler.
			/// </summary>
			public static readonly XmlNamePropertyHandler Instance = new XmlNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.XmlName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return XmlNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.xmlNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.xmlNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceRoleName domain property code
		
		/// <summary>
		/// SourceRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceRoleNameDomainPropertyId = new global::System.Guid(0x91c3ea75, 0x25f1, 0x4cab, 0xa0, 0x61, 0x67, 0x90, 0xc7, 0x39, 0xb1, 0xbc);
		
		/// <summary>
		/// Storage for SourceRoleName
		/// </summary>
		private global::System.String sourceRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceRoleName domain property.
		/// Description for DSLFactory.Candle.SystemModel.Association.Source Role Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Association/SourceRoleName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Association/SourceRoleName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("91c3ea75-25f1-4cab-a061-6790c739b1bc")]
		public global::System.String SourceRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceRoleName domain property.
		/// </summary>
		internal sealed partial class SourceRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private SourceRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceRoleName domain property value handler.
			/// </summary>
			public static readonly SourceRoleNamePropertyHandler Instance = new SourceRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetRoleName domain property code
		
		/// <summary>
		/// TargetRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleNameDomainPropertyId = new global::System.Guid(0x7f374a2b, 0x5059, 0x4ac5, 0xab, 0x7b, 0x36, 0xbf, 0x41, 0x50, 0x3c, 0x54);
		
		/// <summary>
		/// Storage for TargetRoleName
		/// </summary>
		private global::System.String targetRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetRoleName domain property.
		/// Description for DSLFactory.Candle.SystemModel.Association.Target Role Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Association/TargetRoleName.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Association/TargetRoleName.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7f374a2b-5059-4ac5-ab7b-36bf41503c54")]
		public global::System.String TargetRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetRoleName domain property.
		/// </summary>
		internal sealed partial class TargetRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private TargetRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetRoleName domain property value handler.
			/// </summary>
			public static readonly TargetRoleNamePropertyHandler Instance = new TargetRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetMultiplicity domain property code
		
		/// <summary>
		/// TargetMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetMultiplicityDomainPropertyId = new global::System.Guid(0xfd2462b9, 0xd5b0, 0x4271, 0xa6, 0x41, 0xbb, 0x47, 0x4a, 0xae, 0x61, 0xb5);
		
		/// <summary>
		/// Storage for TargetMultiplicity
		/// </summary>
		private Multiplicity targetMultiplicityPropertyStorage = DSLFactory.Candle.SystemModel.Multiplicity.NotApplicable;
		
		/// <summary>
		/// Gets or sets the value of TargetMultiplicity domain property.
		/// Description for DSLFactory.Candle.SystemModel.Association.Target Multiplicity
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Association/TargetMultiplicity.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Association/TargetMultiplicity.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DSLFactory.Candle.SystemModel.Multiplicity.NotApplicable)]
		[DslModeling::DomainObjectId("fd2462b9-d5b0-4271-a641-bb474aae61b5")]
		public Multiplicity TargetMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetMultiplicity domain property.
		/// </summary>
		internal sealed partial class TargetMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private TargetMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetMultiplicity domain property value handler.
			/// </summary>
			public static readonly TargetMultiplicityPropertyHandler Instance = new TargetMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceMultiplicity domain property code
		
		/// <summary>
		/// SourceMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceMultiplicityDomainPropertyId = new global::System.Guid(0x1fadb2a6, 0x7636, 0x441d, 0x9f, 0xe0, 0xec, 0xc4, 0x9b, 0x30, 0xd8, 0x9e);
		
		/// <summary>
		/// Storage for SourceMultiplicity
		/// </summary>
		private Multiplicity sourceMultiplicityPropertyStorage = DSLFactory.Candle.SystemModel.Multiplicity.ZeroOne;
		
		/// <summary>
		/// Gets or sets the value of SourceMultiplicity domain property.
		/// Description for DSLFactory.Candle.SystemModel.Association.Source Multiplicity
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Association/SourceMultiplicity.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Association/SourceMultiplicity.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DSLFactory.Candle.SystemModel.Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1fadb2a6-7636-441d-9fe0-ecc49b30d89e")]
		public Multiplicity SourceMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceMultiplicity domain property.
		/// </summary>
		internal sealed partial class SourceMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private SourceMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceMultiplicity domain property value handler.
			/// </summary>
			public static readonly SourceMultiplicityPropertyHandler Instance = new SourceMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Sort domain property code
		
		/// <summary>
		/// Sort domain property Id.
		/// </summary>
		public static readonly global::System.Guid SortDomainPropertyId = new global::System.Guid(0x63a7f5e3, 0x82a7, 0x4f67, 0x86, 0xe7, 0xb1, 0x80, 0x38, 0x07, 0xa7, 0x10);
		
		/// <summary>
		/// Storage for Sort
		/// </summary>
		private AssociationSort sortPropertyStorage = DSLFactory.Candle.SystemModel.AssociationSort.Normal;
		
		/// <summary>
		/// Gets or sets the value of Sort domain property.
		/// Description for DSLFactory.Candle.SystemModel.Association.Sort
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Association/Sort.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Association/Sort.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DSLFactory.Candle.SystemModel.AssociationSort.Normal)]
		[DslModeling::DomainObjectId("63a7f5e3-82a7-4f67-86e7-b1803807a710")]
		public AssociationSort Sort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sortPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SortPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.Sort domain property.
		/// </summary>
		internal sealed partial class SortPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, AssociationSort>
		{
			private SortPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.Sort domain property value handler.
			/// </summary>
			public static readonly SortPropertyHandler Instance = new SortPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.Sort domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SortDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed AssociationSort GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sortPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, AssociationSort newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				AssociationSort oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sortPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region DependencyProperties opposite domain role accessor
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// Description for
		/// DSLFactory.Candle.SystemModel.AssociationHasProperties.Association
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DependencyProperty> DependencyProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<DependencyProperty>(this, global::DSLFactory.Candle.SystemModel.AssociationHasProperties.AssociationDomainRoleId);
			}
		}
		#endregion
		#region ForeignKeys opposite domain role accessor
		/// <summary>
		/// Gets a list of ForeignKeys.
		/// Description for
		/// DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.Association
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ForeignKey> ForeignKeys
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ForeignKey>(this, global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.AssociationDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of Association links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.Association> GetLinksToTargets ( global::DSLFactory.Candle.SystemModel.Entity sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Association>(sourceInstance, global::DSLFactory.Candle.SystemModel.Association.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of Association links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.Association> GetLinksToSources ( global::DSLFactory.Candle.SystemModel.Entity targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Association>(targetInstance, global::DSLFactory.Candle.SystemModel.Association.TargetDomainRoleId);
		}
		#endregion
		#region Association instance accessors
		
		/// <summary>
		/// Get any Association links between a given Entity and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.Association> GetLinks( global::DSLFactory.Candle.SystemModel.Entity source, global::DSLFactory.Candle.SystemModel.Entity target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.Association> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.Association>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.Association> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Association>(source, global::DSLFactory.Candle.SystemModel.Association.SourceDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.Association link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship CandleModelHasExternalComponents
	/// Description for DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8f820084-65fd-4254-af7c-ede926f5accc")]
	public partial class CandleModelHasExternalComponents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CandleModelHasExternalComponents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8f820084, 0x65fd, 0x4254, 0xaf, 0x7c, 0xed, 0xe9, 0x26, 0xf5, 0xac, 0xcc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CandleModelHasExternalComponents link in the same Partition as the given CandleModel
		/// </summary>
		/// <param name="source">CandleModel to use as the source of the relationship.</param>
		/// <param name="target">ExternalComponent to use as the target of the relationship.</param>
		public CandleModelHasExternalComponents(CandleModel source, ExternalComponent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CandleModelHasExternalComponents.CandleModelDomainRoleId, source), new DslModeling::RoleAssignment(CandleModelHasExternalComponents.ExternalComponentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CandleModelHasExternalComponents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CandleModelHasExternalComponents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CandleModelHasExternalComponents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CandleModelHasExternalComponents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CandleModel domain role code
		
		/// <summary>
		/// CandleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid CandleModelDomainRoleId = new global::System.Guid(0x4edd11d4, 0xd015, 0x4965, 0x8d, 0x44, 0x29, 0x3a, 0x8f, 0x0e, 0x6d, 0xd3);
		
		/// <summary>
		/// DomainRole CandleModel
		/// Description for
		/// DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.CandleModel
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents/CandleModel.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents/CandleModel.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExternalComponents", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents/CandleModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4edd11d4-d015-4965-8d44-293a8f0e6dd3")]
		public virtual CandleModel CandleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CandleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, CandleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CandleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ExternalComponent
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CandleModel GetModel(ExternalComponent element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExternalComponentDomainRoleId) as CandleModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ExternalComponent element, CandleModel newCandleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExternalComponentDomainRoleId, newCandleModel);
		}
		#endregion
		#region ExternalComponent domain role code
		
		/// <summary>
		/// ExternalComponent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExternalComponentDomainRoleId = new global::System.Guid(0xd9375911, 0x7bd7, 0x49f4, 0x87, 0x3f, 0x03, 0xb6, 0x90, 0x65, 0x76, 0x18);
		
		/// <summary>
		/// DomainRole ExternalComponent
		/// Description for
		/// DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.ExternalComponent
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents/ExternalComponent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents/ExternalComponent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents/ExternalComponent.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d9375911-7bd7-49f4-873f-03b690657618")]
		public virtual ExternalComponent ExternalComponent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExternalComponent)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExternalComponentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExternalComponentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExternalComponents of a CandleModel
		/// <summary>
		/// Gets a list of ExternalComponents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExternalComponent> GetExternalComponents(CandleModel element)
		{
			return new DslModeling::LinkedElementCollection<ExternalComponent>(element, CandleModelDomainRoleId);
		}
		#endregion
		#region CandleModel link accessor
		/// <summary>
		/// Get the list of CandleModelHasExternalComponents links to a CandleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents> GetLinksToExternalComponents ( global::DSLFactory.Candle.SystemModel.CandleModel candleModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents>(candleModelInstance, global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.CandleModelDomainRoleId);
		}
		#endregion
		#region ExternalComponent link accessor
		/// <summary>
		/// Get the CandleModelHasExternalComponents link to a ExternalComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents GetLinkToModel (global::DSLFactory.Candle.SystemModel.ExternalComponent externalComponentInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents>(externalComponentInstance, global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.ExternalComponentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExternalComponent not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CandleModelHasExternalComponents instance accessors
		
		/// <summary>
		/// Get any CandleModelHasExternalComponents links between a given CandleModel and a ExternalComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents> GetLinks( global::DSLFactory.Candle.SystemModel.CandleModel source, global::DSLFactory.Candle.SystemModel.ExternalComponent target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents>(source, global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.CandleModelDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents link in links )
			{
				if ( target.Equals(link.ExternalComponent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CandleModelHasExternalComponents link between a given CandleModeland a ExternalComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents GetLink( global::DSLFactory.Candle.SystemModel.CandleModel source, global::DSLFactory.Candle.SystemModel.ExternalComponent target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents>(source, global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents.CandleModelDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.CandleModelHasExternalComponents link in links )
			{
				if ( target.Equals(link.ExternalComponent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ScenarioHasUIView
	/// Description for DSLFactory.Candle.SystemModel.ScenarioHasUIView
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ScenarioHasUIView.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ScenarioHasUIView.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9f2f9051-7eb9-4641-9b8a-1d21e7211d0a")]
	public partial class ScenarioHasUIView : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ScenarioHasUIView domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9f2f9051, 0x7eb9, 0x4641, 0x9b, 0x8a, 0x1d, 0x21, 0xe7, 0x21, 0x1d, 0x0a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ScenarioHasUIView link in the same Partition as the given Scenario
		/// </summary>
		/// <param name="source">Scenario to use as the source of the relationship.</param>
		/// <param name="target">UIView to use as the target of the relationship.</param>
		public ScenarioHasUIView(Scenario source, UIView target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ScenarioHasUIView.ScenarioDomainRoleId, source), new DslModeling::RoleAssignment(ScenarioHasUIView.ViewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ScenarioHasUIView(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ScenarioHasUIView(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ScenarioHasUIView(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ScenarioHasUIView(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Scenario domain role code
		
		/// <summary>
		/// Scenario domain role Id.
		/// </summary>
		public static readonly global::System.Guid ScenarioDomainRoleId = new global::System.Guid(0x2636fc47, 0x6960, 0x4c58, 0xba, 0x59, 0xba, 0x1d, 0x69, 0x13, 0x63, 0xbe);
		
		/// <summary>
		/// DomainRole Scenario
		/// Description for DSLFactory.Candle.SystemModel.ScenarioHasUIView.Scenario
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ScenarioHasUIView/Scenario.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ScenarioHasUIView/Scenario.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Views", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ScenarioHasUIView/Scenario.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2636fc47-6960-4c58-ba59-ba1d691363be")]
		public virtual Scenario Scenario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Scenario)DslModeling::DomainRoleInfo.GetRolePlayer(this, ScenarioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ScenarioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Scenario of a UIView
		/// <summary>
		/// Gets Scenario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Scenario GetScenario(UIView element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewDomainRoleId) as Scenario;
		}
		
		/// <summary>
		/// Sets Scenario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetScenario(UIView element, Scenario newScenario)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewDomainRoleId, newScenario);
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0x99684c50, 0xb093, 0x4b04, 0x9c, 0x53, 0xbd, 0x3b, 0x10, 0x07, 0xaf, 0x66);
		
		/// <summary>
		/// DomainRole View
		/// Description for DSLFactory.Candle.SystemModel.ScenarioHasUIView.View
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ScenarioHasUIView/View.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ScenarioHasUIView/View.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Scenario", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ScenarioHasUIView/View.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("99684c50-b093-4b04-9c53-bd3b1007af66")]
		public virtual UIView View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UIView)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Views of a Scenario
		/// <summary>
		/// Gets a list of Views.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UIView> GetViews(Scenario element)
		{
			return new DslModeling::LinkedElementCollection<UIView>(element, ScenarioDomainRoleId);
		}
		#endregion
		#region Scenario link accessor
		/// <summary>
		/// Get the list of ScenarioHasUIView links to a Scenario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ScenarioHasUIView> GetLinksToViews ( global::DSLFactory.Candle.SystemModel.Scenario scenarioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ScenarioHasUIView>(scenarioInstance, global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.ScenarioDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the ScenarioHasUIView link to a UIView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ScenarioHasUIView GetLinkToScenario (global::DSLFactory.Candle.SystemModel.UIView viewInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ScenarioHasUIView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ScenarioHasUIView>(viewInstance, global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.ViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of View not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ScenarioHasUIView instance accessors
		
		/// <summary>
		/// Get any ScenarioHasUIView links between a given Scenario and a UIView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ScenarioHasUIView> GetLinks( global::DSLFactory.Candle.SystemModel.Scenario source, global::DSLFactory.Candle.SystemModel.UIView target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ScenarioHasUIView> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ScenarioHasUIView>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ScenarioHasUIView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ScenarioHasUIView>(source, global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.ScenarioDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ScenarioHasUIView link in links )
			{
				if ( target.Equals(link.View) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ScenarioHasUIView link between a given Scenarioand a UIView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ScenarioHasUIView GetLink( global::DSLFactory.Candle.SystemModel.Scenario source, global::DSLFactory.Candle.SystemModel.UIView target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ScenarioHasUIView> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ScenarioHasUIView>(source, global::DSLFactory.Candle.SystemModel.ScenarioHasUIView.ScenarioDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ScenarioHasUIView link in links )
			{
				if ( target.Equals(link.View) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship AppWorkflowLayerHasScenarios
	/// Description for DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6fc6bb31-9db7-485e-bfae-ebe90cdfd3ff")]
	public partial class AppWorkflowLayerHasScenarios : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AppWorkflowLayerHasScenarios domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6fc6bb31, 0x9db7, 0x485e, 0xbf, 0xae, 0xeb, 0xe9, 0x0c, 0xdf, 0xd3, 0xff);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AppWorkflowLayerHasScenarios link in the same Partition as the given UIWorkflowLayer
		/// </summary>
		/// <param name="source">UIWorkflowLayer to use as the source of the relationship.</param>
		/// <param name="target">Scenario to use as the target of the relationship.</param>
		public AppWorkflowLayerHasScenarios(UIWorkflowLayer source, Scenario target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AppWorkflowLayerHasScenarios.LayerDomainRoleId, source), new DslModeling::RoleAssignment(AppWorkflowLayerHasScenarios.ScenarioDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AppWorkflowLayerHasScenarios(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AppWorkflowLayerHasScenarios(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AppWorkflowLayerHasScenarios(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AppWorkflowLayerHasScenarios(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Layer domain role code
		
		/// <summary>
		/// Layer domain role Id.
		/// </summary>
		public static readonly global::System.Guid LayerDomainRoleId = new global::System.Guid(0x811fc3f8, 0xd1d4, 0x4866, 0xbd, 0x99, 0xff, 0xd2, 0x90, 0x6e, 0xed, 0x05);
		
		/// <summary>
		/// DomainRole Layer
		/// Description for DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.Layer
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios/Layer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios/Layer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Scenarios", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios/Layer.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("811fc3f8-d1d4-4866-bd99-ffd2906eed05")]
		public virtual UIWorkflowLayer Layer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UIWorkflowLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, LayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Layer of a Scenario
		/// <summary>
		/// Gets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UIWorkflowLayer GetLayer(Scenario element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ScenarioDomainRoleId) as UIWorkflowLayer;
		}
		
		/// <summary>
		/// Sets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLayer(Scenario element, UIWorkflowLayer newLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ScenarioDomainRoleId, newLayer);
		}
		#endregion
		#region Scenario domain role code
		
		/// <summary>
		/// Scenario domain role Id.
		/// </summary>
		public static readonly global::System.Guid ScenarioDomainRoleId = new global::System.Guid(0x28d40e4d, 0xce39, 0x4b4f, 0xbf, 0x3c, 0xe1, 0xc5, 0xd5, 0xba, 0x3f, 0x1a);
		
		/// <summary>
		/// DomainRole Scenario
		/// Description for
		/// DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.Scenario
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios/Scenario.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios/Scenario.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Layer", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios/Scenario.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("28d40e4d-ce39-4b4f-bf3c-e1c5d5ba3f1a")]
		public virtual Scenario Scenario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Scenario)DslModeling::DomainRoleInfo.GetRolePlayer(this, ScenarioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ScenarioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Scenarios of a UIWorkflowLayer
		/// <summary>
		/// Gets a list of Scenarios.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Scenario> GetScenarios(UIWorkflowLayer element)
		{
			return new DslModeling::LinkedElementCollection<Scenario>(element, LayerDomainRoleId);
		}
		#endregion
		#region Layer link accessor
		/// <summary>
		/// Get the list of AppWorkflowLayerHasScenarios links to a UIWorkflowLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios> GetLinksToScenarios ( global::DSLFactory.Candle.SystemModel.UIWorkflowLayer layerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios>(layerInstance, global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.LayerDomainRoleId);
		}
		#endregion
		#region Scenario link accessor
		/// <summary>
		/// Get the AppWorkflowLayerHasScenarios link to a Scenario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios GetLinkToLayer (global::DSLFactory.Candle.SystemModel.Scenario scenarioInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios>(scenarioInstance, global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.ScenarioDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Scenario not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AppWorkflowLayerHasScenarios instance accessors
		
		/// <summary>
		/// Get any AppWorkflowLayerHasScenarios links between a given UIWorkflowLayer and a Scenario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios> GetLinks( global::DSLFactory.Candle.SystemModel.UIWorkflowLayer source, global::DSLFactory.Candle.SystemModel.Scenario target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios>(source, global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.LayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios link in links )
			{
				if ( target.Equals(link.Scenario) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AppWorkflowLayerHasScenarios link between a given UIWorkflowLayerand a Scenario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios GetLink( global::DSLFactory.Candle.SystemModel.UIWorkflowLayer source, global::DSLFactory.Candle.SystemModel.Scenario target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios>(source, global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios.LayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.AppWorkflowLayerHasScenarios link in links )
			{
				if ( target.Equals(link.Scenario) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship Action
	/// Description for DSLFactory.Candle.SystemModel.Action
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Action.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Action.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("a33b9e7e-c6a2-45fc-ba47-bf174c9ef2d1")]
	public partial class Action : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Action domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa33b9e7e, 0xc6a2, 0x45fc, 0xba, 0x47, 0xbf, 0x17, 0x4c, 0x9e, 0xf2, 0xd1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Action link in the same Partition as the given UIView
		/// </summary>
		/// <param name="source">UIView to use as the source of the relationship.</param>
		/// <param name="target">UIView to use as the target of the relationship.</param>
		public Action(UIView source, UIView target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Action.ViewSourceDomainRoleId, source), new DslModeling::RoleAssignment(Action.ViewTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Action(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Action(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Action(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Action(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ViewSource domain role code
		
		/// <summary>
		/// ViewSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewSourceDomainRoleId = new global::System.Guid(0xa853cb90, 0xf304, 0x437f, 0xb5, 0x3e, 0x9f, 0x42, 0xb8, 0x8f, 0xf0, 0xfb);
		
		/// <summary>
		/// DomainRole ViewSource
		/// Description for DSLFactory.Candle.SystemModel.Action.ViewSource
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Action/ViewSource.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Action/ViewSource.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ViewTargets", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.Action/ViewSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a853cb90-f304-437f-b53e-9f42b88ff0fb")]
		public virtual UIView ViewSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UIView)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ViewSources of a UIView
		/// <summary>
		/// Gets a list of ViewSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UIView> GetViewSources(UIView element)
		{
			return new DslModeling::LinkedElementCollection<UIView>(element, ViewTargetDomainRoleId);
		}
		#endregion
		#region ViewTarget domain role code
		
		/// <summary>
		/// ViewTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewTargetDomainRoleId = new global::System.Guid(0x8af0718d, 0x0c5d, 0x4368, 0xbf, 0x49, 0x3e, 0x2f, 0x57, 0x63, 0x4c, 0x2d);
		
		/// <summary>
		/// DomainRole ViewTarget
		/// Description for DSLFactory.Candle.SystemModel.Action.ViewTarget
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Action/ViewTarget.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Action/ViewTarget.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ViewSources", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.Action/ViewTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8af0718d-0c5d-4368-bf49-3e2f57634c2d")]
		public virtual UIView ViewTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UIView)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ViewTargets of a UIView
		/// <summary>
		/// Gets a list of ViewTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UIView> GetViewTargets(UIView element)
		{
			return new DslModeling::LinkedElementCollection<UIView>(element, ViewSourceDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x20c9b69c, 0x8e40, 0x4c85, 0x87, 0xd2, 0x0e, 0xa6, 0x0e, 0xc7, 0xd7, 0x45);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for DSLFactory.Candle.SystemModel.Action.Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Action/Name.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Action/Name.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("20c9b69c-8e40-4c85-87d2-0ea60ec7d745")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Action.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Action, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Action.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Action.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Action element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Action element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Roles domain property code
		
		/// <summary>
		/// Roles domain property Id.
		/// </summary>
		public static readonly global::System.Guid RolesDomainPropertyId = new global::System.Guid(0xb8cf6ca2, 0xfc2f, 0x4430, 0xae, 0x11, 0x1f, 0x38, 0x2c, 0xd9, 0x9a, 0xf9);
		
		/// <summary>
		/// Storage for Roles
		/// </summary>
		private global::System.String rolesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Roles domain property.
		/// Description for DSLFactory.Candle.SystemModel.Action.Roles
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Action/Roles.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Action/Roles.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b8cf6ca2-fc2f-4430-ae11-1f382cd99af9")]
		public global::System.String Roles
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rolesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RolesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Action.Roles domain property.
		/// </summary>
		internal sealed partial class RolesPropertyHandler : DslModeling::DomainPropertyValueHandler<Action, global::System.String>
		{
			private RolesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Action.Roles domain property value handler.
			/// </summary>
			public static readonly RolesPropertyHandler Instance = new RolesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Action.Roles domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RolesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Action element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rolesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Action element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.rolesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x9ceda67b, 0x0fd0, 0x4a8b, 0x99, 0xae, 0x75, 0xb3, 0x9c, 0x41, 0xb4, 0x3f);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for DSLFactory.Candle.SystemModel.Action.Description
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Action/Description.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Action/Description.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9ceda67b-0fd0-4a8b-99ae-75b39c41b43f")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Action.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Action, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Action.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Action.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Action element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Action element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region DependencyProperties opposite domain role accessor
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ActionHasDependencyProperties.Action
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DependencyProperty> DependencyProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<DependencyProperty>(this, global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties.ActionDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region ViewSource link accessor
		/// <summary>
		/// Get the list of Action links to a UIView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.Action> GetLinksToViewTargets ( global::DSLFactory.Candle.SystemModel.UIView viewSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Action>(viewSourceInstance, global::DSLFactory.Candle.SystemModel.Action.ViewSourceDomainRoleId);
		}
		#endregion
		#region ViewTarget link accessor
		/// <summary>
		/// Get the list of Action links to a UIView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.Action> GetLinksToViewSources ( global::DSLFactory.Candle.SystemModel.UIView viewTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Action>(viewTargetInstance, global::DSLFactory.Candle.SystemModel.Action.ViewTargetDomainRoleId);
		}
		#endregion
		#region Action instance accessors
		
		/// <summary>
		/// Get any Action links between a given UIView and a UIView.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.Action> GetLinks( global::DSLFactory.Candle.SystemModel.UIView source, global::DSLFactory.Candle.SystemModel.UIView target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.Action> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.Action>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.Action> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Action>(source, global::DSLFactory.Candle.SystemModel.Action.ViewSourceDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.Action link in links )
			{
				if ( target.Equals(link.ViewTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship EnumHasValues
	/// Description for DSLFactory.Candle.SystemModel.EnumHasValues
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EnumHasValues.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EnumHasValues.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("cc67e310-ab02-4772-98c0-5db45ee7c073")]
	public partial class EnumHasValues : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EnumHasValues domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcc67e310, 0xab02, 0x4772, 0x98, 0xc0, 0x5d, 0xb4, 0x5e, 0xe7, 0xc0, 0x73);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EnumHasValues link in the same Partition as the given Enumeration
		/// </summary>
		/// <param name="source">Enumeration to use as the source of the relationship.</param>
		/// <param name="target">EnumValue to use as the target of the relationship.</param>
		public EnumHasValues(Enumeration source, EnumValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EnumHasValues.ParentDomainRoleId, source), new DslModeling::RoleAssignment(EnumHasValues.ValueDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EnumHasValues(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EnumHasValues(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EnumHasValues(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EnumHasValues(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x639b9aaa, 0xd17b, 0x4ecd, 0xa9, 0x31, 0xc6, 0x59, 0xfe, 0xef, 0xe1, 0xa5);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for DSLFactory.Candle.SystemModel.EnumHasValues.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EnumHasValues/Parent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EnumHasValues/Parent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Values", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.EnumHasValues/Parent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("639b9aaa-d17b-4ecd-a931-c659feefe1a5")]
		public virtual Enumeration Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Enumeration)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a EnumValue
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Enumeration GetParent(EnumValue element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueDomainRoleId) as Enumeration;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(EnumValue element, Enumeration newParent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueDomainRoleId, newParent);
		}
		#endregion
		#region Value domain role code
		
		/// <summary>
		/// Value domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainRoleId = new global::System.Guid(0xf84ffb75, 0xe706, 0x4051, 0xbc, 0x18, 0xc5, 0xd6, 0x26, 0x3e, 0x66, 0x45);
		
		/// <summary>
		/// DomainRole Value
		/// Description for DSLFactory.Candle.SystemModel.EnumHasValues.Value
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EnumHasValues/Value.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EnumHasValues/Value.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.EnumHasValues/Value.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f84ffb75-e706-4051-bc18-c5d6263e6645")]
		public virtual EnumValue Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EnumValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Values of a Enumeration
		/// <summary>
		/// Gets a list of Values.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EnumValue> GetValues(Enumeration element)
		{
			return new DslModeling::LinkedElementCollection<EnumValue>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of EnumHasValues links to a Enumeration.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.EnumHasValues> GetLinksToValues ( global::DSLFactory.Candle.SystemModel.Enumeration parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.EnumHasValues>(parentInstance, global::DSLFactory.Candle.SystemModel.EnumHasValues.ParentDomainRoleId);
		}
		#endregion
		#region Value link accessor
		/// <summary>
		/// Get the EnumHasValues link to a EnumValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.EnumHasValues GetLinkToParent (global::DSLFactory.Candle.SystemModel.EnumValue valueInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.EnumHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.EnumHasValues>(valueInstance, global::DSLFactory.Candle.SystemModel.EnumHasValues.ValueDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Value not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EnumHasValues instance accessors
		
		/// <summary>
		/// Get any EnumHasValues links between a given Enumeration and a EnumValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.EnumHasValues> GetLinks( global::DSLFactory.Candle.SystemModel.Enumeration source, global::DSLFactory.Candle.SystemModel.EnumValue target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.EnumHasValues> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.EnumHasValues>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.EnumHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.EnumHasValues>(source, global::DSLFactory.Candle.SystemModel.EnumHasValues.ParentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.EnumHasValues link in links )
			{
				if ( target.Equals(link.Value) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EnumHasValues link between a given Enumerationand a EnumValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.EnumHasValues GetLink( global::DSLFactory.Candle.SystemModel.Enumeration source, global::DSLFactory.Candle.SystemModel.EnumValue target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.EnumHasValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.EnumHasValues>(source, global::DSLFactory.Candle.SystemModel.EnumHasValues.ParentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.EnumHasValues link in links )
			{
				if ( target.Equals(link.Value) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship EntityHasProperties
	/// Description for DSLFactory.Candle.SystemModel.EntityHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EntityHasProperties.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EntityHasProperties.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("afb45649-7753-4a8f-8d3b-4694750af0d3")]
	public partial class EntityHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xafb45649, 0x7753, 0x4a8f, 0x8d, 0x3b, 0x46, 0x94, 0x75, 0x0a, 0xf0, 0xd3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasProperties link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public EntityHasProperties(Entity source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasProperties.ParentDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0xb70fa7b8, 0x5310, 0x47e3, 0x9c, 0xa2, 0xc1, 0x65, 0xdd, 0xf8, 0x50, 0x29);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for DSLFactory.Candle.SystemModel.EntityHasProperties.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EntityHasProperties/Parent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EntityHasProperties/Parent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.EntityHasProperties/Parent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b70fa7b8-5310-47e3-9ca2-c165ddf85029")]
		public virtual Entity Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a Property
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetParent(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(Property element, Entity newParent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newParent);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x0d979f17, 0xf00e, 0x4e90, 0xa5, 0x29, 0xe9, 0xc8, 0x6f, 0x9c, 0x33, 0x62);
		
		/// <summary>
		/// DomainRole Property
		/// Description for DSLFactory.Candle.SystemModel.EntityHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EntityHasProperties/Property.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EntityHasProperties/Property.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.EntityHasProperties/Property.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0d979f17-f00e-4e90-a529-e9c86f9c3362")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a Entity
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Property>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of EntityHasProperties links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.EntityHasProperties> GetLinksToProperties ( global::DSLFactory.Candle.SystemModel.Entity parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.EntityHasProperties>(parentInstance, global::DSLFactory.Candle.SystemModel.EntityHasProperties.ParentDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the EntityHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.EntityHasProperties GetLinkToParent (global::DSLFactory.Candle.SystemModel.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.EntityHasProperties>(propertyInstance, global::DSLFactory.Candle.SystemModel.EntityHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasProperties instance accessors
		
		/// <summary>
		/// Get any EntityHasProperties links between a given Entity and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.EntityHasProperties> GetLinks( global::DSLFactory.Candle.SystemModel.Entity source, global::DSLFactory.Candle.SystemModel.Property target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.EntityHasProperties> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.EntityHasProperties>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.EntityHasProperties>(source, global::DSLFactory.Candle.SystemModel.EntityHasProperties.ParentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasProperties link between a given Entityand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.EntityHasProperties GetLink( global::DSLFactory.Candle.SystemModel.Entity source, global::DSLFactory.Candle.SystemModel.Property target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.EntityHasProperties>(source, global::DSLFactory.Candle.SystemModel.EntityHasProperties.ParentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ElementHasDependencyProperties
	/// Description for DSLFactory.Candle.SystemModel.ElementHasDependencyProperties
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e1439439-e8be-45ce-a6da-fd6be3f55a7e")]
	public partial class ElementHasDependencyProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementHasDependencyProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe1439439, 0xe8be, 0x45ce, 0xa6, 0xda, 0xfd, 0x6b, 0xe3, 0xf5, 0x5a, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementHasDependencyProperties link in the same Partition as the given CandleElement
		/// </summary>
		/// <param name="source">CandleElement to use as the source of the relationship.</param>
		/// <param name="target">DependencyProperty to use as the target of the relationship.</param>
		public ElementHasDependencyProperties(CandleElement source, DependencyProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementHasDependencyProperties.ParentDomainRoleId, source), new DslModeling::RoleAssignment(ElementHasDependencyProperties.DependencyPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementHasDependencyProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementHasDependencyProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementHasDependencyProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementHasDependencyProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x9376207c, 0x6915, 0x4b2d, 0xa3, 0x19, 0x08, 0x71, 0xac, 0x5e, 0x42, 0xcd);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for
		/// DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ElementHasDependencyProperties/Parent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ElementHasDependencyProperties/Parent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DependencyProperties", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ElementHasDependencyProperties/Parent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9376207c-6915-4b2d-a319-0871ac5e42cd")]
		public virtual CandleElement Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CandleElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a DependencyProperty
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CandleElement GetParent(DependencyProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DependencyPropertyDomainRoleId) as CandleElement;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(DependencyProperty element, CandleElement newParent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DependencyPropertyDomainRoleId, newParent);
		}
		#endregion
		#region DependencyProperty domain role code
		
		/// <summary>
		/// DependencyProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid DependencyPropertyDomainRoleId = new global::System.Guid(0xedf83250, 0x044d, 0x4802, 0x90, 0xe0, 0xaf, 0xed, 0x67, 0x01, 0xc4, 0xe0);
		
		/// <summary>
		/// DomainRole DependencyProperty
		/// Description for
		/// DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.DependencyProperty
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ElementHasDependencyProperties/DependencyProperty.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ElementHasDependencyProperties/DependencyProperty.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ElementHasDependencyProperties/DependencyProperty.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("edf83250-044d-4802-90e0-afed6701c4e0")]
		public virtual DependencyProperty DependencyProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DependencyProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, DependencyPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DependencyPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DependencyProperties of a CandleElement
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DependencyProperty> GetDependencyProperties(CandleElement element)
		{
			return new DslModeling::LinkedElementCollection<DependencyProperty>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of ElementHasDependencyProperties links to a CandleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties> GetLinksToDependencyProperties ( global::DSLFactory.Candle.SystemModel.CandleElement parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties>(parentInstance, global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.ParentDomainRoleId);
		}
		#endregion
		#region DependencyProperty link accessor
		/// <summary>
		/// Get the ElementHasDependencyProperties link to a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties GetLinkToParent (global::DSLFactory.Candle.SystemModel.DependencyProperty dependencyPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties>(dependencyPropertyInstance, global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.DependencyPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DependencyProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementHasDependencyProperties instance accessors
		
		/// <summary>
		/// Get any ElementHasDependencyProperties links between a given CandleElement and a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties> GetLinks( global::DSLFactory.Candle.SystemModel.CandleElement source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties>(source, global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.ParentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementHasDependencyProperties link between a given CandleElementand a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties GetLink( global::DSLFactory.Candle.SystemModel.CandleElement source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties>(source, global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties.ParentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ElementHasDependencyProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship AssemblyReferencesAssemblies
	/// Description for DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ee57587f-2835-4c81-9488-57a6bfebd116")]
	public partial class AssemblyReferencesAssemblies : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssemblyReferencesAssemblies domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xee57587f, 0x2835, 0x4c81, 0x94, 0x88, 0x57, 0xa6, 0xbf, 0xeb, 0xd1, 0x16);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AssemblyReferencesAssemblies link in the same Partition as the given DotNetAssembly
		/// </summary>
		/// <param name="source">DotNetAssembly to use as the source of the relationship.</param>
		/// <param name="target">DotNetAssembly to use as the target of the relationship.</param>
		public AssemblyReferencesAssemblies(DotNetAssembly source, DotNetAssembly target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AssemblyReferencesAssemblies.TargetAssemblyDomainRoleId, source), new DslModeling::RoleAssignment(AssemblyReferencesAssemblies.SourceAssemblyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssemblyReferencesAssemblies(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssemblyReferencesAssemblies(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssemblyReferencesAssemblies(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssemblyReferencesAssemblies(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TargetAssembly domain role code
		
		/// <summary>
		/// TargetAssembly domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetAssemblyDomainRoleId = new global::System.Guid(0x409aaf12, 0xf549, 0x4ab7, 0x8b, 0xa4, 0x08, 0xc0, 0xeb, 0x19, 0x92, 0xeb);
		
		/// <summary>
		/// DomainRole TargetAssembly
		/// Description for
		/// DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies.TargetAssembly
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies/TargetAssembly.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies/TargetAssembly.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InternalAssemblyReferences", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies/TargetAssembly.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("409aaf12-f549-4ab7-8ba4-08c0eb1992eb")]
		public virtual DotNetAssembly TargetAssembly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DotNetAssembly)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetAssemblyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetAssemblyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferencedByAssemblies of a DotNetAssembly
		/// <summary>
		/// Gets a list of ReferencedByAssemblies.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DotNetAssembly> GetReferencedByAssemblies(DotNetAssembly element)
		{
			return new DslModeling::LinkedElementCollection<DotNetAssembly>(element, SourceAssemblyDomainRoleId);
		}
		#endregion
		#region SourceAssembly domain role code
		
		/// <summary>
		/// SourceAssembly domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceAssemblyDomainRoleId = new global::System.Guid(0x6a01436f, 0xeb71, 0x47d0, 0xa0, 0xaf, 0x48, 0x2c, 0xe6, 0xa5, 0x90, 0xa3);
		
		/// <summary>
		/// DomainRole SourceAssembly
		/// Description for
		/// DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies.SourceAssembly
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies/SourceAssembly.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies/SourceAssembly.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ReferencedByAssemblies", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies/SourceAssembly.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6a01436f-eb71-47d0-a0af-482ce6a590a3")]
		public virtual DotNetAssembly SourceAssembly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DotNetAssembly)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceAssemblyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceAssemblyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InternalAssemblyReferences of a DotNetAssembly
		/// <summary>
		/// Gets a list of InternalAssemblyReferences.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DotNetAssembly> GetInternalAssemblyReferences(DotNetAssembly element)
		{
			return new DslModeling::LinkedElementCollection<DotNetAssembly>(element, TargetAssemblyDomainRoleId);
		}
		#endregion
		#region Scope domain property code
		
		/// <summary>
		/// Scope domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScopeDomainPropertyId = new global::System.Guid(0x9f58fa5a, 0x2339, 0x43e4, 0xa1, 0xa2, 0x87, 0xa9, 0xb5, 0x46, 0x58, 0x41);
		
		/// <summary>
		/// Storage for Scope
		/// </summary>
		private ReferenceScope scopePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scope domain property.
		/// Description for DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies.Scope
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies/Scope.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies/Scope.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9f58fa5a-2339-43e4-a1a2-87a9b5465841")]
		public ReferenceScope Scope
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scopePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScopePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AssemblyReferencesAssemblies.Scope domain property.
		/// </summary>
		internal sealed partial class ScopePropertyHandler : DslModeling::DomainPropertyValueHandler<AssemblyReferencesAssemblies, ReferenceScope>
		{
			private ScopePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AssemblyReferencesAssemblies.Scope domain property value handler.
			/// </summary>
			public static readonly ScopePropertyHandler Instance = new ScopePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AssemblyReferencesAssemblies.Scope domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScopeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceScope GetValue(AssemblyReferencesAssemblies element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scopePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AssemblyReferencesAssemblies element, ReferenceScope newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReferenceScope oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scopePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetAssembly link accessor
		/// <summary>
		/// Get the list of AssemblyReferencesAssemblies links to a DotNetAssembly.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies> GetLinksToInternalAssemblyReferences ( global::DSLFactory.Candle.SystemModel.DotNetAssembly targetAssemblyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies>(targetAssemblyInstance, global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies.TargetAssemblyDomainRoleId);
		}
		#endregion
		#region SourceAssembly link accessor
		/// <summary>
		/// Get the list of AssemblyReferencesAssemblies links to a DotNetAssembly.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies> GetLinksToReferencedByAssemblies ( global::DSLFactory.Candle.SystemModel.DotNetAssembly sourceAssemblyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies>(sourceAssemblyInstance, global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies.SourceAssemblyDomainRoleId);
		}
		#endregion
		#region AssemblyReferencesAssemblies instance accessors
		
		/// <summary>
		/// Get any AssemblyReferencesAssemblies links between a given DotNetAssembly and a DotNetAssembly.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies> GetLinks( global::DSLFactory.Candle.SystemModel.DotNetAssembly source, global::DSLFactory.Candle.SystemModel.DotNetAssembly target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies>(source, global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies.TargetAssemblyDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies link in links )
			{
				if ( target.Equals(link.SourceAssembly) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssemblyReferencesAssemblies link between a given DotNetAssemblyand a DotNetAssembly.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies GetLink( global::DSLFactory.Candle.SystemModel.DotNetAssembly source, global::DSLFactory.Candle.SystemModel.DotNetAssembly target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies>(source, global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies.TargetAssemblyDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.AssemblyReferencesAssemblies link in links )
			{
				if ( target.Equals(link.SourceAssembly) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship AssociationHasProperties
	/// Description for DSLFactory.Candle.SystemModel.AssociationHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AssociationHasProperties.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssociationHasProperties.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9b32bb29-0cea-4bf4-b942-21fdbfefae1b")]
	public partial class AssociationHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssociationHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9b32bb29, 0x0cea, 0x4bf4, 0xb9, 0x42, 0x21, 0xfd, 0xbf, 0xef, 0xae, 0x1b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AssociationHasProperties link in the same Partition as the given Association
		/// </summary>
		/// <param name="source">Association to use as the source of the relationship.</param>
		/// <param name="target">DependencyProperty to use as the target of the relationship.</param>
		public AssociationHasProperties(Association source, DependencyProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AssociationHasProperties.AssociationDomainRoleId, source), new DslModeling::RoleAssignment(AssociationHasProperties.DependencyPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Association domain role code
		
		/// <summary>
		/// Association domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationDomainRoleId = new global::System.Guid(0xf0431984, 0xae48, 0x415d, 0x9d, 0x10, 0xf7, 0x2d, 0x8c, 0x0f, 0x67, 0xac);
		
		/// <summary>
		/// DomainRole Association
		/// Description for
		/// DSLFactory.Candle.SystemModel.AssociationHasProperties.Association
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AssociationHasProperties/Association.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssociationHasProperties/Association.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DependencyProperties", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.AssociationHasProperties/Association.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f0431984-ae48-415d-9d10-f72d8c0f67ac")]
		public virtual Association Association
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Association)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Association of a DependencyProperty
		/// <summary>
		/// Gets Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Association GetAssociation(DependencyProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DependencyPropertyDomainRoleId) as Association;
		}
		
		/// <summary>
		/// Sets Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAssociation(DependencyProperty element, Association newAssociation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DependencyPropertyDomainRoleId, newAssociation);
		}
		#endregion
		#region DependencyProperty domain role code
		
		/// <summary>
		/// DependencyProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid DependencyPropertyDomainRoleId = new global::System.Guid(0x4bc0725b, 0x10e2, 0x49e5, 0x86, 0x03, 0x62, 0x2b, 0xbf, 0x68, 0x81, 0x5a);
		
		/// <summary>
		/// DomainRole DependencyProperty
		/// Description for
		/// DSLFactory.Candle.SystemModel.AssociationHasProperties.DependencyProperty
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AssociationHasProperties/DependencyProperty.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssociationHasProperties/DependencyProperty.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Association", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.AssociationHasProperties/DependencyProperty.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4bc0725b-10e2-49e5-8603-622bbf68815a")]
		public virtual DependencyProperty DependencyProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DependencyProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, DependencyPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DependencyPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DependencyProperties of a Association
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DependencyProperty> GetDependencyProperties(Association element)
		{
			return new DslModeling::LinkedElementCollection<DependencyProperty>(element, AssociationDomainRoleId);
		}
		#endregion
		#region Association link accessor
		/// <summary>
		/// Get the list of AssociationHasProperties links to a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.AssociationHasProperties> GetLinksToDependencyProperties ( global::DSLFactory.Candle.SystemModel.Association associationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssociationHasProperties>(associationInstance, global::DSLFactory.Candle.SystemModel.AssociationHasProperties.AssociationDomainRoleId);
		}
		#endregion
		#region DependencyProperty link accessor
		/// <summary>
		/// Get the AssociationHasProperties link to a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.AssociationHasProperties GetLinkToAssociation (global::DSLFactory.Candle.SystemModel.DependencyProperty dependencyPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.AssociationHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssociationHasProperties>(dependencyPropertyInstance, global::DSLFactory.Candle.SystemModel.AssociationHasProperties.DependencyPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DependencyProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AssociationHasProperties instance accessors
		
		/// <summary>
		/// Get any AssociationHasProperties links between a given Association and a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.AssociationHasProperties> GetLinks( global::DSLFactory.Candle.SystemModel.Association source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.AssociationHasProperties> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.AssociationHasProperties>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.AssociationHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssociationHasProperties>(source, global::DSLFactory.Candle.SystemModel.AssociationHasProperties.AssociationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.AssociationHasProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssociationHasProperties link between a given Associationand a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.AssociationHasProperties GetLink( global::DSLFactory.Candle.SystemModel.Association source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.AssociationHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssociationHasProperties>(source, global::DSLFactory.Candle.SystemModel.AssociationHasProperties.AssociationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.AssociationHasProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ActionHasDependencyProperties
	/// Description for DSLFactory.Candle.SystemModel.ActionHasDependencyProperties
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ActionHasDependencyProperties.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ActionHasDependencyProperties.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("48086dd7-1a10-4ce7-a7b5-6f6ee4b512ce")]
	public partial class ActionHasDependencyProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ActionHasDependencyProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x48086dd7, 0x1a10, 0x4ce7, 0xa7, 0xb5, 0x6f, 0x6e, 0xe4, 0xb5, 0x12, 0xce);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ActionHasDependencyProperties link in the same Partition as the given Action
		/// </summary>
		/// <param name="source">Action to use as the source of the relationship.</param>
		/// <param name="target">DependencyProperty to use as the target of the relationship.</param>
		public ActionHasDependencyProperties(Action source, DependencyProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ActionHasDependencyProperties.ActionDomainRoleId, source), new DslModeling::RoleAssignment(ActionHasDependencyProperties.DependencyPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ActionHasDependencyProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ActionHasDependencyProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ActionHasDependencyProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ActionHasDependencyProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Action domain role code
		
		/// <summary>
		/// Action domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActionDomainRoleId = new global::System.Guid(0x953238e2, 0xe8f0, 0x40a8, 0xb1, 0x93, 0x9a, 0xce, 0xbd, 0xf0, 0xf0, 0xfb);
		
		/// <summary>
		/// DomainRole Action
		/// Description for
		/// DSLFactory.Candle.SystemModel.ActionHasDependencyProperties.Action
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ActionHasDependencyProperties/Action.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ActionHasDependencyProperties/Action.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DependencyProperties", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ActionHasDependencyProperties/Action.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("953238e2-e8f0-40a8-b193-9acebdf0f0fb")]
		public virtual Action Action
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Action)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Action of a DependencyProperty
		/// <summary>
		/// Gets Action.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Action GetAction(DependencyProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DependencyPropertyDomainRoleId) as Action;
		}
		
		/// <summary>
		/// Sets Action.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAction(DependencyProperty element, Action newAction)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DependencyPropertyDomainRoleId, newAction);
		}
		#endregion
		#region DependencyProperty domain role code
		
		/// <summary>
		/// DependencyProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid DependencyPropertyDomainRoleId = new global::System.Guid(0x16d3cf91, 0x57fb, 0x49e6, 0x8a, 0x0b, 0x41, 0x17, 0xa4, 0x25, 0xfc, 0xef);
		
		/// <summary>
		/// DomainRole DependencyProperty
		/// Description for
		/// DSLFactory.Candle.SystemModel.ActionHasDependencyProperties.DependencyProperty
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ActionHasDependencyProperties/DependencyProperty.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ActionHasDependencyProperties/DependencyProperty.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Action", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ActionHasDependencyProperties/DependencyProperty.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("16d3cf91-57fb-49e6-8a0b-4117a425fcef")]
		public virtual DependencyProperty DependencyProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DependencyProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, DependencyPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DependencyPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DependencyProperties of a Action
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DependencyProperty> GetDependencyProperties(Action element)
		{
			return new DslModeling::LinkedElementCollection<DependencyProperty>(element, ActionDomainRoleId);
		}
		#endregion
		#region Action link accessor
		/// <summary>
		/// Get the list of ActionHasDependencyProperties links to a Action.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties> GetLinksToDependencyProperties ( global::DSLFactory.Candle.SystemModel.Action actionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties>(actionInstance, global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties.ActionDomainRoleId);
		}
		#endregion
		#region DependencyProperty link accessor
		/// <summary>
		/// Get the ActionHasDependencyProperties link to a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties GetLinkToAction (global::DSLFactory.Candle.SystemModel.DependencyProperty dependencyPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties>(dependencyPropertyInstance, global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties.DependencyPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DependencyProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ActionHasDependencyProperties instance accessors
		
		/// <summary>
		/// Get any ActionHasDependencyProperties links between a given Action and a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties> GetLinks( global::DSLFactory.Candle.SystemModel.Action source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties>(source, global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties.ActionDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ActionHasDependencyProperties link between a given Actionand a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties GetLink( global::DSLFactory.Candle.SystemModel.Action source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties>(source, global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties.ActionDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ActionHasDependencyProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship AssociationHasForeignKeys
	/// Description for DSLFactory.Candle.SystemModel.AssociationHasForeignKeys
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4cebbeaa-bf86-4ff3-a7ac-ecb7d994e80f")]
	public partial class AssociationHasForeignKeys : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssociationHasForeignKeys domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4cebbeaa, 0xbf86, 0x4ff3, 0xa7, 0xac, 0xec, 0xb7, 0xd9, 0x94, 0xe8, 0x0f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AssociationHasForeignKeys link in the same Partition as the given Association
		/// </summary>
		/// <param name="source">Association to use as the source of the relationship.</param>
		/// <param name="target">ForeignKey to use as the target of the relationship.</param>
		public AssociationHasForeignKeys(Association source, ForeignKey target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AssociationHasForeignKeys.AssociationDomainRoleId, source), new DslModeling::RoleAssignment(AssociationHasForeignKeys.ForeignKeyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationHasForeignKeys(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationHasForeignKeys(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationHasForeignKeys(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationHasForeignKeys(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Association domain role code
		
		/// <summary>
		/// Association domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationDomainRoleId = new global::System.Guid(0x30c7eb59, 0x0376, 0x4654, 0x8a, 0xfe, 0x6e, 0x76, 0x35, 0x3e, 0x3e, 0x40);
		
		/// <summary>
		/// DomainRole Association
		/// Description for
		/// DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.Association
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AssociationHasForeignKeys/Association.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssociationHasForeignKeys/Association.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ForeignKeys", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.AssociationHasForeignKeys/Association.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("30c7eb59-0376-4654-8afe-6e76353e3e40")]
		public virtual Association Association
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Association)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Association of a ForeignKey
		/// <summary>
		/// Gets Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Association GetAssociation(ForeignKey element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ForeignKeyDomainRoleId) as Association;
		}
		
		/// <summary>
		/// Sets Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAssociation(ForeignKey element, Association newAssociation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ForeignKeyDomainRoleId, newAssociation);
		}
		#endregion
		#region ForeignKey domain role code
		
		/// <summary>
		/// ForeignKey domain role Id.
		/// </summary>
		public static readonly global::System.Guid ForeignKeyDomainRoleId = new global::System.Guid(0x11f9ae57, 0x8fd0, 0x41bf, 0xa0, 0x4b, 0xbb, 0x9b, 0x66, 0xa0, 0xf3, 0x5b);
		
		/// <summary>
		/// DomainRole ForeignKey
		/// Description for
		/// DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.ForeignKey
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.AssociationHasForeignKeys/ForeignKey.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.AssociationHasForeignKeys/ForeignKey.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Association", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.AssociationHasForeignKeys/ForeignKey.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("11f9ae57-8fd0-41bf-a04b-bb9b66a0f35b")]
		public virtual ForeignKey ForeignKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ForeignKey)DslModeling::DomainRoleInfo.GetRolePlayer(this, ForeignKeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ForeignKeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ForeignKeys of a Association
		/// <summary>
		/// Gets a list of ForeignKeys.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ForeignKey> GetForeignKeys(Association element)
		{
			return new DslModeling::LinkedElementCollection<ForeignKey>(element, AssociationDomainRoleId);
		}
		#endregion
		#region Association link accessor
		/// <summary>
		/// Get the list of AssociationHasForeignKeys links to a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys> GetLinksToForeignKeys ( global::DSLFactory.Candle.SystemModel.Association associationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys>(associationInstance, global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.AssociationDomainRoleId);
		}
		#endregion
		#region ForeignKey link accessor
		/// <summary>
		/// Get the AssociationHasForeignKeys link to a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys GetLinkToAssociation (global::DSLFactory.Candle.SystemModel.ForeignKey foreignKeyInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys>(foreignKeyInstance, global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.ForeignKeyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ForeignKey not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AssociationHasForeignKeys instance accessors
		
		/// <summary>
		/// Get any AssociationHasForeignKeys links between a given Association and a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys> GetLinks( global::DSLFactory.Candle.SystemModel.Association source, global::DSLFactory.Candle.SystemModel.ForeignKey target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys>(source, global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.AssociationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys link in links )
			{
				if ( target.Equals(link.ForeignKey) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssociationHasForeignKeys link between a given Associationand a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys GetLink( global::DSLFactory.Candle.SystemModel.Association source, global::DSLFactory.Candle.SystemModel.ForeignKey target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys>(source, global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys.AssociationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.AssociationHasForeignKeys link in links )
			{
				if ( target.Equals(link.ForeignKey) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ForeignKeyReferencesProperty
	/// Description for DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("33738785-17a6-4ed7-a604-3ffa48a87c7e")]
	public partial class ForeignKeyReferencesProperty : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ForeignKeyReferencesProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x33738785, 0x17a6, 0x4ed7, 0xa6, 0x04, 0x3f, 0xfa, 0x48, 0xa8, 0x7c, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ForeignKeyReferencesProperty link in the same Partition as the given ForeignKey
		/// </summary>
		/// <param name="source">ForeignKey to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public ForeignKeyReferencesProperty(ForeignKey source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ForeignKeyReferencesProperty.ForeignKeyDomainRoleId, source), new DslModeling::RoleAssignment(ForeignKeyReferencesProperty.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ForeignKeyReferencesProperty(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ForeignKeyReferencesProperty(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ForeignKeyReferencesProperty(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ForeignKeyReferencesProperty(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ForeignKey domain role code
		
		/// <summary>
		/// ForeignKey domain role Id.
		/// </summary>
		public static readonly global::System.Guid ForeignKeyDomainRoleId = new global::System.Guid(0x55f9e3d6, 0xcc51, 0x4cf3, 0xad, 0x24, 0x7c, 0xeb, 0x36, 0x36, 0x2a, 0x85);
		
		/// <summary>
		/// DomainRole ForeignKey
		/// Description for
		/// DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty.ForeignKey
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty/ForeignKey.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty/ForeignKey.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Column", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty/ForeignKey.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("55f9e3d6-cc51-4cf3-ad24-7ceb36362a85")]
		public virtual ForeignKey ForeignKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ForeignKey)DslModeling::DomainRoleInfo.GetRolePlayer(this, ForeignKeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ForeignKeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ForeignKeys of a Property
		/// <summary>
		/// Gets a list of ForeignKeys.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ForeignKey> GetForeignKeys(Property element)
		{
			return new DslModeling::LinkedElementCollection<ForeignKey>(element, PropertyDomainRoleId);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x63387a3a, 0xaef7, 0x4285, 0xb1, 0x04, 0x9c, 0x05, 0xee, 0xce, 0x0b, 0x9c);
		
		/// <summary>
		/// DomainRole Property
		/// Description for
		/// DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty.Property
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty/Property.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty/Property.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ForeignKeys", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty/Property.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("63387a3a-aef7-4285-b104-9c05eece0b9c")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Column of a ForeignKey
		/// <summary>
		/// Gets Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Property GetColumn(ForeignKey element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ForeignKeyDomainRoleId) as Property;
		}
		
		/// <summary>
		/// Sets Column.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetColumn(ForeignKey element, Property newProperty)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ForeignKeyDomainRoleId, newProperty);
		}
		#endregion
		#region ForeignKey link accessor
		/// <summary>
		/// Get the ForeignKeyReferencesProperty link to a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty GetLinkToColumn (global::DSLFactory.Candle.SystemModel.ForeignKey foreignKeyInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty>(foreignKeyInstance, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty.ForeignKeyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ForeignKey not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the list of ForeignKeyReferencesProperty links to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty> GetLinksToForeignKeys ( global::DSLFactory.Candle.SystemModel.Property propertyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty>(propertyInstance, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty.PropertyDomainRoleId);
		}
		#endregion
		#region ForeignKeyReferencesProperty instance accessors
		
		/// <summary>
		/// Get any ForeignKeyReferencesProperty links between a given ForeignKey and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty> GetLinks( global::DSLFactory.Candle.SystemModel.ForeignKey source, global::DSLFactory.Candle.SystemModel.Property target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty>(source, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty.ForeignKeyDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ForeignKeyReferencesProperty link between a given ForeignKeyand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty GetLink( global::DSLFactory.Candle.SystemModel.ForeignKey source, global::DSLFactory.Candle.SystemModel.Property target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty>(source, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty.ForeignKeyDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesProperty link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ForeignKeyReferencesPrimaryKey
	/// Description for DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f0238ad9-0d54-4338-a97e-892a7b6b616b")]
	public partial class ForeignKeyReferencesPrimaryKey : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ForeignKeyReferencesPrimaryKey domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf0238ad9, 0x0d54, 0x4338, 0xa9, 0x7e, 0x89, 0x2a, 0x7b, 0x6b, 0x61, 0x6b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ForeignKeyReferencesPrimaryKey link in the same Partition as the given ForeignKey
		/// </summary>
		/// <param name="source">ForeignKey to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public ForeignKeyReferencesPrimaryKey(ForeignKey source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ForeignKeyReferencesPrimaryKey.ForeignKeyDomainRoleId, source), new DslModeling::RoleAssignment(ForeignKeyReferencesPrimaryKey.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ForeignKeyReferencesPrimaryKey(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ForeignKeyReferencesPrimaryKey(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ForeignKeyReferencesPrimaryKey(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ForeignKeyReferencesPrimaryKey(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ForeignKey domain role code
		
		/// <summary>
		/// ForeignKey domain role Id.
		/// </summary>
		public static readonly global::System.Guid ForeignKeyDomainRoleId = new global::System.Guid(0xe82680e9, 0x4192, 0x493e, 0x91, 0xdd, 0xe1, 0xb4, 0x42, 0x1c, 0x0f, 0x19);
		
		/// <summary>
		/// DomainRole ForeignKey
		/// Description for
		/// DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey.ForeignKey
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey/ForeignKey.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey/ForeignKey.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PrimaryKey", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey/ForeignKey.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e82680e9-4192-493e-91dd-e1b4421c0f19")]
		public virtual ForeignKey ForeignKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ForeignKey)DslModeling::DomainRoleInfo.GetRolePlayer(this, ForeignKeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ForeignKeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ForeignKeys of a Property
		/// <summary>
		/// Gets a list of ForeignKeys.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ForeignKey> GetForeignKeys(Property element)
		{
			return new DslModeling::LinkedElementCollection<ForeignKey>(element, PropertyDomainRoleId);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x80590438, 0x39bb, 0x4f15, 0x8f, 0xfd, 0x9b, 0xe6, 0x05, 0xdc, 0xdb, 0x91);
		
		/// <summary>
		/// DomainRole Property
		/// Description for
		/// DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey.Property
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey/Property.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey/Property.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ForeignKeys", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey/Property.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("80590438-39bb-4f15-8ffd-9be605dcdb91")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PrimaryKey of a ForeignKey
		/// <summary>
		/// Gets PrimaryKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Property GetPrimaryKey(ForeignKey element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ForeignKeyDomainRoleId) as Property;
		}
		
		/// <summary>
		/// Sets PrimaryKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPrimaryKey(ForeignKey element, Property newProperty)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ForeignKeyDomainRoleId, newProperty);
		}
		#endregion
		#region ForeignKey link accessor
		/// <summary>
		/// Get the ForeignKeyReferencesPrimaryKey link to a ForeignKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey GetLinkToPrimaryKey (global::DSLFactory.Candle.SystemModel.ForeignKey foreignKeyInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey>(foreignKeyInstance, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey.ForeignKeyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ForeignKey not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the list of ForeignKeyReferencesPrimaryKey links to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey> GetLinksToForeignKeys ( global::DSLFactory.Candle.SystemModel.Property propertyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey>(propertyInstance, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey.PropertyDomainRoleId);
		}
		#endregion
		#region ForeignKeyReferencesPrimaryKey instance accessors
		
		/// <summary>
		/// Get any ForeignKeyReferencesPrimaryKey links between a given ForeignKey and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey> GetLinks( global::DSLFactory.Candle.SystemModel.ForeignKey source, global::DSLFactory.Candle.SystemModel.Property target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey>(source, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey.ForeignKeyDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ForeignKeyReferencesPrimaryKey link between a given ForeignKeyand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey GetLink( global::DSLFactory.Candle.SystemModel.ForeignKey source, global::DSLFactory.Candle.SystemModel.Property target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey>(source, global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey.ForeignKeyDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ForeignKeyReferencesPrimaryKey link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship TypeWithOperationsHasOperations
	/// Description for DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("76cb69a5-0d71-4723-9f2c-429aa33eae64")]
	public partial class TypeWithOperationsHasOperations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TypeWithOperationsHasOperations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x76cb69a5, 0x0d71, 0x4723, 0x9f, 0x2c, 0x42, 0x9a, 0xa3, 0x3e, 0xae, 0x64);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TypeWithOperationsHasOperations link in the same Partition as the given TypeWithOperations
		/// </summary>
		/// <param name="source">TypeWithOperations to use as the source of the relationship.</param>
		/// <param name="target">Operation to use as the target of the relationship.</param>
		public TypeWithOperationsHasOperations(TypeWithOperations source, Operation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TypeWithOperationsHasOperations.ParentDomainRoleId, source), new DslModeling::RoleAssignment(TypeWithOperationsHasOperations.OperationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TypeWithOperationsHasOperations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TypeWithOperationsHasOperations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TypeWithOperationsHasOperations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TypeWithOperationsHasOperations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0x206d7a4e, 0x17a9, 0x4c1d, 0x91, 0x65, 0xfb, 0xd5, 0x61, 0x8e, 0x36, 0xfb);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for
		/// DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations/Parent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations/Parent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Operations", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations/Parent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("206d7a4e-17a9-4c1d-9165-fbd5618e36fb")]
		public virtual TypeWithOperations Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TypeWithOperations)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a Operation
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TypeWithOperations GetParent(Operation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperationDomainRoleId) as TypeWithOperations;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(Operation element, TypeWithOperations newParent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperationDomainRoleId, newParent);
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0xde73b35f, 0xf44f, 0x48e9, 0xb5, 0x59, 0xa0, 0xff, 0xcc, 0x94, 0x0d, 0x86);
		
		/// <summary>
		/// DomainRole Operation
		/// Description for
		/// DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.Operation
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations/Operation.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations/Operation.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations/Operation.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("de73b35f-f44f-48e9-b559-a0ffcc940d86")]
		public virtual Operation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Operation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operations of a TypeWithOperations
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Operation> GetOperations(TypeWithOperations element)
		{
			return new DslModeling::LinkedElementCollection<Operation>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of TypeWithOperationsHasOperations links to a TypeWithOperations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations> GetLinksToOperations ( global::DSLFactory.Candle.SystemModel.TypeWithOperations parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations>(parentInstance, global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.ParentDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the TypeWithOperationsHasOperations link to a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations GetLinkToParent (global::DSLFactory.Candle.SystemModel.Operation operationInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations>(operationInstance, global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.OperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TypeWithOperationsHasOperations instance accessors
		
		/// <summary>
		/// Get any TypeWithOperationsHasOperations links between a given TypeWithOperations and a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations> GetLinks( global::DSLFactory.Candle.SystemModel.TypeWithOperations source, global::DSLFactory.Candle.SystemModel.Operation target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations>(source, global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.ParentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TypeWithOperationsHasOperations link between a given TypeWithOperationsand a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations GetLink( global::DSLFactory.Candle.SystemModel.TypeWithOperations source, global::DSLFactory.Candle.SystemModel.Operation target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations>(source, global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations.ParentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.TypeWithOperationsHasOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ModelRootHasComponent
	/// Description for DSLFactory.Candle.SystemModel.ModelRootHasComponent
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ModelRootHasComponent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ModelRootHasComponent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f3dbc221-9d31-4e50-a9c6-dc1e7388ad23")]
	public partial class ModelRootHasComponent : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasComponent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf3dbc221, 0x9d31, 0x4e50, 0xa9, 0xc6, 0xdc, 0x1e, 0x73, 0x88, 0xad, 0x23);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasComponent link in the same Partition as the given CandleModel
		/// </summary>
		/// <param name="source">CandleModel to use as the source of the relationship.</param>
		/// <param name="target">Component to use as the target of the relationship.</param>
		public ModelRootHasComponent(CandleModel source, Component target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasComponent.CandleModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasComponent.ComponentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComponent(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComponent(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComponent(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComponent(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CandleModel domain role code
		
		/// <summary>
		/// CandleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid CandleModelDomainRoleId = new global::System.Guid(0x5d922d58, 0x95f7, 0x41bc, 0x9a, 0xeb, 0x75, 0xa9, 0x6e, 0xc8, 0x89, 0xe0);
		
		/// <summary>
		/// DomainRole CandleModel
		/// Description for DSLFactory.Candle.SystemModel.ModelRootHasComponent.CandleModel
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ModelRootHasComponent/CandleModel.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ModelRootHasComponent/CandleModel.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Component", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ModelRootHasComponent/CandleModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5d922d58-95f7-41bc-9aeb-75a96ec889e0")]
		public virtual CandleModel CandleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CandleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, CandleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CandleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Component
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CandleModel GetModel(Component element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ComponentDomainRoleId) as CandleModel;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Component element, CandleModel newCandleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ComponentDomainRoleId, newCandleModel);
		}
		#endregion
		#region Component domain role code
		
		/// <summary>
		/// Component domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentDomainRoleId = new global::System.Guid(0x99972ceb, 0xe13e, 0x43d9, 0xb7, 0x6b, 0x22, 0x85, 0x09, 0xf4, 0x0b, 0x32);
		
		/// <summary>
		/// DomainRole Component
		/// Description for DSLFactory.Candle.SystemModel.ModelRootHasComponent.Component
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ModelRootHasComponent/Component.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ModelRootHasComponent/Component.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ModelRootHasComponent/Component.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("99972ceb-e13e-43d9-b76b-228509f40b32")]
		public virtual Component Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Component)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Component of a CandleModel
		/// <summary>
		/// Gets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Component GetComponent(CandleModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CandleModelDomainRoleId) as Component;
		}
		
		/// <summary>
		/// Sets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponent(CandleModel element, Component newComponent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CandleModelDomainRoleId, newComponent);
		}
		#endregion
		#region CandleModel link accessor
		/// <summary>
		/// Get the ModelRootHasComponent link to a CandleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ModelRootHasComponent GetLinkToComponent (global::DSLFactory.Candle.SystemModel.CandleModel candleModelInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ModelRootHasComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ModelRootHasComponent>(candleModelInstance, global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.CandleModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CandleModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Component link accessor
		/// <summary>
		/// Get the ModelRootHasComponent link to a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ModelRootHasComponent GetLinkToModel (global::DSLFactory.Candle.SystemModel.Component componentInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ModelRootHasComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ModelRootHasComponent>(componentInstance, global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.ComponentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Component not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasComponent instance accessors
		
		/// <summary>
		/// Get any ModelRootHasComponent links between a given CandleModel and a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ModelRootHasComponent> GetLinks( global::DSLFactory.Candle.SystemModel.CandleModel source, global::DSLFactory.Candle.SystemModel.Component target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ModelRootHasComponent> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ModelRootHasComponent>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ModelRootHasComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ModelRootHasComponent>(source, global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.CandleModelDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ModelRootHasComponent link in links )
			{
				if ( target.Equals(link.Component) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasComponent link between a given CandleModeland a Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ModelRootHasComponent GetLink( global::DSLFactory.Candle.SystemModel.CandleModel source, global::DSLFactory.Candle.SystemModel.Component target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ModelRootHasComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ModelRootHasComponent>(source, global::DSLFactory.Candle.SystemModel.ModelRootHasComponent.CandleModelDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ModelRootHasComponent link in links )
			{
				if ( target.Equals(link.Component) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ExternalServiceReference
	/// Description for DSLFactory.Candle.SystemModel.ExternalServiceReference
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalServiceReference.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalServiceReference.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("181772b6-8a28-46ee-9964-068820e0280c")]
	public partial class ExternalServiceReference : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExternalServiceReference domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x181772b6, 0x8a28, 0x46ee, 0x99, 0x64, 0x06, 0x88, 0x20, 0xe0, 0x28, 0x0c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExternalServiceReference link in the same Partition as the given AbstractLayer
		/// </summary>
		/// <param name="source">AbstractLayer to use as the source of the relationship.</param>
		/// <param name="target">ExternalPublicPort to use as the target of the relationship.</param>
		public ExternalServiceReference(AbstractLayer source, ExternalPublicPort target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExternalServiceReference.ClientDomainRoleId, source), new DslModeling::RoleAssignment(ExternalServiceReference.ExternalPublicPortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternalServiceReference(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternalServiceReference(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternalServiceReference(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternalServiceReference(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Client domain role code
		
		/// <summary>
		/// Client domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClientDomainRoleId = new global::System.Guid(0x6d3a67cb, 0x1918, 0x4516, 0x9f, 0xdc, 0x66, 0xf9, 0x34, 0xc5, 0xa7, 0xe2);
		
		/// <summary>
		/// DomainRole Client
		/// Description for DSLFactory.Candle.SystemModel.ExternalServiceReference.Client
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalServiceReference/Client.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalServiceReference/Client.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExternalServiceReferences", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ExternalServiceReference/Client.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6d3a67cb-1918-4516-9fdc-66f934c5a7e2")]
		public virtual AbstractLayer Client
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClientDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClientDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Clients of a ExternalPublicPort
		/// <summary>
		/// Gets a list of Clients.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AbstractLayer> GetClients(ExternalPublicPort element)
		{
			return new DslModeling::LinkedElementCollection<AbstractLayer>(element, ExternalPublicPortDomainRoleId);
		}
		#endregion
		#region ExternalPublicPort domain role code
		
		/// <summary>
		/// ExternalPublicPort domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExternalPublicPortDomainRoleId = new global::System.Guid(0x66817e3f, 0x8a01, 0x4efb, 0x99, 0x26, 0xbd, 0x36, 0xa3, 0x9e, 0x0f, 0xe1);
		
		/// <summary>
		/// DomainRole ExternalPublicPort
		/// Description for
		/// DSLFactory.Candle.SystemModel.ExternalServiceReference.ExternalPublicPort
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalServiceReference/ExternalPublicPort.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalServiceReference/ExternalPublicPort.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Clients", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ExternalServiceReference/ExternalPublicPort.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("66817e3f-8a01-4efb-9926-bd36a39e0fe1")]
		public virtual ExternalPublicPort ExternalPublicPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExternalPublicPort)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExternalPublicPortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExternalPublicPortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExternalServiceReferences of a AbstractLayer
		/// <summary>
		/// Gets a list of ExternalServiceReferences.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExternalPublicPort> GetExternalServiceReferences(AbstractLayer element)
		{
			return new DslModeling::LinkedElementCollection<ExternalPublicPort>(element, ClientDomainRoleId);
		}
		#endregion
		#region ConfigurationMode domain property code
		
		/// <summary>
		/// ConfigurationMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationModeDomainPropertyId = new global::System.Guid(0x073ecae8, 0xe64f, 0x4549, 0x85, 0x01, 0xe5, 0x68, 0x4e, 0xc4, 0x7c, 0xa7);
		
		/// <summary>
		/// Storage for ConfigurationMode
		/// </summary>
		private global::System.String configurationModePropertyStorage = "*";
		
		/// <summary>
		/// Gets or sets the value of ConfigurationMode domain property.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ExternalServiceReference.Configuration Mode
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalServiceReference/ConfigurationMode.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalServiceReference/ConfigurationMode.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*")]
		[DslModeling::DomainObjectId("073ecae8-e64f-4549-8501-e5684ec47ca7")]
		public global::System.String ConfigurationMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return configurationModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConfigurationModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExternalServiceReference.ConfigurationMode domain property.
		/// </summary>
		internal sealed partial class ConfigurationModePropertyHandler : DslModeling::DomainPropertyValueHandler<ExternalServiceReference, global::System.String>
		{
			private ConfigurationModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExternalServiceReference.ConfigurationMode domain property value handler.
			/// </summary>
			public static readonly ConfigurationModePropertyHandler Instance = new ConfigurationModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExternalServiceReference.ConfigurationMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConfigurationModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ExternalServiceReference element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.configurationModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExternalServiceReference element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.configurationModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Scope domain property code
		
		/// <summary>
		/// Scope domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScopeDomainPropertyId = new global::System.Guid(0x7723fd9c, 0x73f2, 0x407d, 0xa8, 0x36, 0xa3, 0x6f, 0xfb, 0x43, 0x32, 0xa3);
		
		/// <summary>
		/// Storage for Scope
		/// </summary>
		private ReferenceScope scopePropertyStorage = DslModeling::SerializationUtilities.GetValue<ReferenceScope>("Compilation");
		
		/// <summary>
		/// Gets or sets the value of Scope domain property.
		/// Description for DSLFactory.Candle.SystemModel.ExternalServiceReference.Scope
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalServiceReference/Scope.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalServiceReference/Scope.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(typeof(global::DSLFactory.Candle.SystemModel.ReferenceScope), "Compilation")]
		[DslModeling::DomainObjectId("7723fd9c-73f2-407d-a836-a36ffb4332a3")]
		public ReferenceScope Scope
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scopePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScopePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExternalServiceReference.Scope domain property.
		/// </summary>
		internal sealed partial class ScopePropertyHandler : DslModeling::DomainPropertyValueHandler<ExternalServiceReference, ReferenceScope>
		{
			private ScopePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExternalServiceReference.Scope domain property value handler.
			/// </summary>
			public static readonly ScopePropertyHandler Instance = new ScopePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExternalServiceReference.Scope domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScopeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceScope GetValue(ExternalServiceReference element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scopePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExternalServiceReference element, ReferenceScope newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReferenceScope oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scopePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region DependencyProperties opposite domain role accessor
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.ExternalServiceReference
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DependencyProperty> DependencyProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<DependencyProperty>(this, global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.ExternalServiceReferenceDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region Client link accessor
		/// <summary>
		/// Get the list of ExternalServiceReference links to a AbstractLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ExternalServiceReference> GetLinksToExternalServiceReferences ( global::DSLFactory.Candle.SystemModel.AbstractLayer clientInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalServiceReference>(clientInstance, global::DSLFactory.Candle.SystemModel.ExternalServiceReference.ClientDomainRoleId);
		}
		#endregion
		#region ExternalPublicPort link accessor
		/// <summary>
		/// Get the list of ExternalServiceReference links to a ExternalPublicPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ExternalServiceReference> GetLinksToClients ( global::DSLFactory.Candle.SystemModel.ExternalPublicPort externalPublicPortInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalServiceReference>(externalPublicPortInstance, global::DSLFactory.Candle.SystemModel.ExternalServiceReference.ExternalPublicPortDomainRoleId);
		}
		#endregion
		#region ExternalServiceReference instance accessors
		
		/// <summary>
		/// Get any ExternalServiceReference links between a given AbstractLayer and a ExternalPublicPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ExternalServiceReference> GetLinks( global::DSLFactory.Candle.SystemModel.AbstractLayer source, global::DSLFactory.Candle.SystemModel.ExternalPublicPort target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ExternalServiceReference> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ExternalServiceReference>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ExternalServiceReference> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalServiceReference>(source, global::DSLFactory.Candle.SystemModel.ExternalServiceReference.ClientDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ExternalServiceReference link in links )
			{
				if ( target.Equals(link.ExternalPublicPort) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExternalServiceReference link between a given AbstractLayerand a ExternalPublicPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ExternalServiceReference GetLink( global::DSLFactory.Candle.SystemModel.AbstractLayer source, global::DSLFactory.Candle.SystemModel.ExternalPublicPort target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ExternalServiceReference> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalServiceReference>(source, global::DSLFactory.Candle.SystemModel.ExternalServiceReference.ClientDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ExternalServiceReference link in links )
			{
				if ( target.Equals(link.ExternalPublicPort) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship LayerHasArtifacts
	/// Description for DSLFactory.Candle.SystemModel.LayerHasArtifacts
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerHasArtifacts.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerHasArtifacts.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e873a742-51f0-4194-9c66-8380fc6057a6")]
	public partial class LayerHasArtifacts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LayerHasArtifacts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe873a742, 0x51f0, 0x4194, 0x9c, 0x66, 0x83, 0x80, 0xfc, 0x60, 0x57, 0xa6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LayerHasArtifacts link in the same Partition as the given AbstractLayer
		/// </summary>
		/// <param name="source">AbstractLayer to use as the source of the relationship.</param>
		/// <param name="target">Artifact to use as the target of the relationship.</param>
		public LayerHasArtifacts(AbstractLayer source, Artifact target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LayerHasArtifacts.AbstractLayerDomainRoleId, source), new DslModeling::RoleAssignment(LayerHasArtifacts.ArtifactDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayerHasArtifacts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayerHasArtifacts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayerHasArtifacts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayerHasArtifacts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AbstractLayer domain role code
		
		/// <summary>
		/// AbstractLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractLayerDomainRoleId = new global::System.Guid(0x2394aa19, 0xd589, 0x4b0e, 0x86, 0x6f, 0xc4, 0x9e, 0x2b, 0x64, 0xb4, 0x54);
		
		/// <summary>
		/// DomainRole AbstractLayer
		/// Description for DSLFactory.Candle.SystemModel.LayerHasArtifacts.AbstractLayer
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerHasArtifacts/AbstractLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerHasArtifacts/AbstractLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Artifacts", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.LayerHasArtifacts/AbstractLayer.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2394aa19-d589-4b0e-866f-c49e2b64b454")]
		public virtual AbstractLayer AbstractLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Layer of a Artifact
		/// <summary>
		/// Gets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AbstractLayer GetLayer(Artifact element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ArtifactDomainRoleId) as AbstractLayer;
		}
		
		/// <summary>
		/// Sets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLayer(Artifact element, AbstractLayer newAbstractLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ArtifactDomainRoleId, newAbstractLayer);
		}
		#endregion
		#region Artifact domain role code
		
		/// <summary>
		/// Artifact domain role Id.
		/// </summary>
		public static readonly global::System.Guid ArtifactDomainRoleId = new global::System.Guid(0xb9d8e6a1, 0x95c0, 0x462f, 0xa4, 0x43, 0x62, 0x90, 0x2a, 0x39, 0xec, 0x8e);
		
		/// <summary>
		/// DomainRole Artifact
		/// Description for DSLFactory.Candle.SystemModel.LayerHasArtifacts.Artifact
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerHasArtifacts/Artifact.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerHasArtifacts/Artifact.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Layer", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.LayerHasArtifacts/Artifact.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b9d8e6a1-95c0-462f-a443-62902a39ec8e")]
		public virtual Artifact Artifact
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Artifact)DslModeling::DomainRoleInfo.GetRolePlayer(this, ArtifactDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ArtifactDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Artifacts of a AbstractLayer
		/// <summary>
		/// Gets a list of Artifacts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Artifact> GetArtifacts(AbstractLayer element)
		{
			return new DslModeling::LinkedElementCollection<Artifact>(element, AbstractLayerDomainRoleId);
		}
		#endregion
		#region AbstractLayer link accessor
		/// <summary>
		/// Get the list of LayerHasArtifacts links to a AbstractLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.LayerHasArtifacts> GetLinksToArtifacts ( global::DSLFactory.Candle.SystemModel.AbstractLayer abstractLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasArtifacts>(abstractLayerInstance, global::DSLFactory.Candle.SystemModel.LayerHasArtifacts.AbstractLayerDomainRoleId);
		}
		#endregion
		#region Artifact link accessor
		/// <summary>
		/// Get the LayerHasArtifacts link to a Artifact.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.LayerHasArtifacts GetLinkToLayer (global::DSLFactory.Candle.SystemModel.Artifact artifactInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerHasArtifacts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasArtifacts>(artifactInstance, global::DSLFactory.Candle.SystemModel.LayerHasArtifacts.ArtifactDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Artifact not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LayerHasArtifacts instance accessors
		
		/// <summary>
		/// Get any LayerHasArtifacts links between a given AbstractLayer and a Artifact.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.LayerHasArtifacts> GetLinks( global::DSLFactory.Candle.SystemModel.AbstractLayer source, global::DSLFactory.Candle.SystemModel.Artifact target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.LayerHasArtifacts> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.LayerHasArtifacts>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerHasArtifacts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasArtifacts>(source, global::DSLFactory.Candle.SystemModel.LayerHasArtifacts.AbstractLayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.LayerHasArtifacts link in links )
			{
				if ( target.Equals(link.Artifact) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LayerHasArtifacts link between a given AbstractLayerand a Artifact.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.LayerHasArtifacts GetLink( global::DSLFactory.Candle.SystemModel.AbstractLayer source, global::DSLFactory.Candle.SystemModel.Artifact target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerHasArtifacts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasArtifacts>(source, global::DSLFactory.Candle.SystemModel.LayerHasArtifacts.AbstractLayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.LayerHasArtifacts link in links )
			{
				if ( target.Equals(link.Artifact) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship InterfaceLayerHasContracts
	/// Description for DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b461b9ea-396d-47da-a827-2221237d7865")]
	public partial class InterfaceLayerHasContracts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InterfaceLayerHasContracts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb461b9ea, 0x396d, 0x47da, 0xa8, 0x27, 0x22, 0x21, 0x23, 0x7d, 0x78, 0x65);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InterfaceLayerHasContracts link in the same Partition as the given InterfaceLayer
		/// </summary>
		/// <param name="source">InterfaceLayer to use as the source of the relationship.</param>
		/// <param name="target">ServiceContract to use as the target of the relationship.</param>
		public InterfaceLayerHasContracts(InterfaceLayer source, ServiceContract target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InterfaceLayerHasContracts.InterfaceLayerDomainRoleId, source), new DslModeling::RoleAssignment(InterfaceLayerHasContracts.ServiceContractDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceLayerHasContracts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceLayerHasContracts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceLayerHasContracts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceLayerHasContracts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InterfaceLayer domain role code
		
		/// <summary>
		/// InterfaceLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid InterfaceLayerDomainRoleId = new global::System.Guid(0x9d12181d, 0xbd22, 0x4ae7, 0xae, 0xc8, 0x7f, 0x79, 0xba, 0x5f, 0xd1, 0xf0);
		
		/// <summary>
		/// DomainRole InterfaceLayer
		/// Description for
		/// DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.InterfaceLayer
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts/InterfaceLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts/InterfaceLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ServiceContracts", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts/InterfaceLayer.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9d12181d-bd22-4ae7-aec8-7f79ba5fd1f0")]
		public virtual InterfaceLayer InterfaceLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InterfaceLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, InterfaceLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InterfaceLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Layer of a ServiceContract
		/// <summary>
		/// Gets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InterfaceLayer GetLayer(ServiceContract element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ServiceContractDomainRoleId) as InterfaceLayer;
		}
		
		/// <summary>
		/// Sets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLayer(ServiceContract element, InterfaceLayer newInterfaceLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ServiceContractDomainRoleId, newInterfaceLayer);
		}
		#endregion
		#region ServiceContract domain role code
		
		/// <summary>
		/// ServiceContract domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceContractDomainRoleId = new global::System.Guid(0x3d04b83e, 0x5824, 0x41d9, 0xbc, 0x2a, 0x04, 0x40, 0x91, 0xa1, 0x98, 0xb3);
		
		/// <summary>
		/// DomainRole ServiceContract
		/// Description for
		/// DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.ServiceContract
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts/ServiceContract.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts/ServiceContract.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Layer", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts/ServiceContract.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("3d04b83e-5824-41d9-bc2a-044091a198b3")]
		public virtual ServiceContract ServiceContract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceContract)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceContractDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceContractDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceContracts of a InterfaceLayer
		/// <summary>
		/// Gets a list of ServiceContracts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ServiceContract> GetServiceContracts(InterfaceLayer element)
		{
			return new DslModeling::LinkedElementCollection<ServiceContract>(element, InterfaceLayerDomainRoleId);
		}
		#endregion
		#region InterfaceLayer link accessor
		/// <summary>
		/// Get the list of InterfaceLayerHasContracts links to a InterfaceLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts> GetLinksToServiceContracts ( global::DSLFactory.Candle.SystemModel.InterfaceLayer interfaceLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts>(interfaceLayerInstance, global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.InterfaceLayerDomainRoleId);
		}
		#endregion
		#region ServiceContract link accessor
		/// <summary>
		/// Get the InterfaceLayerHasContracts link to a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts GetLinkToLayer (global::DSLFactory.Candle.SystemModel.ServiceContract serviceContractInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts>(serviceContractInstance, global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.ServiceContractDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ServiceContract not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InterfaceLayerHasContracts instance accessors
		
		/// <summary>
		/// Get any InterfaceLayerHasContracts links between a given InterfaceLayer and a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts> GetLinks( global::DSLFactory.Candle.SystemModel.InterfaceLayer source, global::DSLFactory.Candle.SystemModel.ServiceContract target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts>(source, global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.InterfaceLayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts link in links )
			{
				if ( target.Equals(link.ServiceContract) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InterfaceLayerHasContracts link between a given InterfaceLayerand a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts GetLink( global::DSLFactory.Candle.SystemModel.InterfaceLayer source, global::DSLFactory.Candle.SystemModel.ServiceContract target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts>(source, global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts.InterfaceLayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.InterfaceLayerHasContracts link in links )
			{
				if ( target.Equals(link.ServiceContract) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ExternalServiceReferenceHasDependencyProperties
	/// Description for
	/// DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("32eed3f0-d6f4-4ffc-8835-f3fb97720e5b")]
	public partial class ExternalServiceReferenceHasDependencyProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExternalServiceReferenceHasDependencyProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x32eed3f0, 0xd6f4, 0x4ffc, 0x88, 0x35, 0xf3, 0xfb, 0x97, 0x72, 0x0e, 0x5b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExternalServiceReferenceHasDependencyProperties link in the same Partition as the given ExternalServiceReference
		/// </summary>
		/// <param name="source">ExternalServiceReference to use as the source of the relationship.</param>
		/// <param name="target">DependencyProperty to use as the target of the relationship.</param>
		public ExternalServiceReferenceHasDependencyProperties(ExternalServiceReference source, DependencyProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExternalServiceReferenceHasDependencyProperties.ExternalServiceReferenceDomainRoleId, source), new DslModeling::RoleAssignment(ExternalServiceReferenceHasDependencyProperties.DependencyPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternalServiceReferenceHasDependencyProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternalServiceReferenceHasDependencyProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternalServiceReferenceHasDependencyProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternalServiceReferenceHasDependencyProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExternalServiceReference domain role code
		
		/// <summary>
		/// ExternalServiceReference domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExternalServiceReferenceDomainRoleId = new global::System.Guid(0xbb8ebd98, 0x9cd8, 0x478a, 0xb0, 0x25, 0x27, 0xbe, 0xab, 0xa9, 0x97, 0xe9);
		
		/// <summary>
		/// DomainRole ExternalServiceReference
		/// Description for
		/// DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.ExternalServiceReference
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties/ExternalServiceReference.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties/ExternalServiceReference.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DependencyProperties", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties/ExternalServiceReference.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bb8ebd98-9cd8-478a-b025-27beaba997e9")]
		public virtual ExternalServiceReference ExternalServiceReference
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExternalServiceReference)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExternalServiceReferenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExternalServiceReferenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExternalServiceReference of a DependencyProperty
		/// <summary>
		/// Gets ExternalServiceReference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExternalServiceReference GetExternalServiceReference(DependencyProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DependencyPropertyDomainRoleId) as ExternalServiceReference;
		}
		
		/// <summary>
		/// Sets ExternalServiceReference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExternalServiceReference(DependencyProperty element, ExternalServiceReference newExternalServiceReference)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DependencyPropertyDomainRoleId, newExternalServiceReference);
		}
		#endregion
		#region DependencyProperty domain role code
		
		/// <summary>
		/// DependencyProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid DependencyPropertyDomainRoleId = new global::System.Guid(0x14e85894, 0x41d0, 0x472c, 0xba, 0xfb, 0x52, 0xc4, 0x30, 0xfc, 0xfa, 0xb0);
		
		/// <summary>
		/// DomainRole DependencyProperty
		/// Description for
		/// DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.DependencyProperty
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties/DependencyProperty.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties/DependencyProperty.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExternalServiceReference", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties/DependencyProperty.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("14e85894-41d0-472c-bafb-52c430fcfab0")]
		public virtual DependencyProperty DependencyProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DependencyProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, DependencyPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DependencyPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DependencyProperties of a ExternalServiceReference
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DependencyProperty> GetDependencyProperties(ExternalServiceReference element)
		{
			return new DslModeling::LinkedElementCollection<DependencyProperty>(element, ExternalServiceReferenceDomainRoleId);
		}
		#endregion
		#region ExternalServiceReference link accessor
		/// <summary>
		/// Get the list of ExternalServiceReferenceHasDependencyProperties links to a ExternalServiceReference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties> GetLinksToDependencyProperties ( global::DSLFactory.Candle.SystemModel.ExternalServiceReference externalServiceReferenceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties>(externalServiceReferenceInstance, global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.ExternalServiceReferenceDomainRoleId);
		}
		#endregion
		#region DependencyProperty link accessor
		/// <summary>
		/// Get the ExternalServiceReferenceHasDependencyProperties link to a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties GetLinkToExternalServiceReference (global::DSLFactory.Candle.SystemModel.DependencyProperty dependencyPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties>(dependencyPropertyInstance, global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.DependencyPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DependencyProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExternalServiceReferenceHasDependencyProperties instance accessors
		
		/// <summary>
		/// Get any ExternalServiceReferenceHasDependencyProperties links between a given ExternalServiceReference and a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties> GetLinks( global::DSLFactory.Candle.SystemModel.ExternalServiceReference source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties>(source, global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.ExternalServiceReferenceDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExternalServiceReferenceHasDependencyProperties link between a given ExternalServiceReferenceand a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties GetLink( global::DSLFactory.Candle.SystemModel.ExternalServiceReference source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties>(source, global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties.ExternalServiceReferenceDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ExternalServiceReferenceHasDependencyProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship LayerPackageContainsLayers
	/// Description for DSLFactory.Candle.SystemModel.LayerPackageContainsLayers
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("2f142ad9-cb6b-47b6-bf8f-9c2ba54d44fd")]
	public partial class LayerPackageContainsLayers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LayerPackageContainsLayers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2f142ad9, 0xcb6b, 0x47b6, 0xbf, 0x8f, 0x9c, 0x2b, 0xa5, 0x4d, 0x44, 0xfd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LayerPackageContainsLayers link in the same Partition as the given LayerPackage
		/// </summary>
		/// <param name="source">LayerPackage to use as the source of the relationship.</param>
		/// <param name="target">Layer to use as the target of the relationship.</param>
		public LayerPackageContainsLayers(LayerPackage source, Layer target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LayerPackageContainsLayers.LayerPackageDomainRoleId, source), new DslModeling::RoleAssignment(LayerPackageContainsLayers.LayerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayerPackageContainsLayers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayerPackageContainsLayers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayerPackageContainsLayers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayerPackageContainsLayers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LayerPackage domain role code
		
		/// <summary>
		/// LayerPackage domain role Id.
		/// </summary>
		public static readonly global::System.Guid LayerPackageDomainRoleId = new global::System.Guid(0xd215b379, 0x0279, 0x469f, 0x80, 0xef, 0xb8, 0xdc, 0xb0, 0x2b, 0x73, 0x8a);
		
		/// <summary>
		/// DomainRole LayerPackage
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.LayerPackage
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerPackageContainsLayers/LayerPackage.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerPackageContainsLayers/LayerPackage.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Layers", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.LayerPackageContainsLayers/LayerPackage.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d215b379-0279-469f-80ef-b8dcb02b738a")]
		public virtual LayerPackage LayerPackage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LayerPackage)DslModeling::DomainRoleInfo.GetRolePlayer(this, LayerPackageDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LayerPackageDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LayerPackage of a Layer
		/// <summary>
		/// Gets LayerPackage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LayerPackage GetLayerPackage(Layer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LayerDomainRoleId) as LayerPackage;
		}
		
		/// <summary>
		/// Sets LayerPackage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLayerPackage(Layer element, LayerPackage newLayerPackage)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LayerDomainRoleId, newLayerPackage);
		}
		#endregion
		#region Layer domain role code
		
		/// <summary>
		/// Layer domain role Id.
		/// </summary>
		public static readonly global::System.Guid LayerDomainRoleId = new global::System.Guid(0xf0b1e9ce, 0xabc8, 0x4ae0, 0x97, 0xfd, 0xf5, 0xdc, 0xed, 0x51, 0x36, 0x97);
		
		/// <summary>
		/// DomainRole Layer
		/// Description for DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.Layer
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerPackageContainsLayers/Layer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerPackageContainsLayers/Layer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LayerPackage", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.LayerPackageContainsLayers/Layer.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f0b1e9ce-abc8-4ae0-97fd-f5dced513697")]
		public virtual Layer Layer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Layer)DslModeling::DomainRoleInfo.GetRolePlayer(this, LayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Layers of a LayerPackage
		/// <summary>
		/// Gets a list of Layers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Layer> GetLayers(LayerPackage element)
		{
			return new DslModeling::LinkedElementCollection<Layer>(element, LayerPackageDomainRoleId);
		}
		#endregion
		#region LayerPackage link accessor
		/// <summary>
		/// Get the list of LayerPackageContainsLayers links to a LayerPackage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers> GetLinksToLayers ( global::DSLFactory.Candle.SystemModel.LayerPackage layerPackageInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers>(layerPackageInstance, global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.LayerPackageDomainRoleId);
		}
		#endregion
		#region Layer link accessor
		/// <summary>
		/// Get the LayerPackageContainsLayers link to a Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers GetLinkToLayerPackage (global::DSLFactory.Candle.SystemModel.Layer layerInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers>(layerInstance, global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.LayerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Layer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LayerPackageContainsLayers instance accessors
		
		/// <summary>
		/// Get any LayerPackageContainsLayers links between a given LayerPackage and a Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers> GetLinks( global::DSLFactory.Candle.SystemModel.LayerPackage source, global::DSLFactory.Candle.SystemModel.Layer target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers>(source, global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.LayerPackageDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers link in links )
			{
				if ( target.Equals(link.Layer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LayerPackageContainsLayers link between a given LayerPackageand a Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers GetLink( global::DSLFactory.Candle.SystemModel.LayerPackage source, global::DSLFactory.Candle.SystemModel.Layer target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers>(source, global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers.LayerPackageDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.LayerPackageContainsLayers link in links )
			{
				if ( target.Equals(link.Layer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship SoftwareComponentHasLayers
	/// Description for DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ead3b962-b3f8-43e3-bc1d-2f62ceb86c27")]
	public partial class SoftwareComponentHasLayers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SoftwareComponentHasLayers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xead3b962, 0xb3f8, 0x43e3, 0xbc, 0x1d, 0x2f, 0x62, 0xce, 0xb8, 0x6c, 0x27);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SoftwareComponentHasLayers link in the same Partition as the given SoftwareComponent
		/// </summary>
		/// <param name="source">SoftwareComponent to use as the source of the relationship.</param>
		/// <param name="target">SoftwareLayer to use as the target of the relationship.</param>
		public SoftwareComponentHasLayers(SoftwareComponent source, SoftwareLayer target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SoftwareComponentHasLayers.SoftwareComponentDomainRoleId, source), new DslModeling::RoleAssignment(SoftwareComponentHasLayers.SoftwareLayerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoftwareComponentHasLayers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoftwareComponentHasLayers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SoftwareComponentHasLayers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SoftwareComponentHasLayers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SoftwareComponent domain role code
		
		/// <summary>
		/// SoftwareComponent domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoftwareComponentDomainRoleId = new global::System.Guid(0xbeefa80a, 0xca79, 0x4f6c, 0x93, 0x84, 0x7c, 0x0d, 0xb3, 0x55, 0x95, 0xef);
		
		/// <summary>
		/// DomainRole SoftwareComponent
		/// Description for
		/// DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareComponent
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers/SoftwareComponent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers/SoftwareComponent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Layers", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers/SoftwareComponent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("beefa80a-ca79-4f6c-9384-7c0db35595ef")]
		public virtual SoftwareComponent SoftwareComponent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoftwareComponent)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoftwareComponentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoftwareComponentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Component of a SoftwareLayer
		/// <summary>
		/// Gets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoftwareComponent GetComponent(SoftwareLayer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SoftwareLayerDomainRoleId) as SoftwareComponent;
		}
		
		/// <summary>
		/// Sets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponent(SoftwareLayer element, SoftwareComponent newSoftwareComponent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SoftwareLayerDomainRoleId, newSoftwareComponent);
		}
		#endregion
		#region SoftwareLayer domain role code
		
		/// <summary>
		/// SoftwareLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid SoftwareLayerDomainRoleId = new global::System.Guid(0x4bf4f7ca, 0x4ffc, 0x495c, 0xbe, 0xd1, 0x14, 0xe4, 0xc1, 0xc0, 0x98, 0xb0);
		
		/// <summary>
		/// DomainRole SoftwareLayer
		/// Description for
		/// DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareLayer
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers/SoftwareLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers/SoftwareLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Component", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers/SoftwareLayer.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4bf4f7ca-4ffc-495c-bed1-14e4c1c098b0")]
		public virtual SoftwareLayer SoftwareLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoftwareLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, SoftwareLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SoftwareLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Layers of a SoftwareComponent
		/// <summary>
		/// Gets a list of Layers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SoftwareLayer> GetLayers(SoftwareComponent element)
		{
			return new DslModeling::LinkedElementCollection<SoftwareLayer>(element, SoftwareComponentDomainRoleId);
		}
		#endregion
		#region SoftwareComponent link accessor
		/// <summary>
		/// Get the list of SoftwareComponentHasLayers links to a SoftwareComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers> GetLinksToLayers ( global::DSLFactory.Candle.SystemModel.SoftwareComponent softwareComponentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers>(softwareComponentInstance, global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareComponentDomainRoleId);
		}
		#endregion
		#region SoftwareLayer link accessor
		/// <summary>
		/// Get the SoftwareComponentHasLayers link to a SoftwareLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers GetLinkToComponent (global::DSLFactory.Candle.SystemModel.SoftwareLayer softwareLayerInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers>(softwareLayerInstance, global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareLayerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SoftwareLayer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SoftwareComponentHasLayers instance accessors
		
		/// <summary>
		/// Get any SoftwareComponentHasLayers links between a given SoftwareComponent and a SoftwareLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers> GetLinks( global::DSLFactory.Candle.SystemModel.SoftwareComponent source, global::DSLFactory.Candle.SystemModel.SoftwareLayer target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers>(source, global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareComponentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers link in links )
			{
				if ( target.Equals(link.SoftwareLayer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SoftwareComponentHasLayers link between a given SoftwareComponentand a SoftwareLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers GetLink( global::DSLFactory.Candle.SystemModel.SoftwareComponent source, global::DSLFactory.Candle.SystemModel.SoftwareLayer target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers>(source, global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers.SoftwareComponentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.SoftwareComponentHasLayers link in links )
			{
				if ( target.Equals(link.SoftwareLayer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship BinaryComponentHasAssemblies
	/// Description for DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5e8390d9-4e25-439e-921e-a17fd22b86e3")]
	public partial class BinaryComponentHasAssemblies : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BinaryComponentHasAssemblies domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5e8390d9, 0x4e25, 0x439e, 0x92, 0x1e, 0xa1, 0x7f, 0xd2, 0x2b, 0x86, 0xe3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BinaryComponentHasAssemblies link in the same Partition as the given BinaryComponent
		/// </summary>
		/// <param name="source">BinaryComponent to use as the source of the relationship.</param>
		/// <param name="target">DotNetAssembly to use as the target of the relationship.</param>
		public BinaryComponentHasAssemblies(BinaryComponent source, DotNetAssembly target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BinaryComponentHasAssemblies.BinaryComponentDomainRoleId, source), new DslModeling::RoleAssignment(BinaryComponentHasAssemblies.DotNetAssemblyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BinaryComponentHasAssemblies(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BinaryComponentHasAssemblies(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BinaryComponentHasAssemblies(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BinaryComponentHasAssemblies(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BinaryComponent domain role code
		
		/// <summary>
		/// BinaryComponent domain role Id.
		/// </summary>
		public static readonly global::System.Guid BinaryComponentDomainRoleId = new global::System.Guid(0xbbd05a00, 0xe782, 0x4f80, 0xae, 0xdc, 0x61, 0xda, 0xbc, 0x3d, 0x83, 0x6d);
		
		/// <summary>
		/// DomainRole BinaryComponent
		/// Description for
		/// DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.BinaryComponent
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies/BinaryComponent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies/BinaryComponent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Assemblies", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies/BinaryComponent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bbd05a00-e782-4f80-aedc-61dabc3d836d")]
		public virtual BinaryComponent BinaryComponent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BinaryComponent)DslModeling::DomainRoleInfo.GetRolePlayer(this, BinaryComponentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BinaryComponentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Component of a DotNetAssembly
		/// <summary>
		/// Gets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BinaryComponent GetComponent(DotNetAssembly element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DotNetAssemblyDomainRoleId) as BinaryComponent;
		}
		
		/// <summary>
		/// Sets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponent(DotNetAssembly element, BinaryComponent newBinaryComponent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DotNetAssemblyDomainRoleId, newBinaryComponent);
		}
		#endregion
		#region DotNetAssembly domain role code
		
		/// <summary>
		/// DotNetAssembly domain role Id.
		/// </summary>
		public static readonly global::System.Guid DotNetAssemblyDomainRoleId = new global::System.Guid(0x82ff52ec, 0xb11f, 0x4798, 0x98, 0x07, 0x3d, 0x9a, 0xa5, 0x8b, 0x66, 0x8c);
		
		/// <summary>
		/// DomainRole DotNetAssembly
		/// Description for
		/// DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.DotNetAssembly
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies/DotNetAssembly.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies/DotNetAssembly.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Component", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies/DotNetAssembly.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("82ff52ec-b11f-4798-9807-3d9aa58b668c")]
		public virtual DotNetAssembly DotNetAssembly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DotNetAssembly)DslModeling::DomainRoleInfo.GetRolePlayer(this, DotNetAssemblyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DotNetAssemblyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Assemblies of a BinaryComponent
		/// <summary>
		/// Gets a list of Assemblies.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DotNetAssembly> GetAssemblies(BinaryComponent element)
		{
			return new DslModeling::LinkedElementCollection<DotNetAssembly>(element, BinaryComponentDomainRoleId);
		}
		#endregion
		#region BinaryComponent link accessor
		/// <summary>
		/// Get the list of BinaryComponentHasAssemblies links to a BinaryComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies> GetLinksToAssemblies ( global::DSLFactory.Candle.SystemModel.BinaryComponent binaryComponentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies>(binaryComponentInstance, global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.BinaryComponentDomainRoleId);
		}
		#endregion
		#region DotNetAssembly link accessor
		/// <summary>
		/// Get the BinaryComponentHasAssemblies link to a DotNetAssembly.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies GetLinkToComponent (global::DSLFactory.Candle.SystemModel.DotNetAssembly dotNetAssemblyInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies>(dotNetAssemblyInstance, global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.DotNetAssemblyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DotNetAssembly not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BinaryComponentHasAssemblies instance accessors
		
		/// <summary>
		/// Get any BinaryComponentHasAssemblies links between a given BinaryComponent and a DotNetAssembly.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies> GetLinks( global::DSLFactory.Candle.SystemModel.BinaryComponent source, global::DSLFactory.Candle.SystemModel.DotNetAssembly target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies>(source, global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.BinaryComponentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies link in links )
			{
				if ( target.Equals(link.DotNetAssembly) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BinaryComponentHasAssemblies link between a given BinaryComponentand a DotNetAssembly.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies GetLink( global::DSLFactory.Candle.SystemModel.BinaryComponent source, global::DSLFactory.Candle.SystemModel.DotNetAssembly target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies>(source, global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies.BinaryComponentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.BinaryComponentHasAssemblies link in links )
			{
				if ( target.Equals(link.DotNetAssembly) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ComponentHasLayerPackages
	/// Description for DSLFactory.Candle.SystemModel.ComponentHasLayerPackages
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("16f750c4-9f39-4fab-a952-5f4a76570339")]
	public partial class ComponentHasLayerPackages : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentHasLayerPackages domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x16f750c4, 0x9f39, 0x4fab, 0xa9, 0x52, 0x5f, 0x4a, 0x76, 0x57, 0x03, 0x39);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentHasLayerPackages link in the same Partition as the given SoftwareComponent
		/// </summary>
		/// <param name="source">SoftwareComponent to use as the source of the relationship.</param>
		/// <param name="target">LayerPackage to use as the target of the relationship.</param>
		public ComponentHasLayerPackages(SoftwareComponent source, LayerPackage target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentHasLayerPackages.ComponentDomainRoleId, source), new DslModeling::RoleAssignment(ComponentHasLayerPackages.LayerPackageDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentHasLayerPackages(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentHasLayerPackages(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentHasLayerPackages(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentHasLayerPackages(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Component domain role code
		
		/// <summary>
		/// Component domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentDomainRoleId = new global::System.Guid(0x57469885, 0xee48, 0x498b, 0xae, 0x75, 0x86, 0x83, 0x90, 0xcd, 0xd0, 0xa8);
		
		/// <summary>
		/// DomainRole Component
		/// Description for
		/// DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.Component
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ComponentHasLayerPackages/Component.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ComponentHasLayerPackages/Component.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "LayerPackages", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ComponentHasLayerPackages/Component.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("57469885-ee48-498b-ae75-868390cdd0a8")]
		public virtual SoftwareComponent Component
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SoftwareComponent)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Component of a LayerPackage
		/// <summary>
		/// Gets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SoftwareComponent GetComponent(LayerPackage element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LayerPackageDomainRoleId) as SoftwareComponent;
		}
		
		/// <summary>
		/// Sets Component.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponent(LayerPackage element, SoftwareComponent newComponent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LayerPackageDomainRoleId, newComponent);
		}
		#endregion
		#region LayerPackage domain role code
		
		/// <summary>
		/// LayerPackage domain role Id.
		/// </summary>
		public static readonly global::System.Guid LayerPackageDomainRoleId = new global::System.Guid(0x4fe7a91f, 0x2a33, 0x4cda, 0x84, 0x64, 0x39, 0x6a, 0x9a, 0xad, 0xa5, 0xa5);
		
		/// <summary>
		/// DomainRole LayerPackage
		/// Description for
		/// DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.LayerPackage
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ComponentHasLayerPackages/LayerPackage.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ComponentHasLayerPackages/LayerPackage.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Component", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ComponentHasLayerPackages/LayerPackage.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4fe7a91f-2a33-4cda-8464-396a9aada5a5")]
		public virtual LayerPackage LayerPackage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LayerPackage)DslModeling::DomainRoleInfo.GetRolePlayer(this, LayerPackageDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LayerPackageDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LayerPackages of a SoftwareComponent
		/// <summary>
		/// Gets a list of LayerPackages.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<LayerPackage> GetLayerPackages(SoftwareComponent element)
		{
			return new DslModeling::LinkedElementCollection<LayerPackage>(element, ComponentDomainRoleId);
		}
		#endregion
		#region Component link accessor
		/// <summary>
		/// Get the list of ComponentHasLayerPackages links to a SoftwareComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages> GetLinksToLayerPackages ( global::DSLFactory.Candle.SystemModel.SoftwareComponent componentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages>(componentInstance, global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.ComponentDomainRoleId);
		}
		#endregion
		#region LayerPackage link accessor
		/// <summary>
		/// Get the ComponentHasLayerPackages link to a LayerPackage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages GetLinkToComponent (global::DSLFactory.Candle.SystemModel.LayerPackage layerPackageInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages>(layerPackageInstance, global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.LayerPackageDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LayerPackage not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentHasLayerPackages instance accessors
		
		/// <summary>
		/// Get any ComponentHasLayerPackages links between a given SoftwareComponent and a LayerPackage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages> GetLinks( global::DSLFactory.Candle.SystemModel.SoftwareComponent source, global::DSLFactory.Candle.SystemModel.LayerPackage target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages>(source, global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.ComponentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages link in links )
			{
				if ( target.Equals(link.LayerPackage) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentHasLayerPackages link between a given SoftwareComponentand a LayerPackage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages GetLink( global::DSLFactory.Candle.SystemModel.SoftwareComponent source, global::DSLFactory.Candle.SystemModel.LayerPackage target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages>(source, global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages.ComponentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ComponentHasLayerPackages link in links )
			{
				if ( target.Equals(link.LayerPackage) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship LayerHasClassImplementations
	/// Description for DSLFactory.Candle.SystemModel.LayerHasClassImplementations
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerHasClassImplementations.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerHasClassImplementations.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fcf8160a-e530-427a-8c67-9ae6e5a55967")]
	public partial class LayerHasClassImplementations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LayerHasClassImplementations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfcf8160a, 0xe530, 0x427a, 0x8c, 0x67, 0x9a, 0xe6, 0xe5, 0xa5, 0x59, 0x67);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LayerHasClassImplementations link in the same Partition as the given Layer
		/// </summary>
		/// <param name="source">Layer to use as the source of the relationship.</param>
		/// <param name="target">ClassImplementation to use as the target of the relationship.</param>
		public LayerHasClassImplementations(Layer source, ClassImplementation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LayerHasClassImplementations.LayerDomainRoleId, source), new DslModeling::RoleAssignment(LayerHasClassImplementations.ClassImplementationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayerHasClassImplementations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayerHasClassImplementations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayerHasClassImplementations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayerHasClassImplementations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Layer domain role code
		
		/// <summary>
		/// Layer domain role Id.
		/// </summary>
		public static readonly global::System.Guid LayerDomainRoleId = new global::System.Guid(0xa37ca1c2, 0x5498, 0x4a99, 0xb7, 0x86, 0x0b, 0x59, 0xd7, 0xcf, 0x73, 0x12);
		
		/// <summary>
		/// DomainRole Layer
		/// Description for DSLFactory.Candle.SystemModel.LayerHasClassImplementations.Layer
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerHasClassImplementations/Layer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerHasClassImplementations/Layer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Classes", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.LayerHasClassImplementations/Layer.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a37ca1c2-5498-4a99-b786-0b59d7cf7312")]
		public virtual Layer Layer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Layer)DslModeling::DomainRoleInfo.GetRolePlayer(this, LayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Layer of a ClassImplementation
		/// <summary>
		/// Gets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Layer GetLayer(ClassImplementation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClassImplementationDomainRoleId) as Layer;
		}
		
		/// <summary>
		/// Sets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLayer(ClassImplementation element, Layer newLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClassImplementationDomainRoleId, newLayer);
		}
		#endregion
		#region ClassImplementation domain role code
		
		/// <summary>
		/// ClassImplementation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassImplementationDomainRoleId = new global::System.Guid(0x035ca443, 0xb893, 0x4d13, 0x8b, 0x33, 0x4c, 0xce, 0xce, 0x0f, 0x06, 0x37);
		
		/// <summary>
		/// DomainRole ClassImplementation
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerHasClassImplementations.ClassImplementation
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerHasClassImplementations/ClassImplementation.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerHasClassImplementations/ClassImplementation.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Layer", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.LayerHasClassImplementations/ClassImplementation.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("035ca443-b893-4d13-8b33-4ccece0f0637")]
		public virtual ClassImplementation ClassImplementation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClassImplementation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassImplementationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassImplementationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Classes of a Layer
		/// <summary>
		/// Gets a list of Classes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ClassImplementation> GetClasses(Layer element)
		{
			return new DslModeling::LinkedElementCollection<ClassImplementation>(element, LayerDomainRoleId);
		}
		#endregion
		#region Layer link accessor
		/// <summary>
		/// Get the list of LayerHasClassImplementations links to a Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations> GetLinksToClasses ( global::DSLFactory.Candle.SystemModel.Layer layerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations>(layerInstance, global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.LayerDomainRoleId);
		}
		#endregion
		#region ClassImplementation link accessor
		/// <summary>
		/// Get the LayerHasClassImplementations link to a ClassImplementation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations GetLinkToLayer (global::DSLFactory.Candle.SystemModel.ClassImplementation classImplementationInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations>(classImplementationInstance, global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.ClassImplementationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ClassImplementation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LayerHasClassImplementations instance accessors
		
		/// <summary>
		/// Get any LayerHasClassImplementations links between a given Layer and a ClassImplementation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations> GetLinks( global::DSLFactory.Candle.SystemModel.Layer source, global::DSLFactory.Candle.SystemModel.ClassImplementation target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations>(source, global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.LayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations link in links )
			{
				if ( target.Equals(link.ClassImplementation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LayerHasClassImplementations link between a given Layerand a ClassImplementation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations GetLink( global::DSLFactory.Candle.SystemModel.Layer source, global::DSLFactory.Candle.SystemModel.ClassImplementation target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations>(source, global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations.LayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.LayerHasClassImplementations link in links )
			{
				if ( target.Equals(link.ClassImplementation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship Implementation
	/// Description for DSLFactory.Candle.SystemModel.Implementation
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Implementation.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Implementation.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("25c0f0c1-3ea9-436c-b360-6bf54213ede0")]
	public partial class Implementation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Implementation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x25c0f0c1, 0x3ea9, 0x436c, 0xb3, 0x60, 0x6b, 0xf5, 0x42, 0x13, 0xed, 0xe0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Implementation link in the same Partition as the given ClassImplementation
		/// </summary>
		/// <param name="source">ClassImplementation to use as the source of the relationship.</param>
		/// <param name="target">ServiceContract to use as the target of the relationship.</param>
		public Implementation(ClassImplementation source, ServiceContract target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Implementation.ClassImplementationDomainRoleId, source), new DslModeling::RoleAssignment(Implementation.ContractDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Implementation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Implementation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Implementation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Implementation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ClassImplementation domain role code
		
		/// <summary>
		/// ClassImplementation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassImplementationDomainRoleId = new global::System.Guid(0x92372c8b, 0x2ba5, 0x41e3, 0xa0, 0x38, 0xcd, 0xca, 0x74, 0x77, 0xff, 0x12);
		
		/// <summary>
		/// DomainRole ClassImplementation
		/// Description for DSLFactory.Candle.SystemModel.Implementation.ClassImplementation
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Implementation/ClassImplementation.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Implementation/ClassImplementation.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Contract", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.Implementation/ClassImplementation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("92372c8b-2ba5-41e3-a038-cdca7477ff12")]
		public virtual ClassImplementation ClassImplementation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClassImplementation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassImplementationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassImplementationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Implementations of a ServiceContract
		/// <summary>
		/// Gets a list of Implementations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ClassImplementation> GetImplementations(ServiceContract element)
		{
			return new DslModeling::LinkedElementCollection<ClassImplementation>(element, ContractDomainRoleId);
		}
		#endregion
		#region Contract domain role code
		
		/// <summary>
		/// Contract domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContractDomainRoleId = new global::System.Guid(0xca3fb20a, 0x18de, 0x4e0a, 0x88, 0x74, 0x3b, 0xbd, 0x32, 0xc9, 0xcc, 0x29);
		
		/// <summary>
		/// DomainRole Contract
		/// Description for DSLFactory.Candle.SystemModel.Implementation.Contract
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Implementation/Contract.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Implementation/Contract.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Implementations", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.Implementation/Contract.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ca3fb20a-18de-4e0a-8874-3bbd32c9cc29")]
		public virtual ServiceContract Contract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceContract)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContractDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContractDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Contract of a ClassImplementation
		/// <summary>
		/// Gets Contract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ServiceContract GetContract(ClassImplementation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClassImplementationDomainRoleId) as ServiceContract;
		}
		
		/// <summary>
		/// Sets Contract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetContract(ClassImplementation element, ServiceContract newContract)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClassImplementationDomainRoleId, newContract);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa0a5dc67, 0xa728, 0x4d88, 0x86, 0x88, 0xa4, 0x6f, 0x5c, 0xbc, 0x66, 0xcc);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for DSLFactory.Candle.SystemModel.Implementation.Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Implementation/Name.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Implementation/Name.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a0a5dc67-a728-4d88-8688-a46f5cbc66cc")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Implementation.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Implementation, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Implementation.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Implementation.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Implementation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Implementation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConfigurationMode domain property code
		
		/// <summary>
		/// ConfigurationMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationModeDomainPropertyId = new global::System.Guid(0xe997bdf3, 0x9a96, 0x473b, 0xaa, 0x22, 0x97, 0xfa, 0xe1, 0x39, 0xac, 0x59);
		
		/// <summary>
		/// Storage for ConfigurationMode
		/// </summary>
		private global::System.String configurationModePropertyStorage = "*";
		
		/// <summary>
		/// Gets or sets the value of ConfigurationMode domain property.
		/// Description for DSLFactory.Candle.SystemModel.Implementation.Configuration Mode
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Implementation/ConfigurationMode.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Implementation/ConfigurationMode.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*")]
		[DslModeling::DomainObjectId("e997bdf3-9a96-473b-aa22-97fae139ac59")]
		public global::System.String ConfigurationMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return configurationModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConfigurationModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Implementation.ConfigurationMode domain property.
		/// </summary>
		internal sealed partial class ConfigurationModePropertyHandler : DslModeling::DomainPropertyValueHandler<Implementation, global::System.String>
		{
			private ConfigurationModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Implementation.ConfigurationMode domain property value handler.
			/// </summary>
			public static readonly ConfigurationModePropertyHandler Instance = new ConfigurationModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Implementation.ConfigurationMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConfigurationModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Implementation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.configurationModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Implementation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.configurationModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region DependencyProperties opposite domain role accessor
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.Implementation
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DependencyProperty> DependencyProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<DependencyProperty>(this, global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.ImplementationDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region ClassImplementation link accessor
		/// <summary>
		/// Get the Implementation link to a ClassImplementation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.Implementation GetLinkToContract (global::DSLFactory.Candle.SystemModel.ClassImplementation classImplementationInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.Implementation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Implementation>(classImplementationInstance, global::DSLFactory.Candle.SystemModel.Implementation.ClassImplementationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ClassImplementation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Contract link accessor
		/// <summary>
		/// Get the list of Implementation links to a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.Implementation> GetLinksToImplementations ( global::DSLFactory.Candle.SystemModel.ServiceContract contractInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Implementation>(contractInstance, global::DSLFactory.Candle.SystemModel.Implementation.ContractDomainRoleId);
		}
		#endregion
		#region Implementation instance accessors
		
		/// <summary>
		/// Get any Implementation links between a given ClassImplementation and a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.Implementation> GetLinks( global::DSLFactory.Candle.SystemModel.ClassImplementation source, global::DSLFactory.Candle.SystemModel.ServiceContract target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.Implementation> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.Implementation>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.Implementation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Implementation>(source, global::DSLFactory.Candle.SystemModel.Implementation.ClassImplementationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.Implementation link in links )
			{
				if ( target.Equals(link.Contract) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Implementation link between a given ClassImplementationand a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.Implementation GetLink( global::DSLFactory.Candle.SystemModel.ClassImplementation source, global::DSLFactory.Candle.SystemModel.ServiceContract target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.Implementation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Implementation>(source, global::DSLFactory.Candle.SystemModel.Implementation.ClassImplementationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.Implementation link in links )
			{
				if ( target.Equals(link.Contract) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ClassImplementationReferencesAssociatedEntity
	/// Description for
	/// DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("eb700931-75b3-41d4-9558-e2e2ce877866")]
	public partial class ClassImplementationReferencesAssociatedEntity : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassImplementationReferencesAssociatedEntity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeb700931, 0x75b3, 0x41d4, 0x95, 0x58, 0xe2, 0xe2, 0xce, 0x87, 0x78, 0x66);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassImplementationReferencesAssociatedEntity link in the same Partition as the given ClassImplementation
		/// </summary>
		/// <param name="source">ClassImplementation to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public ClassImplementationReferencesAssociatedEntity(ClassImplementation source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassImplementationReferencesAssociatedEntity.ClassImplementationDomainRoleId, source), new DslModeling::RoleAssignment(ClassImplementationReferencesAssociatedEntity.EntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassImplementationReferencesAssociatedEntity(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassImplementationReferencesAssociatedEntity(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassImplementationReferencesAssociatedEntity(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassImplementationReferencesAssociatedEntity(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ClassImplementation domain role code
		
		/// <summary>
		/// ClassImplementation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassImplementationDomainRoleId = new global::System.Guid(0xe9204b8d, 0xf498, 0x4676, 0xa8, 0x85, 0x16, 0x6a, 0x4d, 0x23, 0x84, 0xc3);
		
		/// <summary>
		/// DomainRole ClassImplementation
		/// Description for
		/// DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity.ClassImplementation
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity/ClassImplementation.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity/ClassImplementation.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AssociatedEntity", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity/ClassImplementation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e9204b8d-f498-4676-a885-166a4d2384c3")]
		public virtual ClassImplementation ClassImplementation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClassImplementation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassImplementationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassImplementationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ClassImplementations of a Entity
		/// <summary>
		/// Gets a list of ClassImplementations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ClassImplementation> GetClassImplementations(Entity element)
		{
			return new DslModeling::LinkedElementCollection<ClassImplementation>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0xa98d67b7, 0x0d1e, 0x431a, 0xb8, 0x95, 0x67, 0x60, 0x39, 0xbe, 0x5c, 0xd8);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for
		/// DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity/Entity.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity/Entity.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ClassImplementations", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity/Entity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a98d67b7-0d1e-431a-b895-676039be5cd8")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssociatedEntity of a ClassImplementation
		/// <summary>
		/// Gets AssociatedEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetAssociatedEntity(ClassImplementation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClassImplementationDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets AssociatedEntity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAssociatedEntity(ClassImplementation element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClassImplementationDomainRoleId, newEntity);
		}
		#endregion
		#region ClassImplementation link accessor
		/// <summary>
		/// Get the ClassImplementationReferencesAssociatedEntity link to a ClassImplementation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity GetLinkToAssociatedEntity (global::DSLFactory.Candle.SystemModel.ClassImplementation classImplementationInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity>(classImplementationInstance, global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity.ClassImplementationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ClassImplementation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of ClassImplementationReferencesAssociatedEntity links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity> GetLinksToClassImplementations ( global::DSLFactory.Candle.SystemModel.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity>(entityInstance, global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity.EntityDomainRoleId);
		}
		#endregion
		#region ClassImplementationReferencesAssociatedEntity instance accessors
		
		/// <summary>
		/// Get any ClassImplementationReferencesAssociatedEntity links between a given ClassImplementation and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity> GetLinks( global::DSLFactory.Candle.SystemModel.ClassImplementation source, global::DSLFactory.Candle.SystemModel.Entity target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity>(source, global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity.ClassImplementationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassImplementationReferencesAssociatedEntity link between a given ClassImplementationand a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity GetLink( global::DSLFactory.Candle.SystemModel.ClassImplementation source, global::DSLFactory.Candle.SystemModel.Entity target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity>(source, global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity.ClassImplementationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ClassImplementationReferencesAssociatedEntity link in links )
			{
				if ( target.Equals(link.Entity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ImplementationHasDependencyProperties
	/// Description for
	/// DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("99173e07-79ff-409d-9236-104c92399c7a")]
	public partial class ImplementationHasDependencyProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImplementationHasDependencyProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x99173e07, 0x79ff, 0x409d, 0x92, 0x36, 0x10, 0x4c, 0x92, 0x39, 0x9c, 0x7a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImplementationHasDependencyProperties link in the same Partition as the given Implementation
		/// </summary>
		/// <param name="source">Implementation to use as the source of the relationship.</param>
		/// <param name="target">DependencyProperty to use as the target of the relationship.</param>
		public ImplementationHasDependencyProperties(Implementation source, DependencyProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImplementationHasDependencyProperties.ImplementationDomainRoleId, source), new DslModeling::RoleAssignment(ImplementationHasDependencyProperties.DependencyPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImplementationHasDependencyProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImplementationHasDependencyProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImplementationHasDependencyProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImplementationHasDependencyProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Implementation domain role code
		
		/// <summary>
		/// Implementation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImplementationDomainRoleId = new global::System.Guid(0x79206d40, 0xc43b, 0x4190, 0xbf, 0x51, 0x16, 0xa1, 0x1a, 0x9a, 0x3c, 0xe1);
		
		/// <summary>
		/// DomainRole Implementation
		/// Description for
		/// DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.Implementation
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties/Implementation.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties/Implementation.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DependencyProperties", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties/Implementation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("79206d40-c43b-4190-bf51-16a11a9a3ce1")]
		public virtual Implementation Implementation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Implementation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImplementationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImplementationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Implementation of a DependencyProperty
		/// <summary>
		/// Gets Implementation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Implementation GetImplementation(DependencyProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DependencyPropertyDomainRoleId) as Implementation;
		}
		
		/// <summary>
		/// Sets Implementation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImplementation(DependencyProperty element, Implementation newImplementation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DependencyPropertyDomainRoleId, newImplementation);
		}
		#endregion
		#region DependencyProperty domain role code
		
		/// <summary>
		/// DependencyProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid DependencyPropertyDomainRoleId = new global::System.Guid(0x95f909b5, 0x07c6, 0x4219, 0xaa, 0x6f, 0xfb, 0xd2, 0x69, 0x79, 0x5b, 0xc7);
		
		/// <summary>
		/// DomainRole DependencyProperty
		/// Description for
		/// DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.DependencyProperty
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties/DependencyProperty.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties/DependencyProperty.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Implementation", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties/DependencyProperty.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("95f909b5-07c6-4219-aa6f-fbd269795bc7")]
		public virtual DependencyProperty DependencyProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DependencyProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, DependencyPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DependencyPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DependencyProperties of a Implementation
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DependencyProperty> GetDependencyProperties(Implementation element)
		{
			return new DslModeling::LinkedElementCollection<DependencyProperty>(element, ImplementationDomainRoleId);
		}
		#endregion
		#region Implementation link accessor
		/// <summary>
		/// Get the list of ImplementationHasDependencyProperties links to a Implementation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties> GetLinksToDependencyProperties ( global::DSLFactory.Candle.SystemModel.Implementation implementationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties>(implementationInstance, global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.ImplementationDomainRoleId);
		}
		#endregion
		#region DependencyProperty link accessor
		/// <summary>
		/// Get the ImplementationHasDependencyProperties link to a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties GetLinkToImplementation (global::DSLFactory.Candle.SystemModel.DependencyProperty dependencyPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties>(dependencyPropertyInstance, global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.DependencyPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DependencyProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImplementationHasDependencyProperties instance accessors
		
		/// <summary>
		/// Get any ImplementationHasDependencyProperties links between a given Implementation and a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties> GetLinks( global::DSLFactory.Candle.SystemModel.Implementation source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties>(source, global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.ImplementationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImplementationHasDependencyProperties link between a given Implementationand a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties GetLink( global::DSLFactory.Candle.SystemModel.Implementation source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties>(source, global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties.ImplementationDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ImplementationHasDependencyProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship LayerPackageReferencesInterfaceLayer
	/// Description for
	/// DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("548b0054-8d70-40b8-ad5e-d80e93ef0e20")]
	public partial class LayerPackageReferencesInterfaceLayer : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LayerPackageReferencesInterfaceLayer domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x548b0054, 0x8d70, 0x40b8, 0xad, 0x5e, 0xd8, 0x0e, 0x93, 0xef, 0x0e, 0x20);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LayerPackageReferencesInterfaceLayer link in the same Partition as the given LayerPackage
		/// </summary>
		/// <param name="source">LayerPackage to use as the source of the relationship.</param>
		/// <param name="target">InterfaceLayer to use as the target of the relationship.</param>
		public LayerPackageReferencesInterfaceLayer(LayerPackage source, InterfaceLayer target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LayerPackageReferencesInterfaceLayer.LayerPackageDomainRoleId, source), new DslModeling::RoleAssignment(LayerPackageReferencesInterfaceLayer.InterfaceLayerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayerPackageReferencesInterfaceLayer(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayerPackageReferencesInterfaceLayer(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayerPackageReferencesInterfaceLayer(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayerPackageReferencesInterfaceLayer(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region LayerPackage domain role code
		
		/// <summary>
		/// LayerPackage domain role Id.
		/// </summary>
		public static readonly global::System.Guid LayerPackageDomainRoleId = new global::System.Guid(0xefcd8b86, 0x5624, 0x42de, 0xa3, 0x99, 0xd5, 0xfb, 0x27, 0x23, 0xd1, 0xdd);
		
		/// <summary>
		/// DomainRole LayerPackage
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.LayerPackage
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer/LayerPackage.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer/LayerPackage.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InterfaceLayer", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer/LayerPackage.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("efcd8b86-5624-42de-a399-d5fb2723d1dd")]
		public virtual LayerPackage LayerPackage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (LayerPackage)DslModeling::DomainRoleInfo.GetRolePlayer(this, LayerPackageDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, LayerPackageDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LayerPackage of a InterfaceLayer
		/// <summary>
		/// Gets LayerPackage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static LayerPackage GetLayerPackage(InterfaceLayer element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InterfaceLayerDomainRoleId) as LayerPackage;
		}
		
		/// <summary>
		/// Sets LayerPackage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLayerPackage(InterfaceLayer element, LayerPackage newLayerPackage)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InterfaceLayerDomainRoleId, newLayerPackage);
		}
		#endregion
		#region InterfaceLayer domain role code
		
		/// <summary>
		/// InterfaceLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid InterfaceLayerDomainRoleId = new global::System.Guid(0xe14683ae, 0x82f0, 0x4d40, 0x83, 0x45, 0x9a, 0xe5, 0xa4, 0x31, 0x38, 0xe3);
		
		/// <summary>
		/// DomainRole InterfaceLayer
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.InterfaceLayer
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer/InterfaceLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer/InterfaceLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LayerPackage", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer/InterfaceLayer.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e14683ae-82f0-4d40-8345-9ae5a43138e3")]
		public virtual InterfaceLayer InterfaceLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InterfaceLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, InterfaceLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InterfaceLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InterfaceLayer of a LayerPackage
		/// <summary>
		/// Gets InterfaceLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InterfaceLayer GetInterfaceLayer(LayerPackage element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, LayerPackageDomainRoleId) as InterfaceLayer;
		}
		
		/// <summary>
		/// Sets InterfaceLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInterfaceLayer(LayerPackage element, InterfaceLayer newInterfaceLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, LayerPackageDomainRoleId, newInterfaceLayer);
		}
		#endregion
		#region LayerPackage link accessor
		/// <summary>
		/// Get the LayerPackageReferencesInterfaceLayer link to a LayerPackage.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer GetLinkToInterfaceLayer (global::DSLFactory.Candle.SystemModel.LayerPackage layerPackageInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer>(layerPackageInstance, global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.LayerPackageDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of LayerPackage not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InterfaceLayer link accessor
		/// <summary>
		/// Get the LayerPackageReferencesInterfaceLayer link to a InterfaceLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer GetLinkToLayerPackage (global::DSLFactory.Candle.SystemModel.InterfaceLayer interfaceLayerInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer>(interfaceLayerInstance, global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.InterfaceLayerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InterfaceLayer not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LayerPackageReferencesInterfaceLayer instance accessors
		
		/// <summary>
		/// Get any LayerPackageReferencesInterfaceLayer links between a given LayerPackage and a InterfaceLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer> GetLinks( global::DSLFactory.Candle.SystemModel.LayerPackage source, global::DSLFactory.Candle.SystemModel.InterfaceLayer target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer>(source, global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.LayerPackageDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer link in links )
			{
				if ( target.Equals(link.InterfaceLayer) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LayerPackageReferencesInterfaceLayer link between a given LayerPackageand a InterfaceLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer GetLink( global::DSLFactory.Candle.SystemModel.LayerPackage source, global::DSLFactory.Candle.SystemModel.InterfaceLayer target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer>(source, global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer.LayerPackageDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.LayerPackageReferencesInterfaceLayer link in links )
			{
				if ( target.Equals(link.InterfaceLayer) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship LayerHasConfigurationParts
	/// Description for DSLFactory.Candle.SystemModel.LayerHasConfigurationParts
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e54a56d6-2ea1-45d1-86ac-1558ef556c43")]
	public partial class LayerHasConfigurationParts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// LayerHasConfigurationParts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe54a56d6, 0x2ea1, 0x45d1, 0x86, 0xac, 0x15, 0x58, 0xef, 0x55, 0x6c, 0x43);
	
				
		/// <summary>
		/// Constructor
		/// Creates a LayerHasConfigurationParts link in the same Partition as the given AbstractLayer
		/// </summary>
		/// <param name="source">AbstractLayer to use as the source of the relationship.</param>
		/// <param name="target">ConfigurationPart to use as the target of the relationship.</param>
		public LayerHasConfigurationParts(AbstractLayer source, ConfigurationPart target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(LayerHasConfigurationParts.AbstractLayerDomainRoleId, source), new DslModeling::RoleAssignment(LayerHasConfigurationParts.ConfigurationPartDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayerHasConfigurationParts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayerHasConfigurationParts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public LayerHasConfigurationParts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public LayerHasConfigurationParts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AbstractLayer domain role code
		
		/// <summary>
		/// AbstractLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractLayerDomainRoleId = new global::System.Guid(0xddc7735b, 0xc4bb, 0x40c3, 0x93, 0x2d, 0x85, 0xd1, 0x5c, 0xb6, 0x06, 0xd3);
		
		/// <summary>
		/// DomainRole AbstractLayer
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.AbstractLayer
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerHasConfigurationParts/AbstractLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerHasConfigurationParts/AbstractLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Configurations", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.LayerHasConfigurationParts/AbstractLayer.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ddc7735b-c4bb-40c3-932d-85d15cb606d3")]
		public virtual AbstractLayer AbstractLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Layer of a ConfigurationPart
		/// <summary>
		/// Gets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AbstractLayer GetLayer(ConfigurationPart element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConfigurationPartDomainRoleId) as AbstractLayer;
		}
		
		/// <summary>
		/// Sets Layer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLayer(ConfigurationPart element, AbstractLayer newAbstractLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConfigurationPartDomainRoleId, newAbstractLayer);
		}
		#endregion
		#region ConfigurationPart domain role code
		
		/// <summary>
		/// ConfigurationPart domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationPartDomainRoleId = new global::System.Guid(0xaa44360d, 0xdf89, 0x4af7, 0xb7, 0x4b, 0x0c, 0x34, 0x8b, 0xb0, 0x22, 0x4b);
		
		/// <summary>
		/// DomainRole ConfigurationPart
		/// Description for
		/// DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.ConfigurationPart
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.LayerHasConfigurationParts/ConfigurationPart.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.LayerHasConfigurationParts/ConfigurationPart.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Layer", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.LayerHasConfigurationParts/ConfigurationPart.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("aa44360d-df89-4af7-b74b-0c348bb0224b")]
		public virtual ConfigurationPart ConfigurationPart
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConfigurationPart)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConfigurationPartDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConfigurationPartDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Configurations of a AbstractLayer
		/// <summary>
		/// Gets a list of Configurations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConfigurationPart> GetConfigurations(AbstractLayer element)
		{
			return new DslModeling::LinkedElementCollection<ConfigurationPart>(element, AbstractLayerDomainRoleId);
		}
		#endregion
		#region AbstractLayer link accessor
		/// <summary>
		/// Get the list of LayerHasConfigurationParts links to a AbstractLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts> GetLinksToConfigurations ( global::DSLFactory.Candle.SystemModel.AbstractLayer abstractLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts>(abstractLayerInstance, global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.AbstractLayerDomainRoleId);
		}
		#endregion
		#region ConfigurationPart link accessor
		/// <summary>
		/// Get the LayerHasConfigurationParts link to a ConfigurationPart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts GetLinkToLayer (global::DSLFactory.Candle.SystemModel.ConfigurationPart configurationPartInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts>(configurationPartInstance, global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.ConfigurationPartDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConfigurationPart not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region LayerHasConfigurationParts instance accessors
		
		/// <summary>
		/// Get any LayerHasConfigurationParts links between a given AbstractLayer and a ConfigurationPart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts> GetLinks( global::DSLFactory.Candle.SystemModel.AbstractLayer source, global::DSLFactory.Candle.SystemModel.ConfigurationPart target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts>(source, global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.AbstractLayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts link in links )
			{
				if ( target.Equals(link.ConfigurationPart) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one LayerHasConfigurationParts link between a given AbstractLayerand a ConfigurationPart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts GetLink( global::DSLFactory.Candle.SystemModel.AbstractLayer source, global::DSLFactory.Candle.SystemModel.ConfigurationPart target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts>(source, global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts.AbstractLayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.LayerHasConfigurationParts link in links )
			{
				if ( target.Equals(link.ConfigurationPart) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ExternalComponentHasPublicPorts
	/// Description for DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("05972ef5-23d1-4f28-8a09-f064e13b7f83")]
	public partial class ExternalComponentHasPublicPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExternalComponentHasPublicPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x05972ef5, 0x23d1, 0x4f28, 0x8a, 0x09, 0xf0, 0x64, 0xe1, 0x3b, 0x7f, 0x83);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExternalComponentHasPublicPorts link in the same Partition as the given ExternalComponent
		/// </summary>
		/// <param name="source">ExternalComponent to use as the source of the relationship.</param>
		/// <param name="target">ExternalPublicPort to use as the target of the relationship.</param>
		public ExternalComponentHasPublicPorts(ExternalComponent source, ExternalPublicPort target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExternalComponentHasPublicPorts.ParentDomainRoleId, source), new DslModeling::RoleAssignment(ExternalComponentHasPublicPorts.PortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternalComponentHasPublicPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternalComponentHasPublicPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExternalComponentHasPublicPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExternalComponentHasPublicPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0xcc54120c, 0x4834, 0x47ca, 0xab, 0xcf, 0x24, 0xc1, 0xf7, 0xd3, 0xb5, 0x17);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for
		/// DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts/Parent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts/Parent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ports", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts/Parent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc54120c-4834-47ca-abcf-24c1f7d3b517")]
		public virtual ExternalComponent Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExternalComponent)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a ExternalPublicPort
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExternalComponent GetParent(ExternalPublicPort element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as ExternalComponent;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(ExternalPublicPort element, ExternalComponent newParent)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newParent);
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0x4a01426b, 0x6c8a, 0x4847, 0x90, 0x14, 0xc9, 0x88, 0x30, 0xc1, 0x70, 0x4f);
		
		/// <summary>
		/// DomainRole Port
		/// Description for
		/// DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.Port
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts/Port.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts/Port.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts/Port.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4a01426b-6c8a-4847-9014-c98830c1704f")]
		public virtual ExternalPublicPort Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExternalPublicPort)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ports of a ExternalComponent
		/// <summary>
		/// Gets a list of Ports.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExternalPublicPort> GetPorts(ExternalComponent element)
		{
			return new DslModeling::LinkedElementCollection<ExternalPublicPort>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of ExternalComponentHasPublicPorts links to a ExternalComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts> GetLinksToPorts ( global::DSLFactory.Candle.SystemModel.ExternalComponent parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts>(parentInstance, global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.ParentDomainRoleId);
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the ExternalComponentHasPublicPorts link to a ExternalPublicPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts GetLinkToParent (global::DSLFactory.Candle.SystemModel.ExternalPublicPort portInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts>(portInstance, global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExternalComponentHasPublicPorts instance accessors
		
		/// <summary>
		/// Get any ExternalComponentHasPublicPorts links between a given ExternalComponent and a ExternalPublicPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts> GetLinks( global::DSLFactory.Candle.SystemModel.ExternalComponent source, global::DSLFactory.Candle.SystemModel.ExternalPublicPort target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts>(source, global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.ParentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExternalComponentHasPublicPorts link between a given ExternalComponentand a ExternalPublicPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts GetLink( global::DSLFactory.Candle.SystemModel.ExternalComponent source, global::DSLFactory.Candle.SystemModel.ExternalPublicPort target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts>(source, global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts.ParentDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ExternalComponentHasPublicPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ScenarioUsesContracts
	/// Description for DSLFactory.Candle.SystemModel.ScenarioUsesContracts
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ScenarioUsesContracts.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ScenarioUsesContracts.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("922d6818-d5e2-4d98-96bb-97557dda7060")]
	public partial class ScenarioUsesContracts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ScenarioUsesContracts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x922d6818, 0xd5e2, 0x4d98, 0x96, 0xbb, 0x97, 0x55, 0x7d, 0xda, 0x70, 0x60);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ScenarioUsesContracts link in the same Partition as the given Scenario
		/// </summary>
		/// <param name="source">Scenario to use as the source of the relationship.</param>
		/// <param name="target">ServiceContract to use as the target of the relationship.</param>
		public ScenarioUsesContracts(Scenario source, ServiceContract target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ScenarioUsesContracts.ScenarioDomainRoleId, source), new DslModeling::RoleAssignment(ScenarioUsesContracts.ServiceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ScenarioUsesContracts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ScenarioUsesContracts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ScenarioUsesContracts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ScenarioUsesContracts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Scenario domain role code
		
		/// <summary>
		/// Scenario domain role Id.
		/// </summary>
		public static readonly global::System.Guid ScenarioDomainRoleId = new global::System.Guid(0x0c9cd39b, 0xbf57, 0x47b7, 0x8b, 0x6e, 0x79, 0x49, 0xf6, 0xce, 0x12, 0x3f);
		
		/// <summary>
		/// DomainRole Scenario
		/// Description for DSLFactory.Candle.SystemModel.ScenarioUsesContracts.Scenario
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ScenarioUsesContracts/Scenario.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ScenarioUsesContracts/Scenario.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Contracts", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ScenarioUsesContracts/Scenario.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0c9cd39b-bf57-47b7-8b6e-7949f6ce123f")]
		public virtual Scenario Scenario
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Scenario)DslModeling::DomainRoleInfo.GetRolePlayer(this, ScenarioDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ScenarioDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Scenarios of a ServiceContract
		/// <summary>
		/// Gets a list of Scenarios.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Scenario> GetScenarios(ServiceContract element)
		{
			return new DslModeling::LinkedElementCollection<Scenario>(element, ServiceDomainRoleId);
		}
		#endregion
		#region Service domain role code
		
		/// <summary>
		/// Service domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceDomainRoleId = new global::System.Guid(0x1c92e2df, 0xac1b, 0x4749, 0xb2, 0x15, 0x0b, 0x4c, 0xdc, 0x46, 0x15, 0x18);
		
		/// <summary>
		/// DomainRole Service
		/// Description for DSLFactory.Candle.SystemModel.ScenarioUsesContracts.Service
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ScenarioUsesContracts/Service.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ScenarioUsesContracts/Service.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Scenarios", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ScenarioUsesContracts/Service.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1c92e2df-ac1b-4749-b215-0b4cdc461518")]
		public virtual ServiceContract Service
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceContract)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Contracts of a Scenario
		/// <summary>
		/// Gets a list of Contracts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ServiceContract> GetContracts(Scenario element)
		{
			return new DslModeling::LinkedElementCollection<ServiceContract>(element, ScenarioDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x99964b02, 0x212d, 0x44f1, 0x97, 0xb2, 0x01, 0xcd, 0x6c, 0xa9, 0xbb, 0x55);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for DSLFactory.Candle.SystemModel.ScenarioUsesContracts.Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ScenarioUsesContracts/Name.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ScenarioUsesContracts/Name.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("99964b02-212d-44f1-97b2-01cd6ca9bb55")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ScenarioUsesContracts.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ScenarioUsesContracts, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ScenarioUsesContracts.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ScenarioUsesContracts.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ScenarioUsesContracts element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ScenarioUsesContracts element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConfigurationMode domain property code
		
		/// <summary>
		/// ConfigurationMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationModeDomainPropertyId = new global::System.Guid(0x25afcc7a, 0x0385, 0x4b0a, 0x9c, 0x77, 0x9d, 0xe4, 0x86, 0x70, 0xe1, 0xe5);
		
		/// <summary>
		/// Storage for ConfigurationMode
		/// </summary>
		private global::System.String configurationModePropertyStorage = "*";
		
		/// <summary>
		/// Gets or sets the value of ConfigurationMode domain property.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ScenarioUsesContracts.Configuration Mode
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ScenarioUsesContracts/ConfigurationMode.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ScenarioUsesContracts/ConfigurationMode.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*")]
		[DslModeling::DomainObjectId("25afcc7a-0385-4b0a-9c77-9de48670e1e5")]
		public global::System.String ConfigurationMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return configurationModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConfigurationModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ScenarioUsesContracts.ConfigurationMode domain property.
		/// </summary>
		internal sealed partial class ConfigurationModePropertyHandler : DslModeling::DomainPropertyValueHandler<ScenarioUsesContracts, global::System.String>
		{
			private ConfigurationModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ScenarioUsesContracts.ConfigurationMode domain property value handler.
			/// </summary>
			public static readonly ConfigurationModePropertyHandler Instance = new ConfigurationModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ScenarioUsesContracts.ConfigurationMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConfigurationModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ScenarioUsesContracts element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.configurationModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ScenarioUsesContracts element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.configurationModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Scenario link accessor
		/// <summary>
		/// Get the list of ScenarioUsesContracts links to a Scenario.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts> GetLinksToContracts ( global::DSLFactory.Candle.SystemModel.Scenario scenarioInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts>(scenarioInstance, global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts.ScenarioDomainRoleId);
		}
		#endregion
		#region Service link accessor
		/// <summary>
		/// Get the list of ScenarioUsesContracts links to a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts> GetLinksToScenarios ( global::DSLFactory.Candle.SystemModel.ServiceContract serviceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts>(serviceInstance, global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts.ServiceDomainRoleId);
		}
		#endregion
		#region ScenarioUsesContracts instance accessors
		
		/// <summary>
		/// Get any ScenarioUsesContracts links between a given Scenario and a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts> GetLinks( global::DSLFactory.Candle.SystemModel.Scenario source, global::DSLFactory.Candle.SystemModel.ServiceContract target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts>(source, global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts.ScenarioDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts link in links )
			{
				if ( target.Equals(link.Service) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ScenarioUsesContracts link between a given Scenarioand a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts GetLink( global::DSLFactory.Candle.SystemModel.Scenario source, global::DSLFactory.Candle.SystemModel.ServiceContract target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts>(source, global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts.ScenarioDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ScenarioUsesContracts link in links )
			{
				if ( target.Equals(link.Service) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ClassUsesOperations
	/// Description for DSLFactory.Candle.SystemModel.ClassUsesOperations
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassUsesOperations.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassUsesOperations.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5739074f-4878-4c4f-89f4-6b1bd9e6b33f")]
	public partial class ClassUsesOperations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassUsesOperations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5739074f, 0x4878, 0x4c4f, 0x89, 0xf4, 0x6b, 0x1b, 0xd9, 0xe6, 0xb3, 0x3f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassUsesOperations link in the same Partition as the given TypeWithOperations
		/// </summary>
		/// <param name="source">TypeWithOperations to use as the source of the relationship.</param>
		/// <param name="target">NamedElement to use as the target of the relationship.</param>
		public ClassUsesOperations(TypeWithOperations source, NamedElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassUsesOperations.SourceDomainRoleId, source), new DslModeling::RoleAssignment(ClassUsesOperations.TargetServiceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassUsesOperations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassUsesOperations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassUsesOperations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassUsesOperations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x8d786d1d, 0x0f86, 0x44d0, 0xbf, 0xd3, 0xf7, 0xe2, 0xad, 0x35, 0x83, 0x63);
		
		/// <summary>
		/// DomainRole Source
		/// Description for DSLFactory.Candle.SystemModel.ClassUsesOperations.Source
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/Source.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/Source.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ServicesUsed", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ClassUsesOperations/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8d786d1d-0f86-44d0-bfd3-f7e2ad358363")]
		public virtual TypeWithOperations Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TypeWithOperations)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a NamedElement
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TypeWithOperations> GetSources(NamedElement element)
		{
			return new DslModeling::LinkedElementCollection<TypeWithOperations>(element, TargetServiceDomainRoleId);
		}
		#endregion
		#region TargetService domain role code
		
		/// <summary>
		/// TargetService domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetServiceDomainRoleId = new global::System.Guid(0x5eb92749, 0x3dc2, 0x4e05, 0xa8, 0xb7, 0x2b, 0xb3, 0x31, 0xd9, 0xdd, 0xea);
		
		/// <summary>
		/// DomainRole TargetService
		/// Description for DSLFactory.Candle.SystemModel.ClassUsesOperations.TargetService
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/TargetService.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/TargetService.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ClassUsesOperations/TargetService.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5eb92749-3dc2-4e05-a8b7-2bb331d9ddea")]
		public virtual NamedElement TargetService
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NamedElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetServiceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetServiceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServicesUsed of a TypeWithOperations
		/// <summary>
		/// Gets a list of ServicesUsed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NamedElement> GetServicesUsed(TypeWithOperations element)
		{
			return new DslModeling::LinkedElementCollection<NamedElement>(element, SourceDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x675d9c8d, 0xe08a, 0x4dd3, 0xa6, 0xc7, 0xd8, 0xdb, 0x6e, 0x29, 0xb6, 0x73);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for DSLFactory.Candle.SystemModel.ClassUsesOperations.Name
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/Name.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/Name.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("675d9c8d-e08a-4dd3-a6c7-d8db6e29b673")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassUsesOperations.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassUsesOperations, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassUsesOperations.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassUsesOperations.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassUsesOperations element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassUsesOperations element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConfigurationMode domain property code
		
		/// <summary>
		/// ConfigurationMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationModeDomainPropertyId = new global::System.Guid(0x879f8d42, 0xaaae, 0x482c, 0xae, 0x52, 0xc9, 0x48, 0x6d, 0x40, 0xd9, 0x87);
		
		/// <summary>
		/// Storage for ConfigurationMode
		/// </summary>
		private global::System.String configurationModePropertyStorage = "*";
		
		/// <summary>
		/// Gets or sets the value of ConfigurationMode domain property.
		/// Description for DSLFactory.Candle.SystemModel.ClassUsesOperations.Configuration
		/// Mode
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/ConfigurationMode.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/ConfigurationMode.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*")]
		[DslModeling::DomainObjectId("879f8d42-aaae-482c-ae52-c9486d40d987")]
		public global::System.String ConfigurationMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return configurationModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConfigurationModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassUsesOperations.ConfigurationMode domain property.
		/// </summary>
		internal sealed partial class ConfigurationModePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassUsesOperations, global::System.String>
		{
			private ConfigurationModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassUsesOperations.ConfigurationMode domain property value handler.
			/// </summary>
			public static readonly ConfigurationModePropertyHandler Instance = new ConfigurationModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassUsesOperations.ConfigurationMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConfigurationModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassUsesOperations element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.configurationModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassUsesOperations element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.configurationModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Singleton domain property code
		
		/// <summary>
		/// Singleton domain property Id.
		/// </summary>
		public static readonly global::System.Guid SingletonDomainPropertyId = new global::System.Guid(0xca6e1cf4, 0x96f1, 0x404a, 0x86, 0x9d, 0x30, 0x6d, 0x9f, 0x19, 0xfc, 0x1e);
		
		/// <summary>
		/// Storage for Singleton
		/// </summary>
		private global::System.Boolean singletonPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Singleton domain property.
		/// Description for DSLFactory.Candle.SystemModel.ClassUsesOperations.Singleton
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/Singleton.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/Singleton.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ca6e1cf4-96f1-404a-869d-306d9f19fc1e")]
		public global::System.Boolean Singleton
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return singletonPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SingletonPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassUsesOperations.Singleton domain property.
		/// </summary>
		internal sealed partial class SingletonPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassUsesOperations, global::System.Boolean>
		{
			private SingletonPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassUsesOperations.Singleton domain property value handler.
			/// </summary>
			public static readonly SingletonPropertyHandler Instance = new SingletonPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassUsesOperations.Singleton domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SingletonDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ClassUsesOperations element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.singletonPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassUsesOperations element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.singletonPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Scope domain property code
		
		/// <summary>
		/// Scope domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScopeDomainPropertyId = new global::System.Guid(0x7b18697c, 0x9d1a, 0x4528, 0x87, 0x7b, 0x46, 0xb4, 0xe5, 0x00, 0xf9, 0xc2);
		
		/// <summary>
		/// Storage for Scope
		/// </summary>
		private ReferenceScope scopePropertyStorage = DslModeling::SerializationUtilities.GetValue<ReferenceScope>("Runtime,Publish");
		
		/// <summary>
		/// Gets or sets the value of Scope domain property.
		/// Description for DSLFactory.Candle.SystemModel.ClassUsesOperations.Scope
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/Scope.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassUsesOperations/Scope.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(typeof(global::DSLFactory.Candle.SystemModel.ReferenceScope), "Runtime,Publish")]
		[DslModeling::DomainObjectId("7b18697c-9d1a-4528-877b-46b4e500f9c2")]
		public ReferenceScope Scope
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scopePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScopePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassUsesOperations.Scope domain property.
		/// </summary>
		internal sealed partial class ScopePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassUsesOperations, ReferenceScope>
		{
			private ScopePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassUsesOperations.Scope domain property value handler.
			/// </summary>
			public static readonly ScopePropertyHandler Instance = new ScopePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassUsesOperations.Scope domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScopeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceScope GetValue(ClassUsesOperations element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scopePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassUsesOperations element, ReferenceScope newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReferenceScope oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scopePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region DependencyProperties opposite domain role accessor
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// Description for
		/// DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.ClassUsesOperations
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DependencyProperty> DependencyProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<DependencyProperty>(this, global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.ClassUsesOperationsDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of ClassUsesOperations links to a TypeWithOperations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ClassUsesOperations> GetLinksToServicesUsed ( global::DSLFactory.Candle.SystemModel.TypeWithOperations sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassUsesOperations>(sourceInstance, global::DSLFactory.Candle.SystemModel.ClassUsesOperations.SourceDomainRoleId);
		}
		#endregion
		#region TargetService link accessor
		/// <summary>
		/// Get the list of ClassUsesOperations links to a NamedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ClassUsesOperations> GetLinksToSources ( global::DSLFactory.Candle.SystemModel.NamedElement targetServiceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassUsesOperations>(targetServiceInstance, global::DSLFactory.Candle.SystemModel.ClassUsesOperations.TargetServiceDomainRoleId);
		}
		#endregion
		#region ClassUsesOperations instance accessors
		
		/// <summary>
		/// Get any ClassUsesOperations links between a given TypeWithOperations and a NamedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ClassUsesOperations> GetLinks( global::DSLFactory.Candle.SystemModel.TypeWithOperations source, global::DSLFactory.Candle.SystemModel.NamedElement target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ClassUsesOperations> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ClassUsesOperations>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ClassUsesOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassUsesOperations>(source, global::DSLFactory.Candle.SystemModel.ClassUsesOperations.SourceDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ClassUsesOperations link in links )
			{
				if ( target.Equals(link.TargetService) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassUsesOperations link between a given TypeWithOperationsand a NamedElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ClassUsesOperations GetLink( global::DSLFactory.Candle.SystemModel.TypeWithOperations source, global::DSLFactory.Candle.SystemModel.NamedElement target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ClassUsesOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassUsesOperations>(source, global::DSLFactory.Candle.SystemModel.ClassUsesOperations.SourceDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ClassUsesOperations link in links )
			{
				if ( target.Equals(link.TargetService) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship ClassUsesOperationsHasDependencyProperties
	/// Description for
	/// DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1068c261-c2b6-4fc5-818c-dfc2c02bb37a")]
	public partial class ClassUsesOperationsHasDependencyProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassUsesOperationsHasDependencyProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1068c261, 0xc2b6, 0x4fc5, 0x81, 0x8c, 0xdf, 0xc2, 0xc0, 0x2b, 0xb3, 0x7a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassUsesOperationsHasDependencyProperties link in the same Partition as the given ClassUsesOperations
		/// </summary>
		/// <param name="source">ClassUsesOperations to use as the source of the relationship.</param>
		/// <param name="target">DependencyProperty to use as the target of the relationship.</param>
		public ClassUsesOperationsHasDependencyProperties(ClassUsesOperations source, DependencyProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassUsesOperationsHasDependencyProperties.ClassUsesOperationsDomainRoleId, source), new DslModeling::RoleAssignment(ClassUsesOperationsHasDependencyProperties.DependencyPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassUsesOperationsHasDependencyProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassUsesOperationsHasDependencyProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassUsesOperationsHasDependencyProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassUsesOperationsHasDependencyProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ClassUsesOperations domain role code
		
		/// <summary>
		/// ClassUsesOperations domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassUsesOperationsDomainRoleId = new global::System.Guid(0x939a039a, 0x5b54, 0x4199, 0x8d, 0x61, 0x9d, 0xc5, 0xd1, 0x91, 0x09, 0x2c);
		
		/// <summary>
		/// DomainRole ClassUsesOperations
		/// Description for
		/// DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.ClassUsesOperations
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties/ClassUsesOperations.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties/ClassUsesOperations.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DependencyProperties", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties/ClassUsesOperations.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("939a039a-5b54-4199-8d61-9dc5d191092c")]
		public virtual ClassUsesOperations ClassUsesOperations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClassUsesOperations)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassUsesOperationsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassUsesOperationsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ClassUsesOperations of a DependencyProperty
		/// <summary>
		/// Gets ClassUsesOperations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ClassUsesOperations GetClassUsesOperations(DependencyProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DependencyPropertyDomainRoleId) as ClassUsesOperations;
		}
		
		/// <summary>
		/// Sets ClassUsesOperations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetClassUsesOperations(DependencyProperty element, ClassUsesOperations newClassUsesOperations)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DependencyPropertyDomainRoleId, newClassUsesOperations);
		}
		#endregion
		#region DependencyProperty domain role code
		
		/// <summary>
		/// DependencyProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid DependencyPropertyDomainRoleId = new global::System.Guid(0x774e9344, 0x05c9, 0x4cac, 0x90, 0xbf, 0xa3, 0x46, 0x96, 0xd5, 0xe3, 0x13);
		
		/// <summary>
		/// DomainRole DependencyProperty
		/// Description for
		/// DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.DependencyProperty
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties/DependencyProperty.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties/DependencyProperty.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ClassUsesOperations", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties/DependencyProperty.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("774e9344-05c9-4cac-90bf-a34696d5e313")]
		public virtual DependencyProperty DependencyProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DependencyProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, DependencyPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DependencyPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DependencyProperties of a ClassUsesOperations
		/// <summary>
		/// Gets a list of DependencyProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DependencyProperty> GetDependencyProperties(ClassUsesOperations element)
		{
			return new DslModeling::LinkedElementCollection<DependencyProperty>(element, ClassUsesOperationsDomainRoleId);
		}
		#endregion
		#region ClassUsesOperations link accessor
		/// <summary>
		/// Get the list of ClassUsesOperationsHasDependencyProperties links to a ClassUsesOperations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties> GetLinksToDependencyProperties ( global::DSLFactory.Candle.SystemModel.ClassUsesOperations classUsesOperationsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties>(classUsesOperationsInstance, global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.ClassUsesOperationsDomainRoleId);
		}
		#endregion
		#region DependencyProperty link accessor
		/// <summary>
		/// Get the ClassUsesOperationsHasDependencyProperties link to a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties GetLinkToClassUsesOperations (global::DSLFactory.Candle.SystemModel.DependencyProperty dependencyPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties>(dependencyPropertyInstance, global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.DependencyPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DependencyProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassUsesOperationsHasDependencyProperties instance accessors
		
		/// <summary>
		/// Get any ClassUsesOperationsHasDependencyProperties links between a given ClassUsesOperations and a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties> GetLinks( global::DSLFactory.Candle.SystemModel.ClassUsesOperations source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties>(source, global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.ClassUsesOperationsDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassUsesOperationsHasDependencyProperties link between a given ClassUsesOperationsand a DependencyProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties GetLink( global::DSLFactory.Candle.SystemModel.ClassUsesOperations source, global::DSLFactory.Candle.SystemModel.DependencyProperty target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties>(source, global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties.ClassUsesOperationsDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.ClassUsesOperationsHasDependencyProperties link in links )
			{
				if ( target.Equals(link.DependencyProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship DataLayerReferencesExternalComponent
	/// Description for
	/// DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("016ef407-6928-4cc0-9311-eb1a66cdcfb6")]
	public partial class DataLayerReferencesExternalComponent : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataLayerReferencesExternalComponent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x016ef407, 0x6928, 0x4cc0, 0x93, 0x11, 0xeb, 0x1a, 0x66, 0xcd, 0xcf, 0xb6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataLayerReferencesExternalComponent link in the same Partition as the given DataLayer
		/// </summary>
		/// <param name="source">DataLayer to use as the source of the relationship.</param>
		/// <param name="target">ExternalComponent to use as the target of the relationship.</param>
		public DataLayerReferencesExternalComponent(DataLayer source, ExternalComponent target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataLayerReferencesExternalComponent.DataLayerDomainRoleId, source), new DslModeling::RoleAssignment(DataLayerReferencesExternalComponent.ReferencedExternalComponentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataLayerReferencesExternalComponent(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataLayerReferencesExternalComponent(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataLayerReferencesExternalComponent(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataLayerReferencesExternalComponent(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataLayer domain role code
		
		/// <summary>
		/// DataLayer domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataLayerDomainRoleId = new global::System.Guid(0x096abeda, 0xcc95, 0x47ad, 0x8d, 0x22, 0xf6, 0x5c, 0x7e, 0xf4, 0xdd, 0x4f);
		
		/// <summary>
		/// DomainRole DataLayer
		/// Description for
		/// DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.DataLayer
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent/DataLayer.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent/DataLayer.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ReferencedExternalComponents", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent/DataLayer.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("096abeda-cc95-47ad-8d22-f65c7ef4dd4f")]
		public virtual DataLayer DataLayer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataLayer)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataLayerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataLayerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataLayer of a ExternalComponent
		/// <summary>
		/// Gets DataLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataLayer GetDataLayer(ExternalComponent element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferencedExternalComponentDomainRoleId) as DataLayer;
		}
		
		/// <summary>
		/// Sets DataLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataLayer(ExternalComponent element, DataLayer newDataLayer)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferencedExternalComponentDomainRoleId, newDataLayer);
		}
		#endregion
		#region ReferencedExternalComponent domain role code
		
		/// <summary>
		/// ReferencedExternalComponent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferencedExternalComponentDomainRoleId = new global::System.Guid(0xe40af07d, 0xb807, 0x4f99, 0x8f, 0xb7, 0xea, 0xcd, 0x86, 0x4f, 0x37, 0x56);
		
		/// <summary>
		/// DomainRole ReferencedExternalComponent
		/// Description for
		/// DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.ReferencedExternalComponent
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent/ReferencedExternalComponent.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent/ReferencedExternalComponent.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataLayer", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent/ReferencedExternalComponent.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e40af07d-b807-4f99-8fb7-eacd864f3756")]
		public virtual ExternalComponent ReferencedExternalComponent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExternalComponent)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferencedExternalComponentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferencedExternalComponentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ReferencedExternalComponents of a DataLayer
		/// <summary>
		/// Gets a list of ReferencedExternalComponents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExternalComponent> GetReferencedExternalComponents(DataLayer element)
		{
			return new DslModeling::LinkedElementCollection<ExternalComponent>(element, DataLayerDomainRoleId);
		}
		#endregion
		#region ConfigurationMode domain property code
		
		/// <summary>
		/// ConfigurationMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConfigurationModeDomainPropertyId = new global::System.Guid(0x3ac27700, 0xfbb9, 0x4b8e, 0xb9, 0xc1, 0x93, 0x03, 0x97, 0x72, 0xf4, 0xe6);
		
		/// <summary>
		/// Storage for ConfigurationMode
		/// </summary>
		private global::System.String configurationModePropertyStorage = "*";
		
		/// <summary>
		/// Gets or sets the value of ConfigurationMode domain property.
		/// Description for
		/// DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.Configuration
		/// Mode
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent/ConfigurationMode.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent/ConfigurationMode.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("*")]
		[DslModeling::DomainObjectId("3ac27700-fbb9-4b8e-b9c1-93039772f4e6")]
		public global::System.String ConfigurationMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return configurationModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConfigurationModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataLayerReferencesExternalComponent.ConfigurationMode domain property.
		/// </summary>
		internal sealed partial class ConfigurationModePropertyHandler : DslModeling::DomainPropertyValueHandler<DataLayerReferencesExternalComponent, global::System.String>
		{
			private ConfigurationModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataLayerReferencesExternalComponent.ConfigurationMode domain property value handler.
			/// </summary>
			public static readonly ConfigurationModePropertyHandler Instance = new ConfigurationModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataLayerReferencesExternalComponent.ConfigurationMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConfigurationModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DataLayerReferencesExternalComponent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.configurationModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataLayerReferencesExternalComponent element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.configurationModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Scope domain property code
		
		/// <summary>
		/// Scope domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScopeDomainPropertyId = new global::System.Guid(0xb874771e, 0x6203, 0x476d, 0x98, 0x25, 0x5d, 0xfb, 0xa7, 0x0e, 0x3e, 0xde);
		
		/// <summary>
		/// Storage for Scope
		/// </summary>
		private ReferenceScope scopePropertyStorage = DslModeling::SerializationUtilities.GetValue<ReferenceScope>("Compilation,Runtime");
		
		/// <summary>
		/// Gets or sets the value of Scope domain property.
		/// Description for
		/// DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.Scope
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent/Scope.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent/Scope.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(typeof(global::DSLFactory.Candle.SystemModel.ReferenceScope), "Compilation,Runtime")]
		[DslModeling::DomainObjectId("b874771e-6203-476d-9825-5dfba70e3ede")]
		public ReferenceScope Scope
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scopePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScopePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataLayerReferencesExternalComponent.Scope domain property.
		/// </summary>
		internal sealed partial class ScopePropertyHandler : DslModeling::DomainPropertyValueHandler<DataLayerReferencesExternalComponent, ReferenceScope>
		{
			private ScopePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataLayerReferencesExternalComponent.Scope domain property value handler.
			/// </summary>
			public static readonly ScopePropertyHandler Instance = new ScopePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataLayerReferencesExternalComponent.Scope domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScopeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ReferenceScope GetValue(DataLayerReferencesExternalComponent element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scopePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataLayerReferencesExternalComponent element, ReferenceScope newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ReferenceScope oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scopePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataLayer link accessor
		/// <summary>
		/// Get the list of DataLayerReferencesExternalComponent links to a DataLayer.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent> GetLinksToReferencedExternalComponents ( global::DSLFactory.Candle.SystemModel.DataLayer dataLayerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent>(dataLayerInstance, global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.DataLayerDomainRoleId);
		}
		#endregion
		#region ReferencedExternalComponent link accessor
		/// <summary>
		/// Get the DataLayerReferencesExternalComponent link to a ExternalComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent GetLinkToDataLayer (global::DSLFactory.Candle.SystemModel.ExternalComponent referencedExternalComponentInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent>(referencedExternalComponentInstance, global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.ReferencedExternalComponentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ReferencedExternalComponent not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataLayerReferencesExternalComponent instance accessors
		
		/// <summary>
		/// Get any DataLayerReferencesExternalComponent links between a given DataLayer and a ExternalComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent> GetLinks( global::DSLFactory.Candle.SystemModel.DataLayer source, global::DSLFactory.Candle.SystemModel.ExternalComponent target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent>(source, global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.DataLayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent link in links )
			{
				if ( target.Equals(link.ReferencedExternalComponent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataLayerReferencesExternalComponent link between a given DataLayerand a ExternalComponent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent GetLink( global::DSLFactory.Candle.SystemModel.DataLayer source, global::DSLFactory.Candle.SystemModel.ExternalComponent target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent>(source, global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent.DataLayerDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.DataLayerReferencesExternalComponent link in links )
			{
				if ( target.Equals(link.ReferencedExternalComponent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship EntityHasSubClasses
	/// Description for DSLFactory.Candle.SystemModel.EntityHasSubClasses
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EntityHasSubClasses.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EntityHasSubClasses.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("89bcf941-c818-4315-b2c9-def4d67d1244")]
	public partial class EntityHasSubClasses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasSubClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89bcf941, 0xc818, 0x4315, 0xb2, 0xc9, 0xde, 0xf4, 0xd6, 0x7d, 0x12, 0x44);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasSubClasses link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public EntityHasSubClasses(Entity source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasSubClasses.SuperClassDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasSubClasses.SubClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasSubClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasSubClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasSubClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasSubClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SuperClass domain role code
		
		/// <summary>
		/// SuperClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperClassDomainRoleId = new global::System.Guid(0xd2c31ea6, 0x3629, 0x438b, 0x93, 0x3e, 0x01, 0xef, 0xbb, 0x4b, 0xfb, 0x36);
		
		/// <summary>
		/// DomainRole SuperClass
		/// Description for DSLFactory.Candle.SystemModel.EntityHasSubClasses.SuperClass
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EntityHasSubClasses/SuperClass.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EntityHasSubClasses/SuperClass.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EntityHasSubClasses", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.EntityHasSubClasses/SuperClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d2c31ea6-3629-438b-933e-01efbb4bfb36")]
		public virtual Entity SuperClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SuperClasses of a Entity
		/// <summary>
		/// Gets a list of SuperClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<Entity> GetSuperClasses(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, SubClassDomainRoleId);
		}
		#endregion
		#region SubClass domain role code
		
		/// <summary>
		/// SubClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubClassDomainRoleId = new global::System.Guid(0xa6dd50b0, 0xa7af, 0x4288, 0xb5, 0x89, 0x68, 0x6d, 0xd2, 0xcf, 0x12, 0x3b);
		
		/// <summary>
		/// DomainRole SubClass
		/// Description for DSLFactory.Candle.SystemModel.EntityHasSubClasses.SubClass
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.EntityHasSubClasses/SubClass.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.EntityHasSubClasses/SubClass.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SuperClasses", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.EntityHasSubClasses/SubClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a6dd50b0-a7af-4288-b589-686dd2cf123b")]
		public virtual Entity SubClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityHasSubClasses of a Entity
		/// <summary>
		/// Gets a list of EntityHasSubClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetEntityHasSubClasses(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, SuperClassDomainRoleId);
		}
		#endregion
		#region SuperClass link accessor
		/// <summary>
		/// Get the list of EntityHasSubClasses links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.EntityHasSubClasses> GetLinksToEntityHasSubClasses ( global::DSLFactory.Candle.SystemModel.Entity superClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.EntityHasSubClasses>(superClassInstance, global::DSLFactory.Candle.SystemModel.EntityHasSubClasses.SuperClassDomainRoleId);
		}
		#endregion
		#region SubClass link accessor
		/// <summary>
		/// Get the list of EntityHasSubClasses links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.EntityHasSubClasses> GetLinksToSuperClasses ( global::DSLFactory.Candle.SystemModel.Entity subClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.EntityHasSubClasses>(subClassInstance, global::DSLFactory.Candle.SystemModel.EntityHasSubClasses.SubClassDomainRoleId);
		}
		#endregion
		#region EntityHasSubClasses instance accessors
		
		/// <summary>
		/// Get any EntityHasSubClasses links between a given Entity and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.EntityHasSubClasses> GetLinks( global::DSLFactory.Candle.SystemModel.Entity source, global::DSLFactory.Candle.SystemModel.Entity target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.EntityHasSubClasses> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.EntityHasSubClasses>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.EntityHasSubClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.EntityHasSubClasses>(source, global::DSLFactory.Candle.SystemModel.EntityHasSubClasses.SuperClassDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.EntityHasSubClasses link in links )
			{
				if ( target.Equals(link.SubClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace DSLFactory.Candle.SystemModel
{
	/// <summary>
	/// DomainRelationship Generalization
	/// Description for DSLFactory.Candle.SystemModel.Generalization
	/// </summary>
	[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Generalization.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Generalization.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5671a244-3eae-4159-ac0d-7a0fa9b6b455")]
	public partial class Generalization : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Generalization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5671a244, 0x3eae, 0x4159, 0xac, 0x0d, 0x7a, 0x0f, 0xa9, 0xb6, 0xb4, 0x55);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Generalization link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public Generalization(Entity source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Generalization.SuperClassDomainRoleId, source), new DslModeling::RoleAssignment(Generalization.SubClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SuperClass domain role code
		
		/// <summary>
		/// SuperClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperClassDomainRoleId = new global::System.Guid(0x0d47735a, 0x4601, 0x4ac9, 0x9b, 0x4d, 0xd1, 0xd7, 0xf9, 0x52, 0xd1, 0x5a);
		
		/// <summary>
		/// DomainRole SuperClass
		/// Description for DSLFactory.Candle.SystemModel.Generalization.SuperClass
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Generalization/SuperClass.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Generalization/SuperClass.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SubClasses", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.Generalization/SuperClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0d47735a-4601-4ac9-9b4d-d1d7f952d15a")]
		public virtual Entity SuperClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SuperClass of a Entity
		/// <summary>
		/// Gets SuperClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetSuperClass(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubClassDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets SuperClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperClass(Entity element, Entity newSuperClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubClassDomainRoleId, newSuperClass);
		}
		#endregion
		#region SubClass domain role code
		
		/// <summary>
		/// SubClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubClassDomainRoleId = new global::System.Guid(0xfc7095d7, 0x6ecb, 0x449a, 0x85, 0x18, 0x0a, 0x89, 0x8f, 0x08, 0xc0, 0xa6);
		
		/// <summary>
		/// DomainRole SubClass
		/// Description for DSLFactory.Candle.SystemModel.Generalization.SubClass
		/// </summary>
		[DslDesign::DisplayNameResource("DSLFactory.Candle.SystemModel.Generalization/SubClass.DisplayName", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DSLFactory.Candle.SystemModel.Generalization/SubClass.Description", typeof(global::DSLFactory.Candle.SystemModel.CandleDomainModel), "DSLFactory.Candle.SystemModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SuperClass", PropertyDisplayNameKey="DSLFactory.Candle.SystemModel.Generalization/SubClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("fc7095d7-6ecb-449a-8518-0a898f08c0a6")]
		public virtual Entity SubClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubClasses of a Entity
		/// <summary>
		/// Gets a list of SubClasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetSubClasses(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, SuperClassDomainRoleId);
		}
		#endregion
		#region SuperClass link accessor
		/// <summary>
		/// Get the list of Generalization links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.Generalization> GetLinksToSubClasses ( global::DSLFactory.Candle.SystemModel.Entity superClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Generalization>(superClassInstance, global::DSLFactory.Candle.SystemModel.Generalization.SuperClassDomainRoleId);
		}
		#endregion
		#region SubClass link accessor
		/// <summary>
		/// Get the Generalization link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.Generalization GetLinkToSuperClass (global::DSLFactory.Candle.SystemModel.Entity subClassInstance)
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Generalization>(subClassInstance, global::DSLFactory.Candle.SystemModel.Generalization.SubClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Generalization instance accessors
		
		/// <summary>
		/// Get any Generalization links between a given Entity and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DSLFactory.Candle.SystemModel.Generalization> GetLinks( global::DSLFactory.Candle.SystemModel.Entity source, global::DSLFactory.Candle.SystemModel.Entity target )
		{
			global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.Generalization> outLinks = new global::System.Collections.Generic.List<global::DSLFactory.Candle.SystemModel.Generalization>();
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Generalization>(source, global::DSLFactory.Candle.SystemModel.Generalization.SuperClassDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.Generalization link in links )
			{
				if ( target.Equals(link.SubClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Generalization link between a given Entityand a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DSLFactory.Candle.SystemModel.Generalization GetLink( global::DSLFactory.Candle.SystemModel.Entity source, global::DSLFactory.Candle.SystemModel.Entity target )
		{
			global::System.Collections.Generic.IList<global::DSLFactory.Candle.SystemModel.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DSLFactory.Candle.SystemModel.Generalization>(source, global::DSLFactory.Candle.SystemModel.Generalization.SuperClassDomainRoleId);
			foreach ( global::DSLFactory.Candle.SystemModel.Generalization link in links )
			{
				if ( target.Equals(link.SubClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
