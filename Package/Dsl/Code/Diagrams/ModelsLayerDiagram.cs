//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DSLFactory.Candle.SystemModel.Commands;
using Microsoft.VisualStudio.Modeling.Diagrams;
using DslModeling=Microsoft.VisualStudio.Modeling;
using DslDesign=Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams=Microsoft.VisualStudio.Modeling.Diagrams;

namespace DSLFactory.Candle.SystemModel
{
    /// <summary>
    /// DomainClass SystemModelDiagram
    /// Description for DSLFactory.Candle.SystemModel.SystemModelDiagram
    /// </summary>
    [global::System.CLSCompliant( true )]
    [DslModeling::DomainObjectId( "28586B18-0C7B-4862-91A2-CCC1A573686E" )]
    public partial class DataLayerDiagram : ComponentModelDiagram, ISupportArrangeShapes
    {
        #region Toolbox filters
        private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
                        new global::System.ComponentModel.ToolboxItemFilterAttribute(global::DSLFactory.Candle.SystemModel.CandleToolboxHelper.ToolboxModelsFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };

        /// <summary>
        /// Toolbox item filter attributes for this diagram.
        /// </summary>
        public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
        {
            get
            {
                return toolboxFilters;
            }
        }
        #endregion

        #region Shape mapping
        /// <summary>
        /// Called during view fixup to ask the parent whether a shape should be created for the given child element.
        /// </summary>
        /// <remarks>
        /// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
        /// </remarks>
        protected override bool ShouldAddShapeForElement( DslModeling::ModelElement element )
        {
            return true;
        }
        #endregion

        #region Constructors, domain class Id

        /// <summary>
        /// SystemModelDiagram domain class Id.
        /// </summary>
        public static readonly new global::System.Guid DomainClassId = new System.Guid(
            0x28586b18, 0xc7b, 0x4862, 0x91, 0xa2, 0xcc, 0xc1, 0xa5, 0x73, 0x68, 0x6e );

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="store">Store where new element is to be created.</param>
        /// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        public DataLayerDiagram( DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments )
            : this( store != null ? store.DefaultPartition : null, propertyAssignments )
        {
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="partition">Partition where new element is to be created.</param>
        /// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
        public DataLayerDiagram( DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments )
            : base( partition, propertyAssignments )
        {
        }
        #endregion

        /// <summary>
        /// Arranges the shapes.
        /// </summary>
        public new void ArrangeShapes()
        {
            ShapeHelper.ArrangeChildShapes( this, this.NestedChildShapes, 12, 0, new PointD( 0.2, 0.5 ), 0.2, 0.2 );
        }

        /// <summary>
        /// Gets the watermark text that is assigned to the diagram.
        /// </summary>
        /// <value></value>
        /// <returns>The watermark text that is assigned to the diagram.</returns>
        public override string WatermarkText
        {
            get
            {
                return "Drag a 'Namespace' from the toolbox";
            }
        }
    }

}

