using System;
using DSLFactory.Candle.SystemModel.Strategies;
using Microsoft.VisualStudio.Modeling;
using Microsoft.VisualStudio.TextTemplating.VSHost;

namespace DSLFactory.Candle.SystemModel.CodeGeneration
{
    /// <summary>
    /// Classe de base pour les templates executés par le <see cref="Generator"/>
    /// </summary>
    public abstract class StrategyTextTransformation : ModelingTextTransformation
    {
        /// <summary>
        /// Gets the generated header.
        /// </summary>
        /// <value>The generated header.</value>
        public virtual string GeneratedHeader
        {
            get
            {
                return
                    @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Candle strategy template 
//          Template : " +
                    Context.Template +
                    @" 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     You can change this behavior by modifiying the CanRegenerate property of this file.
//
// </auto-generated>
//------------------------------------------------------------------------------";
            }
        }

        /// <summary>
        /// Gets the context.
        /// </summary>
        /// <value>The context.</value>
        public virtual GenerationContext Context
        {
            get { return null; }
        }

        /// <summary>
        /// Gets the properties.
        /// </summary>
        /// <value>The properties.</value>
        public TemplateProperties Properties
        {
            get { return CandleTemplateHost.Instance.Properties; }
        }

        /// <summary>
        /// Gets the element.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="guid">The GUID.</param>
        /// <returns></returns>
        protected T GetElement<T>(Guid guid) where T : ModelElement
        {
            return Context.Model.Store.ElementDirectory.FindElement(guid) as T;
        }

        #region Code generation utils

        /// <summary>
        /// Determines whether [is value type] [the specified type name].
        /// </summary>
        /// <param name="TypeName">Name of the type.</param>
        /// <returns>
        /// 	<c>true</c> if [is value type] [the specified type name]; otherwise, <c>false</c>.
        /// </returns>
        public bool IsValueType(string TypeName)
        {
            return CodeGenerationUtils.IsValueType(TypeName);
        }


        /// <summary>
        /// Déclaration d'une opération avec sa liste de paramètre
        /// </summary>
        /// <param name="declaration">The declaration.</param>
        /// <param name="operationName">Name of the operation.</param>
        /// <param name="op">The op.</param>
        /// <returns></returns>
        protected string OperationDeclaration(string declaration, string operationName, Operation op)
        {
            return
                String.Format("{0} {1} {2}( {3} )", declaration, op.FullName, operationName, GetParametersDefinition(op));
        }

        /// <summary>
        /// Operations the declaration.
        /// </summary>
        /// <param name="op">The op.</param>
        /// <returns></returns>
        protected string OperationDeclaration(Operation op)
        {
            return OperationDeclaration("public", op.Name, op);
        }

        /// <summary>
        /// Définition des paramètres avec leurs types
        /// </summary>
        /// <param name="op">The op.</param>
        /// <returns></returns>
        public string GetParametersDefinition(Operation op)
        {
            return CodeGenerationUtils.GetParametersDefinition(op);
        }

        /// <summary>
        /// Liste des paramètres
        /// </summary>
        /// <param name="op">The op.</param>
        /// <returns></returns>
        public string GetParametersList(Operation op)
        {
            return CodeGenerationUtils.GetParametersList(op);
        }

        /// <summary>
        /// Formate les commentaires en mettant les caractères "///" devant chaque ligne
        /// </summary>
        /// <param name="indent">Indentation des lignes</param>
        /// <param name="comment">Commentaire</param>
        /// <returns></returns>
        public string FormatComment(string indent, string comment)
        {
            return CodeGenerationUtils.FormatComment(indent, comment);
        }

        #endregion
    }
}